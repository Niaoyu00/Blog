<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>数组实现栈</title>
    <url>/Blog/2022/10/27/%E6%95%B0%E7%BB%84%E5%AE%9E%E7%8E%B0%E6%A0%88/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\Blog\assets\css\APlayer.min.css"><script src="\Blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\Blog\assets\js\Meting.min.js"></script>]]></content>
      <categories>
        <category>基础学习</category>
      </categories>
      <tags>
        <tag>Csharp</tag>
        <tag>数据结构</tag>
        <tag>栈</tag>
      </tags>
  </entry>
  <entry>
    <title>使用阿里云oss搭建图床</title>
    <url>/Blog/2022/10/25/%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91oss%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\Blog\assets\css\APlayer.min.css"><script src="\Blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\Blog\assets\js\Meting.min.js"></script><blockquote>
<p>最近发现墙变厚了,不开飞机放在github的图加载实在慢,于是我去了解了下云存储。</p>
<p>花了45买了五年的阿里云oss，在此记录下。</p>
</blockquote>
<h3 id="开通点此-对象存储OSS"><a href="#开通点此-对象存储OSS" class="headerlink" title="开通点此:对象存储OSS"></a><strong>开通点此:</strong><span class="exturl" data-url="aHR0cHM6Ly93d3cuYWxpeXVuLmNvbS9wcm9kdWN0L29zcz9zcG09NTE3Ni44NDY1OTgwLnVudXNhYmxlLmRkZXRhaWwuNTJlNzE0NTBjNG1VU3o=">对象存储OSS<i class="fa fa-external-link-alt"></i></span></h3><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户:"></a>创建用户:</h3><h4 id="网页右上角"><a href="#网页右上角" class="headerlink" title="网页右上角"></a>网页右上角</h4><p><img src="https://niaoyu.oss-cn-shenzhen.aliyuncs.com/img/image-20221025140017675.png" alt="image-20221025140017675"></p>
<p><img src="https://niaoyu.oss-cn-shenzhen.aliyuncs.com/img/image-20221025140116066.png" alt="image-20221025140116066"></p>
<h4 id="名称随便取-这里要勾上"><a href="#名称随便取-这里要勾上" class="headerlink" title="名称随便取,这里要勾上"></a>名称随便取,这里要勾上</h4><p><img src="https://niaoyu.oss-cn-shenzhen.aliyuncs.com/img/image-20221025140219928.png" alt="image-20221025140219928"></p>
<h4 id="进行一下验证"><a href="#进行一下验证" class="headerlink" title="进行一下验证"></a>进行一下验证</h4><p><strong>创建完之后一定要复制这俩key,只有创建时会显示,错过忘了得重新生成</strong></p>
<p><img src="https://niaoyu.oss-cn-shenzhen.aliyuncs.com/img/image-20221025140425388.png" alt="image-20221025140425388"></p>
<h3 id="回到用户界面-添加用户权限"><a href="#回到用户界面-添加用户权限" class="headerlink" title="回到用户界面,添加用户权限"></a>回到用户界面,添加用户权限</h3><p><img src="https://niaoyu.oss-cn-shenzhen.aliyuncs.com/img/image-20221025140542152.png" alt="image-20221025140542152"></p>
<h4 id="搜索oss-确认"><a href="#搜索oss-确认" class="headerlink" title="搜索oss,确认"></a>搜索oss,确认</h4><p><img src="https://niaoyu.oss-cn-shenzhen.aliyuncs.com/img/image-20221025140608647.png" alt="image-20221025140608647"></p>
<h3 id="回到对象存储控制台-创建bucket"><a href="#回到对象存储控制台-创建bucket" class="headerlink" title="回到对象存储控制台,创建bucket"></a>回到对象存储控制台,创建bucket</h3><h4 id="地域选附近的-读写权限选公读-其他选项全部默认"><a href="#地域选附近的-读写权限选公读-其他选项全部默认" class="headerlink" title="地域选附近的,读写权限选公读,其他选项全部默认."></a>地域选附近的,读写权限选公读,其他选项全部默认.</h4><p><img src="https://niaoyu.oss-cn-shenzhen.aliyuncs.com/img/image-20221025140807924.png" alt="image-20221025140807924"></p>
<h3 id="bucket中授权用户"><a href="#bucket中授权用户" class="headerlink" title="bucket中授权用户"></a>bucket中授权用户</h3><h4 id="进入文件管理"><a href="#进入文件管理" class="headerlink" title="进入文件管理"></a>进入文件管理</h4><p><img src="https://niaoyu.oss-cn-shenzhen.aliyuncs.com/img/image-20221025141219973.png" alt="image-20221025141219973"></p>
<h4 id="选择子账号-选择读-x2F-写-确认"><a href="#选择子账号-选择读-x2F-写-确认" class="headerlink" title="选择子账号,选择读&#x2F;写,确认"></a>选择子账号,选择读&#x2F;写,确认</h4><p><img src="https://niaoyu.oss-cn-shenzhen.aliyuncs.com/img/image-20221025141309175.png" alt="image-20221025141309175"></p>
<h3 id="picgo软件配置"><a href="#picgo软件配置" class="headerlink" title="picgo软件配置"></a>picgo软件配置</h3><h4 id="看提示填就行"><a href="#看提示填就行" class="headerlink" title="看提示填就行"></a>看提示填就行</h4><p><img src="https://niaoyu.oss-cn-shenzhen.aliyuncs.com/img/image-20221025141028197.png" alt="image-20221025141028197"></p>
<h2 id="配置完成"><a href="#配置完成" class="headerlink" title="配置完成"></a>配置完成</h2>]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>阿里云</tag>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title>时间复杂度分析</title>
    <url>/Blog/2022/10/24/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\Blog\assets\css\APlayer.min.css"><script src="\Blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\Blog\assets\js\Meting.min.js"></script><h2 id="影响程序运行的总时间主要和两点有关"><a href="#影响程序运行的总时间主要和两点有关" class="headerlink" title="影响程序运行的总时间主要和两点有关"></a>影响程序运行的总时间主要和两点有关</h2><ul>
<li><p>执行每条语句的耗时</p>
</li>
<li><p>执行每条语句的频率</p>
</li>
</ul>
<p>前者主要取决于<strong>计算机性能、编译器、操作系统</strong>；</p>
<p>后者主要取决于<strong>程序本身和输入</strong>。</p>
<h2 id="大O表示法：描述算法的运行时间和数据结构规模的关系"><a href="#大O表示法：描述算法的运行时间和数据结构规模的关系" class="headerlink" title="大O表示法：描述算法的运行时间和数据结构规模的关系"></a>大O表示法：描述算法的运行时间和数据结构规模的关系</h2><p>O(1)	O(n)	O(log n)	O(n log n)	O(n^2)</p>
<h3 id="例子：数组末尾添加，四条语句执行时间，O-1"><a href="#例子：数组末尾添加，四条语句执行时间，O-1" class="headerlink" title="例子：数组末尾添加，四条语句执行时间，O(1)"></a>例子：数组末尾添加，四条语句执行时间，O(1)</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">      <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">      <span class="comment"><span class="doctag">///</span> index的位置插入item值</span></span><br><span class="line">      <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">      <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;index&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">      <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;item&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Insert</span>(<span class="params"><span class="built_in">int</span> index, T item</span>)</span></span><br><span class="line">      &#123;<span class="comment">//插入</span></span><br><span class="line">          <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; count)<span class="comment">//----------------1</span></span><br><span class="line">          &#123;</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">&quot;数组索引越界&quot;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (count == data.Length)<span class="comment">//----------------------1</span></span><br><span class="line">          &#123;</span><br><span class="line">              <span class="comment">//throw new ArgumentException(&quot;数组已满&quot;);</span></span><br><span class="line">              ResetCapacity(<span class="number">2</span> * data.Length);<span class="comment">//数组扩容加原来两倍</span></span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">for</span> (<span class="built_in">int</span> i = count - <span class="number">1</span>; i &gt;= index; i--)<span class="comment">//-------不成立</span></span><br><span class="line">          &#123;</span><br><span class="line">              data[i + <span class="number">1</span>] = data[i];</span><br><span class="line">          &#125;</span><br><span class="line">          data[index] = item;<span class="comment">//----------------------------1</span></span><br><span class="line">          count++;<span class="comment">//---------------------------------------1</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">      <span class="comment"><span class="doctag">///</span> 末尾添加，count:元素个数</span></span><br><span class="line">      <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">      <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;item&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddLast</span>(<span class="params">T item</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">          Insert(count, item);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<h3 id="数组头部添加-4-n条语句执行-O-n"><a href="#数组头部添加-4-n条语句执行-O-n" class="headerlink" title="数组头部添加,4+n条语句执行,O(n)"></a>数组头部添加,4+n条语句执行,O(n)</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">      <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">      <span class="comment"><span class="doctag">///</span> index的位置插入item值</span></span><br><span class="line">      <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">      <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;index&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">      <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;item&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Insert</span>(<span class="params"><span class="built_in">int</span> index, T item</span>)</span></span><br><span class="line">      &#123;<span class="comment">//插入</span></span><br><span class="line">          <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; count)<span class="comment">//----------------1</span></span><br><span class="line">          &#123;</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">&quot;数组索引越界&quot;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (count == data.Length)<span class="comment">//----------------------1</span></span><br><span class="line">          &#123;</span><br><span class="line">              <span class="comment">//throw new ArgumentException(&quot;数组已满&quot;);</span></span><br><span class="line">              ResetCapacity(<span class="number">2</span> * data.Length);<span class="comment">//数组扩容加原来两倍</span></span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">for</span> (<span class="built_in">int</span> i = count - <span class="number">1</span>; i &gt;= index; i--)<span class="comment">//-------n</span></span><br><span class="line">          &#123;</span><br><span class="line">              data[i + <span class="number">1</span>] = data[i];</span><br><span class="line">          &#125;</span><br><span class="line">          data[index] = item;<span class="comment">//----------------------------1</span></span><br><span class="line">          count++;<span class="comment">//---------------------------------------1</span></span><br><span class="line">      &#125;        </span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">      <span class="comment"><span class="doctag">///</span> 头部添加</span></span><br><span class="line">      <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">      <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;item&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddFirst</span>(<span class="params">T item</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">          Insert(<span class="number">0</span>, item);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<h3 id="数组根据值找索引-O-1-或者O-n"><a href="#数组根据值找索引-O-1-或者O-n" class="headerlink" title="数组根据值找索引 O(1)或者O(n)"></a>数组根据值找索引 O(1)或者O(n)</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 根据值找索引</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;value&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">IndexOf</span>(<span class="params">T <span class="keyword">value</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; count; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (data[i].Equals(<span class="keyword">value</span>))<span class="comment">//不能用==,因为都是值类型,不合法</span></span><br><span class="line">        &#123;<span class="comment">//确定指定的对象是否等于当前对象。</span></span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//值不存在</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>元素存在数组中<ul>
<li>元素在数组头部找到:O(1)</li>
<li>元素在数组尾部找到:O(n)</li>
<li>平均在数组中间找到:O(2&#x2F;n)&#x3D;O(n)</li>
</ul>
</li>
<li>元素不在数组中:O(n)</li>
</ul>
<h3 id="数组末尾删除-O-1"><a href="#数组末尾删除-O-1" class="headerlink" title="数组末尾删除,O(1)"></a>数组末尾删除,O(1)</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">      <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">      <span class="comment"><span class="doctag">///</span> 删除index位置的值</span></span><br><span class="line">      <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">      <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;index&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">      <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">Delete</span>(<span class="params"><span class="built_in">int</span> index</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">if</span> (count == data.Length / <span class="number">4</span>)<span class="comment">//不足四分之一时,空间减少------1</span></span><br><span class="line">          &#123;</span><br><span class="line">              ResetCapacity(data.Length / <span class="number">2</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= count)</span><br><span class="line">          &#123;</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">&quot;索引超出数组界限&quot;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          T temp = data[index];<span class="comment">//----------------------------------1</span></span><br><span class="line">          <span class="keyword">for</span> (<span class="built_in">int</span> i = index + <span class="number">1</span>; i &lt; count; i++)<span class="comment">//不满足条件</span></span><br><span class="line">          &#123;</span><br><span class="line">              data[i - <span class="number">1</span>] = data[i];<span class="comment">//左移</span></span><br><span class="line">          &#125;</span><br><span class="line">          count--;<span class="comment">//-----------------------------------------------1</span></span><br><span class="line">          data[count] = <span class="literal">default</span>(T);<span class="comment">//------------------------------1</span></span><br><span class="line">          <span class="keyword">return</span> temp;<span class="comment">//-------------------------------------------1</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">      <span class="comment"><span class="doctag">///</span> 删除末尾</span></span><br><span class="line">      <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">      <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> T <span class="title">RemoveLast</span>()</span></span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">return</span> Delete(count - <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>基础学习</category>
      </categories>
      <tags>
        <tag>数据结构与算法</tag>
        <tag>时间复杂度</tag>
      </tags>
  </entry>
  <entry>
    <title>csharp和js的对比(转载)</title>
    <url>/Blog/2022/10/22/csharp%E5%92%8Cjs%E7%9A%84%E5%AF%B9%E6%AF%94/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\Blog\assets\css\APlayer.min.css"><script src="\Blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\Blog\assets\js\Meting.min.js"></script><h2 id="js和C-相比。"><a href="#js和C-相比。" class="headerlink" title="js和C#相比。"></a>js和C#相比。</h2><p>最大不同，在于js是脚本语言，C#是编译性质的语言。</p>
<h2 id="作用域方面"><a href="#作用域方面" class="headerlink" title="作用域方面"></a>作用域方面</h2><p>js的作用域只有全局作用域和方法作用域，但是可以通过let关键字将作用域限制在块中<br>C#是存在块作用域的，在块中定义的变量，出了这个块就不能使用。</p>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>js和C#一样从抽象层面来说都具有值类型和对象类型<br>js的数字只有浮点型，导致计算数据不准确<br>C#同时具有float， double，int，long等类型<br>js的string类型是值类型，但是C#的string是比较特殊的对象类型(引用类型)<br>js的字符串可以用双引号或单引号，但是C#只可以用双引号<br>js和C#都含有数组对象，null关键字，但是js含有undefined类型，对于未初始化或未声明的变量，值或类型就是undefined</p>
<h2 id="const"><a href="#const" class="headerlink" title="const"></a>const</h2><p>js的const可以用来修饰对象，对象的属性值可以改变，但是变量所对应的对象不能更改为其它。<br>C#的const只能修饰值类型</p>
<h2 id="声明与初始化"><a href="#声明与初始化" class="headerlink" title="声明与初始化"></a>声明与初始化</h2><p>js可以先使用，然后声明，即声明提升<br>C#不声明就不能使用，而且不初始化会赋予默认值。<br>但是js不进行初始化就是undefined</p>
<h2 id="比较符方面"><a href="#比较符方面" class="headerlink" title="比较符方面"></a>比较符方面</h2><p>js多了两个特殊的比较符<code>===和!==</code>他们两个的特殊之处在于同时比较值和数据类型<br>C#和大多数语言一样是&#x3D;&#x3D;和!&#x3D; 所以这是我觉得比较扯的地方</p>
<h2 id="标记"><a href="#标记" class="headerlink" title="标记"></a>标记</h2><p>js可以定义代码label，然后用break和continue配合使用</p>
<h2 id="异步编程"><a href="#异步编程" class="headerlink" title="异步编程"></a>异步编程</h2><p>js的异步编程是单线程</p>
<p>C#是直接创建线程</p>
<p>如果是Unity中使用C#,则Unity提供的C#异步操作（StartCoroutine IEnumerator）则是单线层操作。</p>
<h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><p>js当中存在一个for…in 相当于C#的foreach</p>
<h2 id="定义对象不同"><a href="#定义对象不同" class="headerlink" title="定义对象不同"></a>定义对象不同</h2><p>js是通过大括号，并且将所有属性和方法全部写在里面。<br>C#则是新建类，然后new一个对象</p>
<h2 id="不同类型"><a href="#不同类型" class="headerlink" title="+不同类型"></a>+不同类型</h2><p>js的加号运算符会尽量对相加的两者进行类型转换，然后得出一个看似正确的结果。<br>C#则是直接报错。</p>
<h2 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h2><p>js函数定义没有返回值类型（脚本语言本身就是一种弱类型语言）<br>而且定义函数需要用function关键字，C#则并不需要。<br>js的函数可以自调用，即自己调用自己。但是C#不存在这个语法。<br>js和C#都支持匿名函数，也都支持闭包。<br>js和C#的函数本质都是对象。<br>js函数是一个对象，所以也有属于他的属性和方法call(),call方法的第一个参数是对象<br>其实js函数的本质就是C#中的委托<br>js函数中可以使用this，这个this指该函数所绑定的对象。如果函数是全局函数，那么就指代window对象</p>
<h2 id="this的使用"><a href="#this的使用" class="headerlink" title="this的使用"></a>this的使用</h2><p>在js中，不同的上下文里面this所指代的对象是不同的。<br>但是在C#中，this指的就是当前对象。</p>
<h2 id="库"><a href="#库" class="headerlink" title="库"></a>库</h2><p>js有自己的jquery库<br>C#也有自己对应的很多dll库可以使用</p>
<hr>
<p>版权声明：本文为CSDN博主「猫不在」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNTc0ODkwL2FydGljbGUvZGV0YWlscy8xMTY1NjM3NTU=">https://blog.csdn.net/qq_33574890/article/details/116563755<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Csharp</category>
      </categories>
      <tags>
        <tag>Csharp</tag>
      </tags>
  </entry>
  <entry>
    <title>实现线性表List之链表</title>
    <url>/Blog/2022/10/18/%E5%AE%9E%E7%8E%B0%E7%BA%BF%E6%80%A7%E8%A1%A8List%E4%B9%8B%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\Blog\assets\css\APlayer.min.css"><script src="\Blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\Blog\assets\js\Meting.min.js"></script><h2 id="什么是链表"><a href="#什么是链表" class="headerlink" title="什么是链表"></a>什么是链表</h2><p>链表由若干节点构成,节点之间有链接,链接末尾没有节点,指向空null.</p>
<p><img src="https://niaoyu.oss-cn-shenzhen.aliyuncs.com/img/image-20221025134229495.png" alt="image-20221025134229495"></p>
<p>链表的实现需要定义:</p>
<ul>
<li>泛型变量作为节点数据;</li>
<li>下一个节点的引用;</li>
<li>头节点。</li>
</ul>
<h2 id="代码实现单链表"><a href="#代码实现单链表" class="headerlink" title="代码实现单链表"></a>代码实现单链表</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">AlgorithmTest08_</span>链表</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 单链表</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T&quot;&gt;</span><span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line">    <span class="keyword">class</span> <span class="title">LinkedList1</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 节点类</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">class</span> <span class="title">Node</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">public</span> T t;<span class="comment">//类型</span></span><br><span class="line">            <span class="keyword">public</span> Node next;<span class="comment">//下一个</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">Node</span>(<span class="params">T t, Node next</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>.t = t;</span><br><span class="line">                <span class="keyword">this</span>.next = next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">Node</span>(<span class="params">T t</span>)</span></span><br><span class="line">            &#123;<span class="comment">//链表尾</span></span><br><span class="line">                <span class="keyword">this</span>.t = t;</span><br><span class="line">                <span class="keyword">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> t.ToString();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">private</span> Node head;<span class="comment">//链表头</span></span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">int</span> N;<span class="comment">//链表中存储了多少元素</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">LinkedList1</span>()</span></span><br><span class="line">        &#123;<span class="comment">//链表类构造函数初始化</span></span><br><span class="line">            head = <span class="literal">null</span>;</span><br><span class="line">            N = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 元素个数</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> Count</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> N;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 是否为空</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">bool</span> IsEmpty</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> N == <span class="number">0</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="链表添加数据-带头节点"><a href="#链表添加数据-带头节点" class="headerlink" title="链表添加数据(带头节点)"></a>链表添加数据(带头节点)</h3><p>若是在头节点添加,就是<strong>新节点的next指向头节点</strong>,然后<strong>新节点赋值给head</strong>，自己成为新的头节点。</p>
<p>若是正常添加新节点，就是index位-1进行循环遍历。移动定位节点到位置的前一个，然后<strong>定位节点的next指向新节点的next</strong>，<strong>新节点本身指向定位节点的next</strong>，成功插入。</p>
<p><strong>代码实现:</strong></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">     <span class="comment"><span class="doctag">///</span> 添加元素</span></span><br><span class="line">     <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Add</span>(<span class="params"><span class="built_in">int</span> index, T t</span>)</span></span><br><span class="line">     &#123;</span><br><span class="line">         <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; N)</span><br><span class="line">         &#123;</span><br><span class="line">             <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">&quot;非法索引&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span> (index == <span class="number">0</span>)</span><br><span class="line">         &#123;</span><br><span class="line">             <span class="comment">//Node node = new Node(t);</span></span><br><span class="line">             <span class="comment">//node.next = head;</span></span><br><span class="line">             <span class="comment">//head = node;</span></span><br><span class="line">             head = <span class="keyword">new</span> Node(t, head);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span></span><br><span class="line">         &#123;</span><br><span class="line">             Node pre = head;</span><br><span class="line">             <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; index - <span class="number">1</span>; i++)</span><br><span class="line">             &#123;</span><br><span class="line">                 pre = pre.next;</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="comment">//Node node = new Node(t);</span></span><br><span class="line">             <span class="comment">//node.next = pre.next;//新增节点的下一个节点,等于pre位置的下一个节点[相当于占了它位置]</span></span><br><span class="line">             <span class="comment">//pre.next = node;//pre的下一个节点为新增的节点,[相当于被挤到左侧]</span></span><br><span class="line">             pre.next = <span class="keyword">new</span> Node(t, pre.next);</span><br><span class="line">         &#125;</span><br><span class="line">         N++;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">     <span class="comment"><span class="doctag">///</span> 头部添加</span></span><br><span class="line">     <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">     <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;t&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddFirst</span>(<span class="params">T t</span>)</span></span><br><span class="line">     &#123;</span><br><span class="line">         Add(<span class="number">0</span>, t);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">     <span class="comment"><span class="doctag">///</span> 尾部添加</span></span><br><span class="line">     <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">     <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;t&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddLast</span>(<span class="params">T t</span>)</span></span><br><span class="line">     &#123;</span><br><span class="line">         Add(N, t);</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>

<h3 id="查询，获取链表中指定位置元素并返回"><a href="#查询，获取链表中指定位置元素并返回" class="headerlink" title="查询，获取链表中指定位置元素并返回"></a>查询，获取链表中指定位置元素并返回</h3><p>设定一个cur为当前节点，遍历到指定索引下，返回cur.t</p>
<p><strong>代码实现：</strong></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 查询,index:索引</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;index&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">Get</span>(<span class="params"><span class="built_in">int</span> index</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= N)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">&quot;非法索引&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Node cur = head;<span class="comment">//当前位置</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; index; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cur = cur.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cur.t;<span class="comment">//返回,值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 获取头节点内容</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">GetFirst</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> Get(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 获取尾节点内容</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">GetLast</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> Get(N - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 修改节点内容</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;index&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;newT&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Set</span>(<span class="params"><span class="built_in">int</span> index, T newT</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= N)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">&quot;非法索引&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Node cur = head;<span class="comment">//初始化当前节点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; index; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cur = cur.next;</span><br><span class="line">    &#125;</span><br><span class="line">    cur.t = newT;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 查找链表中是否有该元素</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;t&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">Contains</span>(<span class="params">T t</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Node cur = head;</span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (cur.t.Equals(t))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = cur.next;<span class="comment">//右移</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>重写ToString</strong></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    Node cur = head;</span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        res.Append(cur + <span class="string">&quot;-&gt;&quot;</span>);</span><br><span class="line">        cur = cur.next;</span><br><span class="line">    &#125;</span><br><span class="line">    res.Append(<span class="string">&quot;null&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> res.ToString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试:"></a>测试:</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        LinkedList1&lt;<span class="built_in">int</span>&gt; l = <span class="keyword">new</span> LinkedList1&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;初次打印&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            l.AddFirst(i);</span><br><span class="line">            Console.WriteLine(l);</span><br><span class="line">        &#125;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;末尾添加数字99:&quot;</span>);</span><br><span class="line">        l.AddLast(<span class="number">99</span>);</span><br><span class="line">        Console.WriteLine(l);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;索引2添加222&quot;</span>);</span><br><span class="line">        l.Add(<span class="number">2</span>, <span class="number">2222222</span>);</span><br><span class="line">        Console.WriteLine(l);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;查询索引2&quot;</span>);</span><br><span class="line">        Console.WriteLine(l.Get(<span class="number">2</span>));</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;修改索引2&quot;</span>);</span><br><span class="line">        l.Set(<span class="number">2</span>, <span class="number">20</span>);</span><br><span class="line">        Console.WriteLine(l.Get(<span class="number">2</span>));</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;查找链表中是否有值&quot;</span>);</span><br><span class="line">        Console.WriteLine(l.Contains(<span class="number">4</span>));</span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://niaoyu.oss-cn-shenzhen.aliyuncs.com/img/image-20221025134259502.png" alt="image-20221025134259502"></p>
<h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><p>头部:head.next指向下一个即可,其他部分:index前一个.next指向index.next</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 删除索引处节点</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;index&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">RemoveAt</span>(<span class="params"><span class="built_in">int</span> index</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= N)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">&quot;索引不合法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (index == <span class="number">0</span>)</span><br><span class="line">    &#123;<span class="comment">//删除头部</span></span><br><span class="line">        Node delNode = head;<span class="comment">//接收原head数据</span></span><br><span class="line">        head = head.next;</span><br><span class="line">        N--;</span><br><span class="line">        <span class="keyword">return</span> delNode.t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Node pre = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; index - <span class="number">1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            pre = pre.next;</span><br><span class="line">        &#125;</span><br><span class="line">        Node delNode = pre.next;</span><br><span class="line">        pre.next = delNode.next;</span><br><span class="line">        N--;</span><br><span class="line">        <span class="keyword">return</span> delNode.t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试结果:</strong></p>
<p><img src="https://niaoyu.oss-cn-shenzhen.aliyuncs.com/img/image-20221025134328965.png" alt="image-20221025134328965"></p>
]]></content>
      <categories>
        <category>基础学习</category>
      </categories>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>单例模式</title>
    <url>/Blog/2022/10/18/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\Blog\assets\css\APlayer.min.css"><script src="\Blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\Blog\assets\js\Meting.min.js"></script><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><strong>单例模式</strong>，是一种常用的软件设计模式。在它的核心结构中只包含一个被称为单例的特殊类。通过单例模式可以保证系统中，使用单例模式的类只有一个对象实例。</p>
<h2 id="单例的实现要点"><a href="#单例的实现要点" class="headerlink" title="单例的实现要点"></a>单例的实现要点</h2><p>单例模式要求类能够有返回对象一个引用（永远是同一个）和一个获得该实例的方法（必须是静态方法）。</p>
<h3 id="单例的实现主要是通过以下三个步骤："><a href="#单例的实现主要是通过以下三个步骤：" class="headerlink" title="单例的实现主要是通过以下三个步骤："></a>单例的实现主要是通过以下三个步骤：</h3><ul>
<li><strong>将类的构造方法定义为私有方法</strong>。这样其他类的代码就无法通过调用该类的构造方法来实例化该类的对象，只能通过该类提供的静态方法来得到该类的唯一实例。</li>
<li><strong>定义一个私有的类的静态实例。</strong></li>
<li><strong>提供一个公有的获取实例的静态方法。</strong></li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>单例模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Csharp拆装箱</title>
    <url>/Blog/2022/10/18/csharp%E6%8B%86%E8%A3%85%E7%AE%B1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\Blog\assets\css\APlayer.min.css"><script src="\Blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\Blog\assets\js\Meting.min.js"></script><h2 id="关于拆装箱"><a href="#关于拆装箱" class="headerlink" title="关于拆装箱"></a>关于拆装箱</h2><ul>
<li><strong>装箱</strong>:值类型数据转换为<strong>引用类型</strong>。<strong>装箱</strong>时，生成的是全新的引用对象，这会有时间损耗，因此装箱操作效率不高。</li>
<li><strong>拆箱</strong>:引用类型数据转换为<strong>值类型</strong>数据。</li>
<li>利用<strong>装箱</strong>和<strong>拆箱</strong>功能，可通过允许值类型的任何值与Object 类型的值相互转换，将值类型与引用类型链接起来。</li>
<li><strong>值类型</strong>只会在<strong>栈</strong>中分配;</li>
<li><strong>引用类型</strong>分配内存与托管<strong>堆</strong>;</li>
<li>使用泛型可以避免拆装箱操作。</li>
</ul>
<p><strong>代码演示：</strong></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">AlgorithmTest07_</span>拆装箱</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> n = <span class="number">100000000</span>;</span><br><span class="line">            Stopwatch t1 = <span class="keyword">new</span> Stopwatch();<span class="comment">//计时器</span></span><br><span class="line">            Stopwatch t2 = <span class="keyword">new</span> Stopwatch();<span class="comment">//计时器</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;测试值类型对象int&quot;</span>);</span><br><span class="line">            t1.Start();<span class="comment">//开始计时</span></span><br><span class="line">            List&lt;<span class="built_in">int</span>&gt; L = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                L.Add(i);<span class="comment">//不发生装箱</span></span><br><span class="line">                <span class="built_in">int</span> x = L[i];<span class="comment">//不发生拆箱</span></span><br><span class="line">            &#125;</span><br><span class="line">            t1.Stop();<span class="comment">//停止计时</span></span><br><span class="line">            Console.WriteLine(t1.ElapsedMilliseconds + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">            t2.Start();<span class="comment">//开始计时</span></span><br><span class="line">            ArrayList aL = <span class="keyword">new</span> ArrayList();</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                aL.Add(i);<span class="comment">//发生装箱[值类型(int)转引用类型(object),ArrayList是object引用类型]</span></span><br><span class="line">                <span class="built_in">int</span> x = (<span class="built_in">int</span>)aL[i];<span class="comment">//发生拆箱引用类型强转值类型</span></span><br><span class="line">            &#125;</span><br><span class="line">            t2.Stop();</span><br><span class="line">            Console.WriteLine(t2.ElapsedMilliseconds + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>将运行上Debug改为Release</p>
<p><strong>对比结果:</strong></p>
<p><img src="https://niaoyu.oss-cn-shenzhen.aliyuncs.com/img/image-20221025134405445.png" alt="image-20221025134405445"></p>
]]></content>
      <categories>
        <category>Csharp</category>
      </categories>
      <tags>
        <tag>Csharp</tag>
      </tags>
  </entry>
  <entry>
    <title>在hexo主页创建音乐播放器且不停播</title>
    <url>/Blog/2022/10/14/%E5%9C%A8hexo%E4%B8%BB%E9%A1%B5%E5%88%9B%E5%BB%BA%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\Blog\assets\css\APlayer.min.css"><script src="\Blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\Blog\assets\js\Meting.min.js"></script><h2 id="获取链接"><a href="#获取链接" class="headerlink" title="获取链接"></a>获取链接</h2><p>打开网易云音乐,找到专辑或者单曲,点击生成外链。</p>
<p><img src="https://niaoyu.oss-cn-shenzhen.aliyuncs.com/img/image-20221025134547027.png" alt="image-20221025134547027"></p>
<p>调完配置后复制html代码</p>
<p>到next皮肤文件夹下<code>layout\_macro</code>里打开文件<code>sidebar.njk</code></p>
<p>粘贴代码到这里</p>
<p><img src="https://niaoyu.oss-cn-shenzhen.aliyuncs.com/img/image-20221025134602580.png" alt="image-20221025134602580"></p>
<h2 id="切换页面不停播"><a href="#切换页面不停播" class="headerlink" title="切换页面不停播"></a>切换页面不停播</h2><p>在next<strong>主题文件夹</strong>下打开<code>_config.yml</code>把<strong>pjax</strong>打开</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pjax: true</span><br></pre></td></tr></table></figure>

<p>配置完成。</p>
<blockquote>
<p>但是这样会有个问题,就是官方的播放器没法调音量看歌词之类的</p>
<p>所以我又想到个比较偷懒的办法,就是永久置顶一篇文章,里面只放播放器,这样就和在主页放差不多的效果了</p>
<p>还有个最大的问题就是虽然音乐不会断,但是操作界面会消失,这就非常难受。</p>
<p>最终解决方法:将网页版写在右侧用户栏,开启固定模式,就会一直悬在底部了</p>
</blockquote>
<p>直接复制这段内容粘贴在图中位置</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- require MetingJS --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><img src="https://niaoyu.oss-cn-shenzhen.aliyuncs.com/img/image-20221025134618350.png" alt="image-20221025134618350"></p>
<p>然后再复制下面这段,记得id改成自己的,具体参数看MetingJS官方githup</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21ldG93b2xmL01ldGluZ0pT">https://github.com/metowolf/MetingJS<i class="fa fa-external-link-alt"></i></span></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;meting-js</span><br><span class="line">    server=<span class="string">&quot;netease&quot;</span></span><br><span class="line">    type=<span class="string">&quot;playlist&quot;</span> </span><br><span class="line">    id=<span class="string">&quot;979896497&quot;</span></span><br><span class="line">    fixed=<span class="string">&quot;true&quot;</span></span><br><span class="line">    list-folded=<span class="string">&quot;true&quot;</span></span><br><span class="line">    autoplay=<span class="string">&quot;false&quot;</span></span><br><span class="line">    volume=<span class="string">&quot;0.7&quot;</span></span><br><span class="line">    preload=<span class="string">&quot;auto&quot;</span></span><br><span class="line">    mutex=<span class="string">&quot;true&quot;</span>&gt;</span><br><span class="line">&lt;/meting-js&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="文章中添加音乐插件"><a href="#文章中添加音乐插件" class="headerlink" title="文章中添加音乐插件"></a>文章中添加音乐插件</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-tag-aplayer</span><br></pre></td></tr></table></figure>

<h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><ul>
<li>APlayer.js &gt; 1.8.0</li>
<li>Meting.js &gt; 1.1.1</li>
</ul>
<h3 id="MeingJS-支持-3-0-新功能"><a href="#MeingJS-支持-3-0-新功能" class="headerlink" title="MeingJS 支持 (3.0 新功能)"></a>MeingJS 支持 (3.0 新功能)</h3><p>在<code>_config.yml</code>中添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aplayer:</span><br><span class="line">  meting: true</span><br></pre></td></tr></table></figure>

<p>接着就可以通过 <code>&#123;% meting ...%&#125;</code> 在文章中使用 MetingJS 播放器了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 简单示例 (id, server, type)  --&gt;</span><br><span class="line">&#123;% meting &quot;60198&quot; &quot;netease&quot; &quot;playlist&quot; %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- 进阶示例 --&gt;</span><br><span class="line">&#123;% meting &quot;60198&quot; &quot;netease&quot; &quot;playlist&quot; &quot;autoplay&quot; &quot;mutex:false&quot; &quot;listmaxheight:340px&quot; &quot;preload:none&quot; &quot;theme:#ad7a86&quot;%&#125;</span><br></pre></td></tr></table></figure>
<p><strong>有关 
    <div id="aplayer-mAWDqupX" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="undefined" data-server="undefined" data-type="undefined" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"
    ></div> 的选项列表如下:</strong></p>
<table>
<thead>
<tr>
<th>选项</th>
<th>默认值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td><strong>必须值</strong></td>
<td>歌曲 id &#x2F; 播放列表 id &#x2F; 相册 id &#x2F; 搜索关键字</td>
</tr>
<tr>
<td>server</td>
<td><strong>必须值</strong></td>
<td>音乐平台: <code>netease</code>, <code>tencent</code>, <code>kugou</code>, <code>xiami</code>, <code>baidu</code></td>
</tr>
<tr>
<td>type</td>
<td><strong>必须值</strong></td>
<td><code>song</code>, <code>playlist</code>, <code>album</code>, <code>search</code>, <code>artist</code></td>
</tr>
<tr>
<td>fixed</td>
<td><code>false</code></td>
<td>开启固定模式</td>
</tr>
<tr>
<td>mini</td>
<td><code>false</code></td>
<td>开启迷你模式</td>
</tr>
<tr>
<td>loop</td>
<td><code>all</code></td>
<td>列表循环模式：<code>all</code>, <code>one</code>,<code>none</code></td>
</tr>
<tr>
<td>order</td>
<td><code>list</code></td>
<td>列表播放模式： <code>list</code>, <code>random</code></td>
</tr>
<tr>
<td>volume</td>
<td>0.7</td>
<td>播放器音量</td>
</tr>
<tr>
<td>lrctype</td>
<td>0</td>
<td>歌词格式类型</td>
</tr>
<tr>
<td>listfolded</td>
<td><code>false</code></td>
<td>指定音乐播放列表是否折叠</td>
</tr>
<tr>
<td>storagename</td>
<td><code>metingjs</code></td>
<td>LocalStorage 中存储播放器设定的键名</td>
</tr>
<tr>
<td>autoplay</td>
<td><code>true</code></td>
<td>自动播放，移动端浏览器暂时不支持此功能</td>
</tr>
<tr>
<td>mutex</td>
<td><code>true</code></td>
<td>该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停</td>
</tr>
<tr>
<td>listmaxheight</td>
<td><code>340px</code></td>
<td>播放列表的最大长度</td>
</tr>
<tr>
<td>preload</td>
<td><code>auto</code></td>
<td>音乐文件预载入模式，可选项： <code>none</code>, <code>metadata</code>, <code>auto</code></td>
</tr>
<tr>
<td>theme</td>
<td><code>#ad7a86</code></td>
<td>播放器风格色彩设置</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>next主题自定义</title>
    <url>/Blog/2022/10/13/next%E4%B8%BB%E9%A2%98%E8%87%AA%E5%AE%9A%E4%B9%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\Blog\assets\css\APlayer.min.css"><script src="\Blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\Blog\assets\js\Meting.min.js"></script><blockquote>
<p>之前我用的主题是icarus,研究了很久发现没法在主页固定音乐播放器，网上找了很多全是关于next的教程；</p>
<p>一气之下把主题换成了next，换过来之后我觉得配色之类的过于简约，有点不太喜欢；</p>
<p>于是打算先换换配色，搜了一圈发现那些diy主题的攻略全是旧版本的,和新版不同；</p>
<p>于是就有了这篇文章。</p>
<p>NexT version: 8.13.1</p>
</blockquote>
<h2 id="文件目录"><a href="#文件目录" class="headerlink" title="文件目录"></a>文件目录</h2><h3 id="颜色目录"><a href="#颜色目录" class="headerlink" title="颜色目录"></a>颜色目录</h3><p><code>source\css\_variables</code>目录<code>base.styl</code>文件</p>
<h3 id="主题样式"><a href="#主题样式" class="headerlink" title="主题样式"></a>主题样式</h3><p><code>\source\css\_variables</code>目录<code>Gemini.styl</code>文件(继承自Pisces)</p>
<p><code>\source\css\_variables</code>目录<code>Pisces.styl</code>文件</p>
<h2 id="改背景色"><a href="#改背景色" class="headerlink" title="改背景色"></a>改背景色</h2><p>我的博客主体会偏明亮一些，个人比较喜欢橙色黄色蓝色这类比较鲜艳的颜色，所以先改背景色。</p>
<p>找到主题目录下的<code>\source\css\_variables</code>文件<code>Gemini.styl</code>,这个文件里还有挺多主题相关可以配置。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">$<span class="selector-tag">body</span>-bg-<span class="attribute">color</span> = <span class="selector-id">#f6d365</span>;</span><br></pre></td></tr></table></figure>

<p>渐变色代码可以</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93ZWJncmFkaWVudHMuY29tLw==">https://webgradients.com<i class="fa fa-external-link-alt"></i></span></p>
<p>这个网站中复制,非常好用,不过最好在<code>\source\css\_common\scaffolding</code>目录下的<code>base.styl</code>中加上几行,固定下</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">//<span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(<span class="number">120deg</span>, <span class="number">#f6d365</span> <span class="number">0%</span>, <span class="number">#fda085</span> <span class="number">100%</span>);</span><br><span class="line"><span class="attribute">background-repeat</span>:  no-repeat;</span><br><span class="line"><span class="attribute">background-attachment</span>: fixed;</span><br><span class="line"><span class="attribute">background-size</span>:  cover;</span><br></pre></td></tr></table></figure>

<h2 id="添加视频循环播放作为背景"><a href="#添加视频循环播放作为背景" class="headerlink" title="添加视频循环播放作为背景"></a>添加视频循环播放作为背景</h2><p>来到目录<code>hexo-theme-next\layout</code>找到<code>_layout.njk</code></p>
<p>复制下面这段到body标签下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">&quot;bg&quot;</span> <span class="attr">autoplay</span>=<span class="string">&quot;autoplay&quot;</span>  <span class="attr">loop</span>=<span class="string">&quot;loop&quot;</span> <span class="attr">muted</span>=<span class="string">&quot;muted&quot;</span> <span class="attr">class</span>=<span class="string">&quot;poster__bg&quot;</span> <span class="attr">style</span>=<span class="string">&quot;opacity: 1;&quot;</span> <span class="attr">width:</span> <span class="attr">1617px</span>; <span class="attr">height:</span> <span class="attr">909.562px</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;https://ys.mihoyo.com/main/_nuxt/videos/3e78e80.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/mp4&quot;</span>&gt;</span></span><br><span class="line">        您的浏览器不支持播放此视频.</span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>接着到该目录<code>hexo-theme-next\source\css\_common\scaffolding</code>打开<code>base.styl</code></p>
<p>搜索<code>iframe, img,</code>,删除其中的video标签,会影响布局。删除后长这样：</p>
<p><img src="https://niaoyu.oss-cn-shenzhen.aliyuncs.com/img/image-20221025150021652.png" alt="image-20221025150021652"></p>
<p>添加字段(top数值根据网站上面空位灵活调整):</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.poster__bg</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">z-index</span> :-<span class="number">999</span>;</span><br><span class="line">    <span class="attribute">top</span>:-<span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其他部分，比如文章透明度，文字颜色之类的，自己f12一个个找去吧~细节太多我说不过来。</p>
<h2 id="文章边框"><a href="#文章边框" class="headerlink" title="文章边框"></a>文章边框</h2><p>同样在主题目录下的<code>\source\css\_variables</code>文件<code>Gemini.styl</code>中</p>
<h3 id="区块四角改成圆角"><a href="#区块四角改成圆角" class="headerlink" title="区块四角改成圆角"></a>区块四角改成圆角</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">$<span class="attribute">border-radius</span>-inner     = <span class="number">10px</span>;</span><br><span class="line">$<span class="attribute">border-radius</span>           = <span class="number">10px</span>;</span><br></pre></td></tr></table></figure>

<h3 id="给文章加边框"><a href="#给文章加边框" class="headerlink" title="给文章加边框"></a>给文章加边框</h3><h4 id="第一步先定义参数"><a href="#第一步先定义参数" class="headerlink" title="第一步先定义参数"></a>第一步先定义参数</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">$<span class="attribute">border</span>-solid            = solid <span class="number">1px</span> cornflowerblue;</span><br><span class="line">$<span class="attribute">border</span>-solid-inner      = solid <span class="number">1px</span> cornflowerblue;</span><br></pre></td></tr></table></figure>

<h4 id="第二步应用参数"><a href="#第二步应用参数" class="headerlink" title="第二步应用参数"></a>第二步应用参数</h4><p>找到皮肤文件目录<code>\source\css\_schemes\Gemini</code>下的文件<code>index.styl</code>,找到对应类复制下面内容粘贴:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.main-inner</span> &gt; &#123;</span><br><span class="line">  <span class="selector-class">.sub-menu</span>, <span class="selector-class">.post-block</span>, <span class="selector-class">.tabs-comment</span>, <span class="selector-class">.comments</span>, <span class="selector-class">.pagination</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">var</span>(--content-bg-color);</span><br><span class="line">    <span class="attribute">border-radius</span>: $border-radius-inner;</span><br><span class="line">    <span class="attribute">border</span>: $border-solid-inner;</span><br><span class="line">    <span class="attribute">box-shadow</span>: $box-shadow-inner;</span><br><span class="line"></span><br><span class="line">    &amp;<span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:first</span>-child)<span class="selector-pseudo">:not</span>(<span class="selector-class">.sub-menu</span>) &#123;</span><br><span class="line">      <span class="attribute">border-radius</span>: $border-radius;</span><br><span class="line">      <span class="attribute">border</span>: $border-solid;</span><br><span class="line">      <span class="attribute">box-shadow</span>: $box-shadow;</span><br><span class="line">      <span class="attribute">margin-top</span>: $sidebar-offset;</span><br><span class="line"></span><br><span class="line">      +tablet() &#123;</span><br><span class="line">        <span class="attribute">margin-top</span>: $content-tablet-padding;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      +mobile() &#123;</span><br><span class="line">        <span class="attribute">margin-top</span>: $content-mobile-padding;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>找到目录<code>source\css\_schemes\Pisces</code>,打开<code>_layout.styl</code>,找到对应类复制下面内容粘贴:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.header-inner</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">var</span>(--content-bg-color);</span><br><span class="line">  <span class="attribute">border-radius</span>: $border-radius-inner;</span><br><span class="line">  <span class="attribute">border</span>:$border-solid-inner;</span><br><span class="line">  <span class="attribute">box-shadow</span>: $box-shadow-inner;</span><br><span class="line">  <span class="attribute">width</span>: $sidebar-desktop;</span><br><span class="line"></span><br><span class="line">  +tablet-mobile() &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: initial;</span><br><span class="line">    <span class="attribute">width</span>: auto;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接着打开同目录下<code>_siderbar.styl</code>文件,找到对应类复制内容粘贴:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.sidebar-inner</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">var</span>(--content-bg-color);</span><br><span class="line">  <span class="attribute">border-radius</span>: $border-radius;</span><br><span class="line">  <span class="attribute">border</span>:$border-solid;</span><br><span class="line">  <span class="attribute">box-shadow</span>: $box-shadow;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--text-color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<hr>
<h2 id="改文章透明度"><a href="#改文章透明度" class="headerlink" title="改文章透明度"></a>改文章透明度</h2><p>找到主题目录下的<code>\source\css\_variables</code>文件<code>base.styl</code></p>
<p>ctrl+f搜索<code>content-bg-color</code>,改成下面这样,当然不改透明度也挺好.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$content-bg-color             = #ffffffc9;</span><br></pre></td></tr></table></figure>

<p><img src="https://niaoyu.oss-cn-shenzhen.aliyuncs.com/img/image-20221025134119223.png" alt="image-20221025134119223"></p>
<h2 id="改博客标题背景颜色"><a href="#改博客标题背景颜色" class="headerlink" title="改博客标题背景颜色"></a>改博客标题背景颜色</h2><p>左上角那一坨黑色看着实在难受,我直接把他变白色透明度0,舒服多了。记得字体也要改下颜色</p>
<h3 id="改颜色"><a href="#改颜色" class="headerlink" title="改颜色"></a>改颜色</h3><p>找到主题文件夹下面的<code>_config.yml</code>文件,搜索<code>theme_color</code>,直接改颜色为<code>#ffffff00</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">theme_color:</span><br><span class="line">  light: &quot;#ffffff00&quot;</span><br><span class="line">  dark: &quot;#ffffff00&quot;</span><br></pre></td></tr></table></figure>

<h3 id="改标题字体颜色和粗细"><a href="#改标题字体颜色和粗细" class="headerlink" title="改标题字体颜色和粗细"></a>改标题字体颜色和粗细</h3><p>找到<code>\source\css\_common\outline\header</code>的文件<code>site-meta.styl</code>,进去搜site-title</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.site-title &#123;</span><br><span class="line">  font-family: $font-family-logo;</span><br><span class="line">  font-size: $font-size-title;</span><br><span class="line">  font-weight: bold;</span><br><span class="line">  line-height: 1.5;</span><br><span class="line">  color: black;</span><br><span class="line">  margin: 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我改了颜色顺便加粗了</p>
<h3 id="改文章标题为粗体"><a href="#改文章标题为粗体" class="headerlink" title="改文章标题为粗体"></a>改文章标题为粗体</h3><p>找到<code>\source\css\_common\components\post</code>的文件<code>post-header.styl</code></p>
<p>搜索<code>post-title</code>修改里面的值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">font-weight: bold;</span><br></pre></td></tr></table></figure>

<h2 id="为顶端留空"><a href="#为顶端留空" class="headerlink" title="为顶端留空"></a>为顶端留空</h2><p>顶格看着不难受嘛?反正我是受不了</p>
<p>还是在主题目录下的<code>\source\css\_variables</code>文件<code>base.styl</code></p>
<p>搜<code>headband</code>,改透明 增大间距,依个人口味可以调大点像素.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$headband-height                = 30px;</span><br><span class="line">$headband-bg                    = #ffffff00//var(--theme-color);</span><br></pre></td></tr></table></figure>

<h2 id="改”回顶部”小按钮的样式"><a href="#改”回顶部”小按钮的样式" class="headerlink" title="改”回顶部”小按钮的样式"></a>改”回顶部”小按钮的样式</h2><p>找到主题目录下的<code>\source\css\_variables</code>文件<code>base.styl</code></p>
<p>搜索<code>b2</code>我只改了最后一个,背景色:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$b2t-bg-color                 = black//$black-deep;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>实现线性表List之顺序表</title>
    <url>/Blog/2022/10/10/%E5%AE%9E%E7%8E%B0%E7%BA%BF%E6%80%A7%E8%A1%A8List%E4%B9%8B%E9%A1%BA%E5%BA%8F%E8%A1%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\Blog\assets\css\APlayer.min.css"><script src="\Blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\Blog\assets\js\Meting.min.js"></script><h2 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h2><p><img src="https://niaoyu.oss-cn-shenzhen.aliyuncs.com/img/image-20221025134433697.png" alt="image-20221025134433697"></p>
<h3 id="定义接口"><a href="#定义接口" class="headerlink" title="定义接口"></a>定义接口</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">AlgorithmTest06_List</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title">IListDS</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="built_in">int</span> <span class="title">GetLength</span>()</span>;<span class="comment">//求长度</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Chear</span>()</span>;<span class="comment">//清空</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="built_in">bool</span> <span class="title">IsEmpty</span>()</span>;<span class="comment">//判断线性表是否为空</span></span><br><span class="line"></span><br><span class="line">        <span class="function">T <span class="title">Add</span>(<span class="params">T item</span>)</span>;<span class="comment">//添加</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Insert</span>(<span class="params"><span class="built_in">int</span> index, T item</span>)</span>;<span class="comment">//插入</span></span><br><span class="line"></span><br><span class="line">        <span class="function">T <span class="title">Delete</span>(<span class="params"><span class="built_in">int</span> i</span>)</span>;<span class="comment">//删除</span></span><br><span class="line"></span><br><span class="line">        T <span class="keyword">this</span>[<span class="built_in">int</span> i] &#123; <span class="keyword">get</span>; &#125;<span class="comment">//定义索引器 获取元素</span></span><br><span class="line"></span><br><span class="line">        <span class="function">T <span class="title">GetElem</span>(<span class="params"><span class="built_in">int</span> i</span>)</span>;<span class="comment">//取表元</span></span><br><span class="line"></span><br><span class="line">        <span class="function">T <span class="title">Set</span>(<span class="params"><span class="built_in">int</span> i, T item</span>)</span>;<span class="comment">//修改</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="built_in">int</span> <span class="title">IndexOf</span>(<span class="params">T <span class="keyword">value</span></span>)</span>;<span class="comment">//按值查找</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Remove</span>(<span class="params">T <span class="keyword">value</span></span>)</span>;<span class="comment">//根据值删除</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="实现接口"><a href="#实现接口" class="headerlink" title="实现接口"></a>实现接口</h4><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 实现顺序表</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T&quot;&gt;</span><span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title">SeqList</span>&lt;<span class="title">T</span>&gt; : <span class="title">IListDS</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//新建类,继承IListDs&lt;T&gt;并且实现接口</span></span><br><span class="line">    <span class="keyword">private</span> T[] data;<span class="comment">//存储数据的数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> size:设定成员个数,默认构造函数容量为10</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;size&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SeqList</span>(<span class="params"><span class="built_in">int</span> size</span>)</span></span><br><span class="line">    &#123;<span class="comment">//size是最大容量</span></span><br><span class="line">        data = <span class="keyword">new</span> T[size];</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SeqList</span>() : <span class="title">this</span>(<span class="params"><span class="number">10</span></span>)</span> &#123; &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> index的位置插入item值</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;index&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;item&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Insert</span>(<span class="params"><span class="built_in">int</span> index, T item</span>)</span></span><br><span class="line">    &#123;<span class="comment">//插入</span></span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; count)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">&quot;数组索引越界&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (count == data.Length)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//throw new ArgumentException(&quot;数组已满&quot;);</span></span><br><span class="line">            ResetCapacity(<span class="number">2</span> * data.Length);<span class="comment">//数组扩容加原来两倍</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = count - <span class="number">1</span>; i &gt;= index; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            data[i + <span class="number">1</span>] = data[i];</span><br><span class="line">        &#125;</span><br><span class="line">        data[index] = item;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 末尾添加</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;item&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">Add</span>(<span class="params">T item</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Insert(count, item);</span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 删除index位置的值</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;index&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">Delete</span>(<span class="params"><span class="built_in">int</span> index</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (count == data.Length / <span class="number">4</span>)<span class="comment">//不足四分之一时,空间减少</span></span><br><span class="line">        &#123;</span><br><span class="line">            ResetCapacity(data.Length / <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= count)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">&quot;索引超出数组界限&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        T temp = data[index];</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = index + <span class="number">1</span>; i &lt; count; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            data[i - <span class="number">1</span>] = data[i];<span class="comment">//左移</span></span><br><span class="line">        &#125;</span><br><span class="line">        count--;</span><br><span class="line">        data[count] = <span class="literal">default</span>(T);</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Chear</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 通过i查找对应内容</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;i&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">GetElem</span>(<span class="params"><span class="built_in">int</span> i</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= <span class="number">0</span> &amp;&amp; i &lt; count)<span class="comment">//索引存在</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> data[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">default</span>(T);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">&quot;索引不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> T <span class="keyword">this</span>[<span class="built_in">int</span> i]</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> GetElem(i); &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 索引i,替换内容为item</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;i&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;item&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">Set</span>(<span class="params"><span class="built_in">int</span> i, T item</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= <span class="number">0</span> &amp;&amp; i &lt; count)<span class="comment">//索引存在</span></span><br><span class="line">            <span class="keyword">return</span> data[i] = item;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">&quot;索引越界&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 获取数组长度</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">GetCount</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> count;<span class="comment">//非空数量</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">GetLength</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> data.Length;<span class="comment">//总元素</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 是否为空</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">IsEmpty</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> count == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 根据值找索引</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;value&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">IndexOf</span>(<span class="params">T <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; count; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (data[i].Equals(<span class="keyword">value</span>))<span class="comment">//不能用==,因为都是值类型,不合法</span></span><br><span class="line">            &#123;<span class="comment">//确定指定的对象是否等于当前对象。</span></span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//值不存在</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 根据值删除对象</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;value&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Remove</span>(<span class="params">T <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> index = IndexOf(<span class="keyword">value</span>);</span><br><span class="line">        <span class="keyword">if</span> (index != <span class="number">-1</span>)<span class="comment">//不能是搜寻不到的数</span></span><br><span class="line">        &#123;</span><br><span class="line">            Delete(index);<span class="comment">//删除</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 打印</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; count - <span class="number">1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            res.Append(data[i]);</span><br><span class="line">            <span class="comment">// if (i != count - 1)</span></span><br><span class="line">            <span class="comment">//如果不是最后一个元素</span></span><br><span class="line">            <span class="comment">//&#123;</span></span><br><span class="line">            res.Append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="comment">//&#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">        res.Append(data[count - <span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span> res.ToString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 扩容数组,私有</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;newCapacity&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ResetCapacity</span>(<span class="params"><span class="built_in">int</span> newCapacity</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        T[] newData = <span class="keyword">new</span> T[newCapacity];<span class="comment">//newCapacity:扩容多少</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; count; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            newData[i] = data[i];<span class="comment">//赋值</span></span><br><span class="line">        &#125;</span><br><span class="line">        data = newData;<span class="comment">//再赋值,为了让他外部可用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">            <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] argss</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="meta">#<span class="keyword">region</span> 添加和删除</span></span><br><span class="line">        <span class="comment">//使用自己封装的顺序表</span></span><br><span class="line">        SeqList&lt;<span class="built_in">int</span>&gt; seqlist = <span class="keyword">new</span> SeqList&lt;<span class="built_in">int</span>&gt;(<span class="number">20</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;元素个数:&quot;</span> + seqlist.GetCount());</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            seqlist.Add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;已添加元素个数:&quot;</span> + seqlist.GetCount());</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;索引3添加数字100&quot;</span>);</span><br><span class="line">        seqlist.Insert(<span class="number">3</span>, <span class="number">100</span>);<span class="comment">//索引3添加数字100</span></span><br><span class="line">        <span class="comment">//for (int i = 0; i &lt; seqlist.GetLength(); i++)</span></span><br><span class="line">        <span class="comment">//&#123;</span></span><br><span class="line">        <span class="comment">//    Console.Write(seqlist.GetElem(i) + &quot;;&quot;);</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">        Console.WriteLine(seqlist);</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;个数:&quot;</span> + seqlist.GetCount());</span><br><span class="line"></span><br><span class="line">        seqlist.Chear();</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;清空后个数:&quot;</span> + seqlist.GetCount());</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;是否为空&quot;</span> + seqlist.IsEmpty());</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">4</span>; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            seqlist.Add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//for (int i = 0; i &lt; seqlist.GetLength(); i++)</span></span><br><span class="line">        <span class="comment">//&#123;</span></span><br><span class="line">        <span class="comment">//    Console.Write(seqlist[i] + &quot;;&quot;);</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;重新添加4~1&quot;</span>);</span><br><span class="line">        Console.WriteLine(seqlist);</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;\n----------------&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;删除:&quot;</span> + seqlist.Delete(<span class="number">2</span>));</span><br><span class="line">        <span class="comment">//for (int i = 0; i &lt; seqlist.GetLength(); i++)</span></span><br><span class="line">        <span class="comment">//&#123;</span></span><br><span class="line">        <span class="comment">//    Console.Write(seqlist[i] + &quot;;&quot;);</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;打印&quot;</span> + seqlist);</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;\n----------------&quot;</span>);</span><br><span class="line">        <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="keyword">region</span> 查找</span></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;输入值找索引(-1为找不到):&quot;</span>);</span><br><span class="line">        <span class="built_in">int</span> <span class="keyword">value</span> = <span class="built_in">int</span>.Parse(Console.ReadLine());</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;索引:&quot;</span> + seqlist.IndexOf(<span class="keyword">value</span>));</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;当前值:&quot;</span> + seqlist);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;找到后删除对象&quot;</span>);</span><br><span class="line">        seqlist.Remove(<span class="keyword">value</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;当前值:&quot;</span> + seqlist);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;索引0替换为100&quot;</span>);</span><br><span class="line">        seqlist.Set(<span class="number">0</span>, <span class="number">100</span>);</span><br><span class="line">        Console.WriteLine(seqlist);</span><br><span class="line">        <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="keyword">region</span> 扩容数组(动态数组)</span></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;扩容数组&quot;</span>);</span><br><span class="line">        SeqList&lt;<span class="built_in">int</span>&gt; seq = <span class="keyword">new</span> SeqList&lt;<span class="built_in">int</span>&gt;(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            seq.Add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;数组元素展示:&quot;</span> + seq);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;容量:&quot;</span> + seq.GetLength());</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;数组元素数量:&quot;</span> + seq.GetCount());</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;添加元素:&quot;</span> + seq.Add(<span class="number">1000</span>));</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;数组元素展示:&quot;</span> + seq);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;容量&quot;</span> + seq.GetLength());</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;数组元素数量:&quot;</span> + seq.GetCount());</span><br><span class="line">        <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="重写ToString-添加打印功能"><a href="#重写ToString-添加打印功能" class="headerlink" title="重写ToString,添加打印功能"></a>重写ToString,添加打印功能</h4><p><code>class SeqList&lt;T&gt; : IListDS&lt;T&gt;</code></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span></span><br><span class="line">       &#123;</span><br><span class="line">           StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">           <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; count; i++)</span><br><span class="line">           &#123;</span><br><span class="line">               res.Append(data[i]);</span><br><span class="line">               <span class="keyword">if</span> (i != count - <span class="number">1</span>)</span><br><span class="line">               <span class="comment">//如果不是最后一个元素</span></span><br><span class="line">               &#123;</span><br><span class="line">                   res.Append(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> res.ToString();</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>

<p><strong>修改一下,去掉了if,将最后一个元素单独打印</strong></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; count - <span class="number">1</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                res.Append(data[i]);</span><br><span class="line">                <span class="comment">// if (i != count - 1)</span></span><br><span class="line">                <span class="comment">//如果不是最后一个元素</span></span><br><span class="line">                <span class="comment">//&#123;</span></span><br><span class="line">                res.Append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                <span class="comment">//&#125;</span></span><br><span class="line">            &#125;</span><br><span class="line">            res.Append(data[count - <span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">return</span> res.ToString();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p><strong>Main方法中直接打印seqlist</strong></p>
<p><strong>结果如下:</strong></p>
<p><img src="https://niaoyu.oss-cn-shenzhen.aliyuncs.com/img/image-20221025134457467.png" alt="image-20221025134457467"></p>
<hr>
]]></content>
      <categories>
        <category>基础学习</category>
      </categories>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo新建文章模板</title>
    <url>/Blog/2022/10/10/Hexo%E6%96%B0%E5%BB%BA%E6%96%87%E7%AB%A0%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\Blog\assets\css\APlayer.min.css"><script src="\Blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\Blog\assets\js\Meting.min.js"></script><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p><strong>hexo新建文章时,头部默认是只有title和date,每次要添加类别都要重新写。</strong></p>
<h3 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h3><p><strong>根目录下找到scaffolds文件夹下的post.md就可以编辑模板了</strong></p>
<p><img src="https://niaoyu.oss-cn-shenzhen.aliyuncs.com/img/image-20221025134908930.png" alt="image-20221025134908930"></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo首页显示摘要</title>
    <url>/Blog/2022/10/10/Hexo%E9%A6%96%E9%A1%B5%E6%98%BE%E7%A4%BA%E6%91%98%E8%A6%81/</url>
    <content><![CDATA[<h3 id="解决Hexo博客没有auto-excerpt的问题"><a href="#解决Hexo博客没有auto-excerpt的问题" class="headerlink" title="解决Hexo博客没有auto_excerpt的问题"></a>解决Hexo博客没有auto_excerpt的问题</h3><h2 id="1：使用npm安装hexo-excerpt"><a href="#1：使用npm安装hexo-excerpt" class="headerlink" title="1：使用npm安装hexo-excerpt"></a>1：使用npm安装hexo-excerpt</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-excerpt --save</span><br></pre></td></tr></table></figure>

<h2 id="2：在站点配置文件中添加"><a href="#2：在站点配置文件中添加" class="headerlink" title="2：在站点配置文件中添加"></a>2：在站点配置文件中添加</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">excerpt:</span><br><span class="line">  depth: 5  </span><br><span class="line">  excerpt_excludes: []</span><br><span class="line">  more_excludes: []</span><br><span class="line">  hideWholePostExcerpts: true</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo置顶功能</title>
    <url>/Blog/2022/10/09/Hexo%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="置顶功能"><a href="#置顶功能" class="headerlink" title="置顶功能"></a>置顶功能</h2><p>1.替换首页生成器，在博客根目录中使用以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># your_blog</span><br><span class="line">npm uninstall hexo-generator-index --save # 卸载原来的首页生成器</span><br><span class="line">npm install hexo-generator-index-pin-top --save # 安装有置顶功能的首页生成器</span><br></pre></td></tr></table></figure>

<p>2.在博客根目录 your_blog&#x2F;_config.yml 的配置文件中设置文章排序方式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">index_generator:</span><br><span class="line">  path: &#x27;&#x27;</span><br><span class="line">  per_page: 10</span><br><span class="line">  order_by:</span><br><span class="line">    -top</span><br><span class="line">    -date</span><br></pre></td></tr></table></figure>

<p>3.对于想要置顶的文章，在 Markdown 文件开头设置 <code>top: true</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: article&#x27;s tile</span><br><span class="line">top: true</span><br><span class="line">---</span><br><span class="line">markdown content</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构-栈</title>
    <url>/Blog/2022/10/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%88/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\Blog\assets\css\APlayer.min.css"><script src="\Blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\Blog\assets\js\Meting.min.js"></script><h1 id="栈-Stack"><a href="#栈-Stack" class="headerlink" title="栈(Stack)"></a>栈(Stack)</h1><h2 id="栈的方法"><a href="#栈的方法" class="headerlink" title="栈的方法"></a>栈的方法</h2><p><strong>栈中元素是从上到下加入的，即“后进先出”</strong></p>
<blockquote>
<p>Clear:从Stack中移除所有的元素。</p>
<p>Pop:弹出栈顶元素并删除</p>
<p>push:压入栈顶元素</p>
<p>peek:弹出栈顶元素不删除</p>
<p>ToArray:方法创建数组并将堆栈元素复制到其中</p>
<p>Contains:方法判断一个元素是否在栈中</p>
</blockquote>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">AlgorithmTest05_Stack</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Stack&lt;<span class="built_in">string</span>&gt; staA = <span class="keyword">new</span> Stack&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">            staA.Push(<span class="string">&quot;one&quot;</span>);</span><br><span class="line">            staA.Push(<span class="string">&quot;two&quot;</span>);</span><br><span class="line">            staA.Push(<span class="string">&quot;three&quot;</span>);</span><br><span class="line">            staA.Push(<span class="string">&quot;four&quot;</span>);</span><br><span class="line">            staA.Push(<span class="string">&quot;five&quot;</span>);</span><br><span class="line">            <span class="comment">//ToArray从栈底到栈顶将一个栈复制到另一个栈中</span></span><br><span class="line">            Stack&lt;<span class="built_in">string</span>&gt; staB = <span class="keyword">new</span> Stack&lt;<span class="built_in">string</span>&gt;(staA.ToArray());</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> staA)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.ForegroundColor = ConsoleColor.Green;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;A栈,&quot;</span> + item);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> staB)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.ForegroundColor = ConsoleColor.DarkYellow;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;B栈,&quot;</span> + item);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.ForegroundColor = ConsoleColor.White;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;staA栈顶:&#123;0&#125;&quot;</span>, staA.Peek());</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;staA删除栈顶:&#123;0&#125;&quot;</span>, staA.Pop());</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;staA栈顶:&#123;0&#125;&quot;</span>, staA.Peek());</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;----------------------&quot;</span>);</span><br><span class="line">            Console.ForegroundColor = ConsoleColor.DarkRed;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;five是否在栈中?&quot;</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;staA,&quot;</span> + staA.Contains(<span class="string">&quot;five&quot;</span>));</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;staB,&quot;</span> + staB.Contains(<span class="string">&quot;five&quot;</span>));</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>打印结果:</strong></p>
<p><img src="https://niaoyu.oss-cn-shenzhen.aliyuncs.com/img/image-20221025134929962.png" alt="image-20221025134929962"></p>
<h2 id="栈的应用"><a href="#栈的应用" class="headerlink" title="栈的应用"></a>栈的应用</h2><p><strong>十进制转二进制</strong></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Console.WriteLine(<span class="string">&quot;请输入一个十进制数字&quot;</span>);</span><br><span class="line">        <span class="built_in">int</span> num = <span class="built_in">int</span>.Parse(Console.ReadLine());</span><br><span class="line">        Stack&lt;<span class="built_in">int</span>&gt; Remainder = <span class="keyword">new</span> Stack&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">        <span class="keyword">while</span> (num != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Remainder.Push(num % <span class="number">2</span>);</span><br><span class="line">            num /= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> Remainder)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.ForegroundColor = ConsoleColor.DarkBlue;</span><br><span class="line">            Console.Write(item);</span><br><span class="line">        &#125;</span><br><span class="line">        Console.ReadKey();</span><br></pre></td></tr></table></figure>

<p><strong>打印结果:</strong></p>
<p><img src="https://niaoyu.oss-cn-shenzhen.aliyuncs.com/img/image-20221025134945970.png" alt="image-20221025134945970"></p>
]]></content>
      <categories>
        <category>基础学习</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>数据结构与算法</tag>
        <tag>栈</tag>
      </tags>
  </entry>
  <entry>
    <title>算法学习-枚举和递归</title>
    <url>/Blog/2022/10/05/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-%E6%9E%9A%E4%B8%BE%E5%92%8C%E9%80%92%E5%BD%92/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\Blog\assets\css\APlayer.min.css"><script src="\Blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\Blog\assets\js\Meting.min.js"></script><h2 id="枚举算法"><a href="#枚举算法" class="headerlink" title="枚举算法"></a>枚举算法</h2><p><img src="https://niaoyu.oss-cn-shenzhen.aliyuncs.com/img/image-20221025135058941.png" alt="image-20221025135058941"></p>
<p><strong>打印结果:</strong></p>
<p><img src="https://niaoyu.oss-cn-shenzhen.aliyuncs.com/img/image-20221025135114001.png" alt="image-20221025135114001"></p>
<h2 id="递归算法"><a href="#递归算法" class="headerlink" title="递归算法"></a>递归算法</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">&#123; <span class="comment">//递归</span></span><br><span class="line">    Console.WriteLine(<span class="string">&quot;请输入阶乘数(小于17):&quot;</span>);</span><br><span class="line">    <span class="built_in">int</span> i = <span class="built_in">int</span>.Parse(Console.ReadLine());</span><br><span class="line">    Console.WriteLine(Mul(i));</span><br><span class="line">    Console.ReadKey();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">Mul</span>(<span class="params"><span class="built_in">int</span> i</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &lt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Mul(i - <span class="number">1</span>) * i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">   </span><br></pre></td></tr></table></figure>

<p><strong>打印结果:</strong></p>
<p><img src="https://niaoyu.oss-cn-shenzhen.aliyuncs.com/img/image-20221025135125879.png" alt="image-20221025135125879"></p>
]]></content>
      <categories>
        <category>基础学习</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>算法学习-递推逆推</title>
    <url>/Blog/2022/10/04/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-%E9%80%92%E6%8E%A8%E9%80%86%E6%8E%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\Blog\assets\css\APlayer.min.css"><script src="\Blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\Blog\assets\js\Meting.min.js"></script><h2 id="递推算法"><a href="#递推算法" class="headerlink" title="递推算法"></a>递推算法</h2><p><strong>有一只大兔子，一个月生一只小兔子，过一个月小兔子变大兔子。以此求第几个月，有几个大兔子。</strong></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">AlgorithmTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//费波拉契数列，一个数等于前两个数之和。</span></span><br><span class="line">            <span class="comment">//根据输入数，展示到这个数之前的所有数。</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;请输入一个0~21之间的数&quot;</span>);</span><br><span class="line">            <span class="built_in">int</span> i = <span class="built_in">int</span>.Parse(Console.ReadLine());</span><br><span class="line">            <span class="built_in">int</span>[] array = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">20</span>];<span class="comment">//定义有20个空的数组</span></span><br><span class="line">            array[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            array[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(array[<span class="number">0</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(array[<span class="number">0</span>]);</span><br><span class="line">                Console.WriteLine(array[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (i &gt;= <span class="number">3</span> &amp;&amp; i &lt; <span class="number">21</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(array[<span class="number">0</span>]);</span><br><span class="line">                Console.WriteLine(array[<span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">3</span>; j &lt;= i; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    array[j - <span class="number">1</span>] = array[j - <span class="number">2</span>] + array[j - <span class="number">3</span>];</span><br><span class="line">                    Console.WriteLine(array[j - <span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;数字超过范围&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>打印结果：</strong></p>
<p><img src="https://niaoyu.oss-cn-shenzhen.aliyuncs.com/img/image-20221025135145464.png" alt="image-20221025135145464"></p>
<h3 id="逆推"><a href="#逆推" class="headerlink" title="逆推"></a>逆推</h3><h4 id="求存款"><a href="#求存款" class="headerlink" title="求存款"></a>求存款</h4><p>四年时间，每个月取出1000元(利率按0.0171)，至少需要存多少钱才行?</p>
<p><img src="https://niaoyu.oss-cn-shenzhen.aliyuncs.com/img/image-20221025135158752.png" alt="image-20221025135158752"></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">AlgorithmTest02</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//逆推</span></span><br><span class="line">            <span class="built_in">float</span> Fetch = <span class="number">1000f</span>;<span class="comment">//每月取一千</span></span><br><span class="line">            <span class="built_in">float</span> rate = <span class="number">0.0171f</span>;<span class="comment">//利率</span></span><br><span class="line">            <span class="built_in">double</span>[] corpis = <span class="keyword">new</span> <span class="built_in">double</span>[<span class="number">49</span>];<span class="comment">//本金</span></span><br><span class="line">            corpis[<span class="number">48</span>] = Fetch;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;第48月末本利合计:&quot;</span> + corpis[<span class="number">48</span>]);</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">47</span>; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">            &#123;</span><br><span class="line">                corpis[i] = (corpis[i + <span class="number">1</span>] + Fetch) / (<span class="number">1</span> + rate / <span class="number">12</span>);</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;第&quot;</span> + i + <span class="string">&quot;月末本利合计:&quot;</span> + corpis[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>打印结果：</p>
<p><img src="https://niaoyu.oss-cn-shenzhen.aliyuncs.com/img/image-20221025135221915.png" alt="image-20221025135221915"></p>
<h4 id="猴子摘桃"><a href="#猴子摘桃" class="headerlink" title="猴子摘桃"></a>猴子摘桃</h4><p>猴子第一天摘了若干个桃子，当即吃了一半，还不过瘾，又多吃了一个。第二天早上又将剩下的桃子吃掉一半，又多吃一个。以后每天早上都吃前一天的一半零一个。到第十天的时候再想多吃，见只剩下一个桃子了。求第一天一共摘了多少桃子？</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span>[] taozi = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">11</span>];</span><br><span class="line">            taozi[<span class="number">10</span>] = <span class="number">1</span>;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;第十天有&quot;</span> + taozi[<span class="number">10</span>] + <span class="string">&quot;个桃子&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">9</span>; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">            &#123;</span><br><span class="line">                taozi[i] = <span class="number">2</span> * (taozi[i + <span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;第&quot;</span> + i + <span class="string">&quot;天有&quot;</span> + taozi[i] + <span class="string">&quot;个&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>网上看到的写法感觉更精简</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> day, x, y;</span><br><span class="line">            day = <span class="number">10</span>;</span><br><span class="line">            y = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (day &gt; <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                x = (y + <span class="number">1</span>) * <span class="number">2</span>;</span><br><span class="line">                y = x;</span><br><span class="line">                day--;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;第&quot;</span> + day + <span class="string">&quot;天有&quot;</span> + x + <span class="string">&quot;个&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p><strong>打印结果:</strong></p>
<p><img src="https://niaoyu.oss-cn-shenzhen.aliyuncs.com/img/image-20221025135237519.png" alt="image-20221025135237519"></p>
]]></content>
      <categories>
        <category>基础学习</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构与算法学习</title>
    <url>/Blog/2022/10/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\Blog\assets\css\APlayer.min.css"><script src="\Blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\Blog\assets\js\Meting.min.js"></script><p>最近打算恶补数据结构，在学校的时候对数据结构与算法一直是一知半解，懵懵懂懂的样子。特开此贴记录一下过程，希望能有所收获。打算看过c#基本的数据结构之后，各种类型算法题多刷刷。</p>
<h2 id="算法与数据结构的关系"><a href="#算法与数据结构的关系" class="headerlink" title="算法与数据结构的关系"></a>算法与数据结构的关系</h2><ul>
<li>数据结构可以认为是数据在程序中的存储结构,和基本数据操作</li>
<li>算法可以认为是用来解决问题的方法，算法基于数据结构</li>
<li>数据结构是问题的核心，是算法的基础</li>
</ul>
<h2 id="算法-Algorithm-的评价标准"><a href="#算法-Algorithm-的评价标准" class="headerlink" title="算法(Algorithm)的评价标准"></a>算法(Algorithm)的评价标准</h2><ul>
<li>运行时间(Running Time)</li>
<li>占用空间(Storage Space)</li>
<li>有时需要牺牲空间换取时间，有时需要牺牲时间来换取空间</li>
<li>其他方面：正确性(Correctness)、可读性(Readability)、健壮性(Robustness)</li>
</ul>
<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p><img src="https://niaoyu.oss-cn-shenzhen.aliyuncs.com/img/image-20221025135036231.png" alt="image-20221025135036231"></p>
]]></content>
      <categories>
        <category>基础学习</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>开发笔记</title>
    <url>/Blog/2022/10/01/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p> 在给任务轨迹Trail找安放位置的时候我发现：这个模型还有好多武器之类的cube，于是打算做个笔记，以后也许能用到。</p>
<p>另外有一个想法：吃到蓝色超级跳宝石时给角色换双鞋子，将这个超能力设定改为装备赋予，给鞋子加一个Trail短一点的轨迹，应该很酷。</p>
<p>这样的话就需要学一下换装了。干脆在开始页面来一个自定义装扮场景。</p>
<p>刚开始我设想是点击图标然后隐藏&#x2F;显示角色身上对应的衣服，看了视频的开头才知道，可以给角色换骨骼和mesh，确实比直接开关gameobject合理得多，更省资源。国庆几天尝试一下。</p>
]]></content>
      <tags>
        <tag>开发笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Csharp中问号的用法（转载）</title>
    <url>/Blog/2022/09/25/Csharp%E4%B8%AD%E9%97%AE%E5%8F%B7%E7%9A%84%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<h1 id="C-中-、-、-、-x3D-的用法和说明（转载）"><a href="#C-中-、-、-、-x3D-的用法和说明（转载）" class="headerlink" title="C#中? 、?? 、?. 、??&#x3D; 的用法和说明（转载）"></a>C#中? 、?? 、?. 、??&#x3D; 的用法和说明（转载）</h1><h2 id="一、可空类型修饰符-lt-gt"><a href="#一、可空类型修饰符-lt-gt" class="headerlink" title="一、可空类型修饰符&lt; ? &gt;"></a>一、可空类型修饰符&lt; ? &gt;</h2><p>引用类型能用空引用来表示一个表示一个不存在的值，但是值类型不能。例如：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> str = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">int</span> i = <span class="literal">null</span>;<span class="comment">//编译报错</span></span><br></pre></td></tr></table></figure>

<p>为了使值类型也能使用可空类型，就可以用 “ ? “来表示，表现形式为”T?”。例如：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> i? <span class="comment">//表示可空的整型</span></span><br><span class="line">DateTime time? <span class="comment">//表示可空的时间</span></span><br></pre></td></tr></table></figure>

<h2 id="二、空合并运算符-lt-gt"><a href="#二、空合并运算符-lt-gt" class="headerlink" title="二、空合并运算符&lt; ??  &gt;"></a>二、空合并运算符&lt; ??  &gt;</h2><p>用于定义引用类型和可空类型的默认值。如果此运算符的左操作数不为Null，则此操作符将返回左操作数，否则返回右操作数。</p>
<p><code>var c = a??b //当a不为null时返回a，为null时返回b</code></p>
<h2 id="三、-lt-gt"><a href="#三、-lt-gt" class="headerlink" title="三、&lt; ?. &gt;"></a>三、&lt; ?. &gt;</h2><p>不为null时执行后面的操作。例如：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Person.Name?.Person.Code </span><br><span class="line">Person.Name = Person == <span class="literal">null</span> ? <span class="literal">null</span> : Person.Code <span class="comment">//两段代码等效</span></span><br></pre></td></tr></table></figure>

<h2 id="四、-lt-x3D-gt"><a href="#四、-lt-x3D-gt" class="headerlink" title="四、&lt; ??&#x3D; &gt;"></a>四、&lt; ??&#x3D; &gt;</h2><p>C# 8.0 引入了 null 合并赋值运算符 ??&#x3D;。 仅当左操作数计算为 null 时，才能使用运算符 ??&#x3D; 将其右操作数的值分配给左操作数。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">List&lt;<span class="built_in">int</span>&gt; numbers = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">int</span>? i = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">numbers ??= <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">numbers.Add(i ??= <span class="number">17</span>);</span><br><span class="line">numbers.Add(i ??= <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">Console.WriteLine(<span class="built_in">string</span>.Join(<span class="string">&quot; &quot;</span>, numbers));  <span class="comment">// output: 17 17</span></span><br><span class="line">Console.WriteLine(i);  <span class="comment">// output: 17</span></span><br></pre></td></tr></table></figure>

<hr>
<p>版权声明：本文为CSDN博主「机械键盘侠」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/xuchen_wang/article/details/102850615">https://blog.csdn.net/xuchen_wang/article/details/102850615</a></p>
]]></content>
      <categories>
        <category>Csharp</category>
      </categories>
      <tags>
        <tag>Csharp</tag>
      </tags>
  </entry>
  <entry>
    <title>平台游戏控制器之计时功能</title>
    <url>/Blog/2022/09/23/%E5%B9%B3%E5%8F%B0%E6%B8%B8%E6%88%8F%E6%8E%A7%E5%88%B6%E5%99%A8%E4%B9%8B%E8%AE%A1%E6%97%B6%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<p>ready动画结束后游戏开始,开始计时,直到死亡或者胜利再暂停计时。</p>
<p><strong>新建ClearTime脚本用来更新时间文本,开始动画过后再计时</strong></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ClearTime</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">  [<span class="meta">SerializeField</span>] Text timeText;</span><br><span class="line">  [<span class="meta">SerializeField</span>] VoidEventChannel levelStartedEventChannel;<span class="comment">//开始游戏</span></span><br><span class="line">  [<span class="meta">SerializeField</span>] VoidEventChannel levelClearedEventChannel;<span class="comment">//玩家过关</span></span><br><span class="line">  [<span class="meta">SerializeField</span>] StringEventChannel cleardTimeTextEventChannel;<span class="comment">//带string参数的频道</span></span><br><span class="line">  [<span class="meta">SerializeField</span>] VoidEventChannel playerDefeatedEventChannel;<span class="comment">//玩家失败</span></span><br><span class="line">  <span class="built_in">float</span> clearTime;<span class="comment">//时间</span></span><br><span class="line">  <span class="built_in">bool</span> stop = <span class="literal">true</span>;<span class="comment">//计时停止</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnEnable</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//游戏开始</span></span><br><span class="line">    levelStartedEventChannel.AddListener(LevelStart);</span><br><span class="line">    <span class="comment">//玩家通关</span></span><br><span class="line">    levelClearedEventChannel.AddListener(levelCleared);</span><br><span class="line">    <span class="comment">//玩家失败</span></span><br><span class="line">    playerDefeatedEventChannel.AddListener(HideUI);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnDisable</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//游戏开始</span></span><br><span class="line">    levelStartedEventChannel.RemoveListener(LevelStart);</span><br><span class="line">    <span class="comment">//玩家通关</span></span><br><span class="line">    levelClearedEventChannel.RemoveListener(levelCleared);</span><br><span class="line">    <span class="comment">//玩家失败</span></span><br><span class="line">    playerDefeatedEventChannel.RemoveListener(HideUI);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">FixedUpdate</span>()</span></span><br><span class="line">  &#123;<span class="comment">//当计时停止时 返回.</span></span><br><span class="line">    <span class="keyword">if</span> (stop)</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    clearTime += Time.fixedDeltaTime;</span><br><span class="line">    <span class="comment">//将clearTime转化为秒,按格式输出</span></span><br><span class="line">    timeText.text = System.TimeSpan.FromSeconds(clearTime).ToString(<span class="string">@&quot;mm\:ss\:ff&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">LevelStart</span>()</span></span><br><span class="line">  &#123;<span class="comment">//开始游戏</span></span><br><span class="line">    stop = <span class="literal">false</span>;<span class="comment">//开始计时</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">levelCleared</span>()</span></span><br><span class="line">  &#123;<span class="comment">//过关</span></span><br><span class="line">    HideUI();</span><br><span class="line">    cleardTimeTextEventChannel.Broadcast(timeText.text);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">HideUI</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    stop = <span class="literal">true</span>;<span class="comment">//计时停止</span></span><br><span class="line">    GetComponent&lt;Canvas&gt;().enabled = <span class="literal">false</span>;<span class="comment">//关闭ui显示</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="过关时间显示在Victory-Screen"><a href="#过关时间显示在Victory-Screen" class="headerlink" title="过关时间显示在Victory Screen"></a>过关时间显示在Victory Screen</h2><h3 id="创建带参数的EventChannel-事件频道"><a href="#创建带参数的EventChannel-事件频道" class="headerlink" title="创建带参数的EventChannel.事件频道"></a>创建带参数的EventChannel.事件频道</h3><p>创建脚本<strong>OneParameterEventChannel</strong>设置为泛型,用来继承,方便以后传不同类型参数</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OneParameterEventChannel</span>&lt;<span class="title">T</span>&gt; : <span class="title">ScriptableObject</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//单参数事件频道</span></span><br><span class="line">  <span class="keyword">event</span> System.Action&lt;T&gt; Delegate;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Broadcast</span>(<span class="params">T obj</span>)</span></span><br><span class="line">  &#123;</span><br><span class="line">    Delegate?.Invoke(obj);<span class="comment">//调用委托</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddListener</span>(<span class="params">System.Action&lt;T&gt; action</span>)</span> &#123; Delegate += action; &#125;<span class="comment">//订阅</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RemoveListener</span>(<span class="params">System.Action&lt;T&gt; action</span>)</span> &#123; Delegate -= action; &#125;<span class="comment">//退订</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建<strong>StringEventChannel</strong>继承OneParameterEventChannel并且参数类型为<code>&lt;string&gt;</code></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line">[<span class="meta">CreateAssetMenu(menuName = <span class="string">&quot;Data/EventChannels/StringEventChannel&quot;</span>, fileName = <span class="string">&quot;StringEventChannel_&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StringEventChannel</span> : <span class="title">OneParameterEventChannel</span>&lt;<span class="title">string</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样就可以在相应的地方加入参数传递。</p>
<p>在<strong>VictoryScreen</strong>获胜ui中获取文本对象<code>[SerializeField] Text timeText;</code>，还有<code>[SerializeField] StringEventChannel clearTimeTextEventChannel;//带string参数的频道</code></p>
<p>OnEnable()和OnDisable()分别订阅&#x2F;退订方法SetTimeText()，该方法将获取的string参数赋值给<code>Text timeText</code>，</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">[<span class="meta">SerializeField</span>] Text timeText;</span><br><span class="line">[<span class="meta">SerializeField</span>] StringEventChannel clearTimeTextEventChannel;<span class="comment">//带string参数的频道</span></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnEnable</span>()</span></span><br><span class="line"> &#123;</span><br><span class="line">   clearTimeTextEventChannel.AddListener(SetTimeText);</span><br><span class="line"> &#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnDisable</span>()</span></span><br><span class="line"> &#123;</span><br><span class="line">   clearTimeTextEventChannel.RemoveListener(SetTimeText);</span><br><span class="line"> &#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SetTimeText</span>(<span class="params"><span class="built_in">string</span> obj</span>)</span></span><br><span class="line"> &#123;</span><br><span class="line">   timeText.text = obj;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>接着看<strong>ClearTime</strong>脚本，同样序列化cleardTimeTextEventChannel <code>[SerializeField] StringEventChannel cleardTimeTextEventChannel;//带string参数的频道</code></p>
<p>在过关函数触发时，调用并且将ui上的timeText数据传入StringEventChannel。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">levelCleared</span>()</span></span><br><span class="line">&#123;<span class="comment">//过关</span></span><br><span class="line">  HideUI();</span><br><span class="line">  cleardTimeTextEventChannel.Broadcast(timeText.text);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>unity</category>
      </categories>
      <tags>
        <tag>unity</tag>
        <tag>平台跳跃控制器</tag>
      </tags>
  </entry>
  <entry>
    <title>平台游戏控制器之状态驱动虚拟相机</title>
    <url>/Blog/2022/09/23/%E5%B9%B3%E5%8F%B0%E6%B8%B8%E6%88%8F%E6%8E%A7%E5%88%B6%E5%99%A8%E4%B9%8B%E7%8A%B6%E6%80%81%E9%A9%B1%E5%8A%A8%E8%99%9A%E6%8B%9F%E7%9B%B8%E6%9C%BA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\Blog\assets\css\APlayer.min.css"><script src="\Blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\Blog\assets\js\Meting.min.js"></script><p><strong>说明:为角色胜利镜头做特殊定制</strong></p>
<p><img src="https://niaoyu.oss-cn-shenzhen.aliyuncs.com/img/image-20221026021132507.png" alt="image-20221026021132507"></p>
<p><strong>follow属性用玩家对象</strong></p>
<p><img src="https://niaoyu.oss-cn-shenzhen.aliyuncs.com/img/image-20221026021156345.png" alt="image-20221026021156345"></p>
<p><strong>Animated Target:动画目标属性</strong>,拖入角色.</p>
<p><img src="https://niaoyu.oss-cn-shenzhen.aliyuncs.com/img/image-20221026021219850.png" alt="image-20221026021219850"></p>
<p><strong>原有的相机拖入状态驱动虚拟相机下</strong></p>
<p><img src="https://niaoyu.oss-cn-shenzhen.aliyuncs.com/img/image-20221026021238957.png" alt="image-20221026021238957"></p>
<p>复制一个相机改名为Zoom In,意为镜头放大的虚拟相机.</p>
<p><img src="https://niaoyu.oss-cn-shenzhen.aliyuncs.com/img/image-20221026021253768.png" alt="image-20221026021253768"></p>
<p>将镜头垂直视野值36改为24</p>
<p><img src="https://niaoyu.oss-cn-shenzhen.aliyuncs.com/img/image-20221026021307835.png" alt="image-20221026021307835"></p>
<p><strong>回到状态驱动虚拟相机对象,在这可选玩家不同状态对应使用不同的相机,还可以设置延迟1.2秒切换</strong></p>
<p><img src="https://niaoyu.oss-cn-shenzhen.aliyuncs.com/img/image-20221026021321733.png" alt="image-20221026021321733"></p>
]]></content>
      <categories>
        <category>unity</category>
      </categories>
      <tags>
        <tag>unity</tag>
        <tag>平台跳跃控制器</tag>
      </tags>
  </entry>
  <entry>
    <title>平台游戏控制器之过关</title>
    <url>/Blog/2022/09/23/%E5%B9%B3%E5%8F%B0%E6%B8%B8%E6%88%8F%E6%8E%A7%E5%88%B6%E5%99%A8%E4%B9%8B%E8%BF%87%E5%85%B3/</url>
    <content><![CDATA[<h2 id="过关功能实现"><a href="#过关功能实现" class="headerlink" title="过关功能实现"></a>过关功能实现</h2><p><strong>说明:过关时开启ui,切换状态为vitory,落地后再播放动画。</strong></p>
<p><strong>VictoryScreen</strong>中增加代码:订阅按钮功能,唤出鼠标指针。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.UI;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">VictoryScreen</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">  [<span class="meta">SerializeField</span>] VoidEventChannel levelClearedEventChannel;<span class="comment">//获取事件频道</span></span><br><span class="line">  [<span class="meta">SerializeField</span>] Button nextLevelButton;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnEnable</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    levelClearedEventChannel.AddListener(ShowUI);</span><br><span class="line">    nextLevelButton.onClick.AddListener(SceneLoader.LoadNextScene);<span class="comment">//订阅下一关按钮功能</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnDisable</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    levelClearedEventChannel.RemoveListener(ShowUI);</span><br><span class="line">    nextLevelButton.onClick.RemoveListener(SceneLoader.LoadNextScene);<span class="comment">//订阅下一关按钮功能</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ShowUI</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    GetComponent&lt;Canvas&gt;().enabled = <span class="literal">true</span>;</span><br><span class="line">    GetComponent&lt;Animator&gt;().enabled = <span class="literal">true</span>;</span><br><span class="line">    Cursor.lockState = CursorLockMode.None;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>PlayerState_Land</strong>的<strong>LogicUpdate</strong>中添加判定，如果玩家胜利，则切换为<strong>PlayerState_Victory</strong>状态。</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220923145646141.png" alt="image-20220923145646141"></p>
<p>PlayerState_Victory状态主要进行随机播放获胜音效。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PlayerState_Victory</span> : <span class="title">PlayerState</span></span><br><span class="line">&#123;</span><br><span class="line">  [<span class="meta">SerializeField</span>] AudioClip[] voice;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Enter</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">base</span>.Enter();</span><br><span class="line">    input.DisableGamePlayInputs();<span class="comment">//关闭动作表</span></span><br><span class="line">    player.voicePlayer.PlayOneShot(voice[Random.Range(<span class="number">0</span>, voice.Length)]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>unity</category>
      </categories>
      <tags>
        <tag>unity</tag>
        <tag>平台跳跃控制器</tag>
      </tags>
  </entry>
  <entry>
    <title>平台游戏控制器之玩家失败</title>
    <url>/Blog/2022/09/21/%E5%B9%B3%E5%8F%B0%E6%B8%B8%E6%88%8F%E6%8E%A7%E5%88%B6%E5%99%A8%E4%B9%8B%E7%8E%A9%E5%AE%B6%E5%A4%B1%E8%B4%A5/</url>
    <content><![CDATA[<p><strong>说明:玩家碰到尖刺或者被黑球撞到就会死亡</strong></p>
<h2 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h2><h3 id="尖刺碰撞"><a href="#尖刺碰撞" class="headerlink" title="尖刺碰撞"></a>尖刺碰撞</h3><p>首先选中<strong>所有尖刺</strong>,为他们添加脚本<strong>Spike</strong></p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220922130103417.png" alt="image-20220922130103417"></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Spike</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnTriggerEnter</span>(<span class="params">Collider other</span>)</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (other.TryGetComponent(<span class="keyword">out</span> PlayerController player))</span><br><span class="line">    &#123;<span class="comment">//如果碰撞的是挂载PlayerController的对象</span></span><br><span class="line">      player.OnDefeated();<span class="comment">//游戏失败，玩家身上相关功能禁用</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="角色属性调整-关闭功能"><a href="#角色属性调整-关闭功能" class="headerlink" title="角色属性调整(关闭功能)"></a>角色属性调整(关闭功能)</h3><p>通过问题修复功能,自动在<strong>PlayerController</strong>脚本中生成**OnDefeated()**函数;</p>
<p>同样地,在<strong>input</strong>类中生成<strong>DisableGamePlayInputs()</strong>;</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnDefeated</span>()</span></span><br><span class="line">  &#123;<span class="comment">//游戏失败</span></span><br><span class="line">    input.DisableGamePlayInputs();<span class="comment">//关闭输入</span></span><br><span class="line">    rigidBody.velocity = Vector3.zero;<span class="comment">//速度清零</span></span><br><span class="line">    rigidBody.useGravity = <span class="literal">false</span>;<span class="comment">//关闭重力对刚体的影响</span></span><br><span class="line">    rigidBody.detectCollisions = <span class="literal">false</span>;<span class="comment">//关闭刚体碰撞检测</span></span><br><span class="line">    <span class="comment">//状态机切换到失败状态</span></span><br><span class="line">    GetComponent&lt;StateMachine&gt;().SwitchState(<span class="keyword">typeof</span>(PlayerState_Defeated));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p><strong>DisableGamePlayInputs()</strong>;只有一行代码:禁用当前输入动作表。<code>playerInputAction.GamePlay.Disable();</code></p>
<h3 id="小球碰撞"><a href="#小球碰撞" class="headerlink" title="小球碰撞"></a>小球碰撞</h3><p>为球Ball添加脚本<strong>Ball</strong>,如果球撞到玩家,则执行玩家死亡游戏失败逻辑。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Ball</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">  [<span class="meta">SerializeField</span>] Collider gameplayer;<span class="comment">//获取玩家碰撞体</span></span><br><span class="line">  [<span class="meta">SerializeField</span>] PlayerController player;<span class="comment">//获取玩家控制器</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnCollisionEnter</span>(<span class="params">Collision other</span>)</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//Debug.Log(other.collider);</span></span><br><span class="line">    <span class="comment">//Debug.Log(gameplayer);</span></span><br><span class="line">    <span class="keyword">if</span> (other.collider == gameplayer)</span><br><span class="line">    &#123;</span><br><span class="line">      player.OnDefeated();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>更简便的写法:</strong></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Ball</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// [SerializeField] Collider gameplayer;//获取玩家碰撞体</span></span><br><span class="line">  <span class="comment">// [SerializeField] PlayerController player;//获取玩家控制器</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnCollisionEnter</span>(<span class="params">Collision other</span>)</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (other.gameObject.TryGetComponent(<span class="keyword">out</span> PlayerController player))</span><br><span class="line">    &#123;</span><br><span class="line">      player.OnDefeated();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// if (other.collider == gameplayer)</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//   player.OnDefeated();</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>给小球加上消失功能,大约6s摧毁自身</strong></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Ball</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">  [<span class="meta">SerializeField</span>] VoidEventChannel ballTriggeredEventChannel;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnEnable</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    ballTriggeredEventChannel.AddListener(EliminateBall);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnDisable</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    ballTriggeredEventChannel.RemoveListener(EliminateBall);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnCollisionEnter</span>(<span class="params">Collision other</span>)</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (other.gameObject.TryGetComponent(<span class="keyword">out</span> PlayerController player))</span><br><span class="line">    &#123;</span><br><span class="line">      player.OnDefeated();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">EliminateBall</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    Destroy(gameObject, <span class="number">6f</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="对状态的操作"><a href="#对状态的操作" class="headerlink" title="对状态的操作"></a>对状态的操作</h3><p>新建状态<strong>PlayerState_Defeated</strong></p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220922131642449.png" alt="image-20220922131642449"></p>
<p>用来玩家生成死亡时的音效、特效</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line">[<span class="meta">CreateAssetMenu(menuName = <span class="string">&quot;Data/StateMachine/PlayerState/Defeated&quot;</span>, fileName = <span class="string">&quot;PlayerState_Defeated&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PlayerState_Defeated</span> : <span class="title">PlayerState</span></span><br><span class="line">&#123;</span><br><span class="line">  [<span class="meta">SerializeField</span>] ParticleSystem Deathvfx;<span class="comment">//死亡特效</span></span><br><span class="line">  [<span class="meta">SerializeField</span>] AudioClip[] voice;<span class="comment">//音效集合</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Enter</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">base</span>.Enter();</span><br><span class="line">    Instantiate(Deathvfx, player.transform.position, Quaternion.identity);<span class="comment">//生成特效</span></span><br><span class="line">    AudioClip deathVoice = voice[UnityEngine.Random.Range(<span class="number">0</span>, voice.Length)];<span class="comment">//随机选中一个音效</span></span><br><span class="line">    player.voicePlayer.PlayOneShot(deathVoice);<span class="comment">//播放音效</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="UI相关"><a href="#UI相关" class="headerlink" title="UI相关"></a>UI相关</h3><p>新建<strong>SceneLoader</strong>脚本用来管理场景的切换，用来实现ui中按钮功能</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.SceneManagement;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SceneLoader</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ReloadScene</span>()</span></span><br><span class="line">  &#123;<span class="comment">//重开</span></span><br><span class="line">    <span class="built_in">int</span> sceneIndex = SceneManager.GetActiveScene().buildIndex;<span class="comment">//获取场景下标</span></span><br><span class="line">    SceneManager.LoadScene(sceneIndex);<span class="comment">//切换为当前场景(重进)</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">QuitGame</span>()</span></span><br><span class="line">  &#123;<span class="comment">//退出游戏</span></span><br><span class="line">    <span class="comment">//如果在编辑器中运行</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> UNITY_EDITOR</span></span><br><span class="line">    UnityEditor.EditorApplication.isPlaying = <span class="literal">false</span>;<span class="comment">//判断当前是否处于游戏状态</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">        Application.Quie();<span class="comment">//退出应用</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">LoadNextScene</span>()</span></span><br><span class="line">  &#123;<span class="comment">//下一关</span></span><br><span class="line">    <span class="built_in">int</span> sceneIndex = SceneManager.GetActiveScene().buildIndex + <span class="number">1</span>;<span class="comment">//获取下一关场景下标</span></span><br><span class="line">    <span class="keyword">if</span> (sceneIndex &gt;= SceneManager.sceneCount)</span><br><span class="line">    &#123;<span class="comment">//如果下标大于场景总数</span></span><br><span class="line">      ReloadScene();<span class="comment">//返回当前关</span></span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    SceneManager.LoadScene(sceneIndex);<span class="comment">//切换为下一关</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>UI中新建<strong>DefeatScreen</strong>同名脚本</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220923122705802.png" alt="image-20220923122705802"></p>
<p><strong>OnEnable</strong>和<strong>OnDisable</strong>中订阅、退订按钮功能。</p>
<p><strong>PlayerShot</strong>中实现随机播放失败bgm。这里有个问题，我在玩家失败状态类中实现这个功能的时候，最终运行时音效呈现的效果是若干音乐叠加 而且音调更低，排查了很久找不到原因，所以我把这个功能改成了动画事件触发。动画里事件大概在这个位置</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220923150710067.png" alt="image-20220923150710067"></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.UI;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DefeatScreen</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">  [<span class="meta">SerializeField</span>] VoidEventChannel playerDefeatedEventChannel;<span class="comment">//获取事件频道</span></span><br><span class="line">  [<span class="meta">SerializeField</span>] AudioClip[] voice;<span class="comment">//加油音效合集</span></span><br><span class="line">  [<span class="meta">SerializeField</span>] Button retryButton;</span><br><span class="line">  [<span class="meta">SerializeField</span>] Button quitButton;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnEnable</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    playerDefeatedEventChannel.AddListener(ShowUI);<span class="comment">//订阅展示ui函数</span></span><br><span class="line">    retryButton.onClick.AddListener(SceneLoader.ReloadScene);<span class="comment">//订阅重置按钮功能</span></span><br><span class="line">    quitButton.onClick.AddListener(SceneLoader.QuitGame);<span class="comment">//订阅退出按钮功能</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnDisable</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    playerDefeatedEventChannel.RemoveListener(ShowUI);</span><br><span class="line">    retryButton.onClick.RemoveListener(SceneLoader.ReloadScene);</span><br><span class="line">    quitButton.onClick.RemoveListener(SceneLoader.QuitGame);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ShowUI</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    GetComponent&lt;Canvas&gt;().enabled = <span class="literal">true</span>;</span><br><span class="line">    GetComponent&lt;Animator&gt;().enabled = <span class="literal">true</span>;</span><br><span class="line">    Cursor.lockState = CursorLockMode.None;<span class="comment">//显示鼠标光标</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">PlayerShot</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    AudioClip retryVoice = voice[UnityEngine.Random.Range(<span class="number">0</span>, voice.Length)];<span class="comment">//随机播放加油音效</span></span><br><span class="line">    <span class="comment">//游戏错误失败音效 许可:CC-BY 作者:GabrielAraujo 来源:耳聆网 https://www.ear0.com/sound/13207</span></span><br><span class="line">    SoundEffectsPlayer.audioSource.PlayOneShot(retryVoice);<span class="comment">//播放音效</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>unity</category>
      </categories>
      <tags>
        <tag>unity</tag>
        <tag>平台跳跃控制器</tag>
      </tags>
  </entry>
  <entry>
    <title>平台游戏控制器之开始结束画面</title>
    <url>/Blog/2022/09/21/%E5%B9%B3%E5%8F%B0%E6%B8%B8%E6%88%8F%E6%8E%A7%E5%88%B6%E5%99%A8%E4%B9%8B%E5%BC%80%E5%A7%8B%E7%BB%93%E6%9D%9F%E7%94%BB%E9%9D%A2/</url>
    <content><![CDATA[<p><strong>说明:开始游戏时播放ui动画,放完后摧毁红色闸门。游戏结束时(吃完红宝石)，弹出用时、结束画面。</strong></p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220921170427534.png" alt="image-20220921170427534"></p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220921171040912.png" alt="image-20220921171040912"></p>
<h2 id="开始画面"><a href="#开始画面" class="headerlink" title="开始画面"></a>开始画面</h2><p>开始时<strong>ReadyScreen</strong>对象的<strong>Canvas</strong>和<strong>Animator</strong>组件默认为开启。</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220921173413495.png" alt="image-20220921173413495"></p>
<p>在ReadyScreen对象下新建同名脚本<strong>ReadyScreen</strong>，拖入脚本化对象<strong>VoidEventChannel</strong>：</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220921171132192.png" alt="image-20220921171132192"></p>
<p>ui关闭时调用委托(关门)，并且隐藏Canvas和Animator，播放音效。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ReadyScreen</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">  [<span class="meta">SerializeField</span>] VoidEventChannel levelStartedEventChannel;<span class="comment">//获取事件频道</span></span><br><span class="line">  [<span class="meta">SerializeField</span>] AudioClip beginSFX;<span class="comment">//开始音效</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">CloseUI</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    levelStartedEventChannel.Broadcast();<span class="comment">//调用委托</span></span><br><span class="line">    GetComponent&lt;Canvas&gt;().enabled = <span class="literal">false</span>;</span><br><span class="line">    GetComponent&lt;Animator&gt;().enabled = <span class="literal">false</span>;</span><br><span class="line">    SoundEffectsPlayer.audioSource.PlayOneShot(beginSFX);<span class="comment">//播放音效</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来是<strong>添加动画事件</strong></p>
<p>动画器中选中最后一帧，<strong>添加事件</strong></p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220921172309718.png" alt="image-20220921172309718"></p>
<p>选择该ui上脚本里的函数CloseUI(),当动画执行到此就会运行该函数。</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220921172359029.png" alt="image-20220921172359029"></p>
<p>记得在闸门(StartGate)上添加Gate脚本 附加上对应的脚本化文件。</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220921172756313.png" alt="image-20220921172756313"></p>
<p>因此实现通过动画事件，隐藏ui、播放开始动画、移除闸门等操作。</p>
<h2 id="结束画面"><a href="#结束画面" class="headerlink" title="结束画面"></a>结束画面</h2><p><strong>与上面原理相同，流程：吃到红宝石游戏结束，弹出游戏结束画面。</strong></p>
<p>红宝石中的同名脚本<strong>VitoryGem</strong>中，获取事件频道，触发函数时调用委托。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">VitoryGem</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">  [<span class="meta">SerializeField</span>] AudioClip pickUpSound;<span class="comment">//音效</span></span><br><span class="line">  [<span class="meta">SerializeField</span>] ParticleSystem pickUpVFX;<span class="comment">//特效</span></span><br><span class="line">  [<span class="meta">SerializeField</span>] VoidEventChannel levelClearedEventChannel;<span class="comment">//获取事件频道</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnTriggerEnter</span>(<span class="params">Collider other</span>)</span></span><br><span class="line">  &#123;</span><br><span class="line">    levelClearedEventChannel.Broadcast();<span class="comment">//调用委托</span></span><br><span class="line">    SoundEffectsPlayer.audioSource.PlayOneShot(pickUpSound);</span><br><span class="line">    Instantiate(pickUpVFX, transform.position, Quaternion.identity);</span><br><span class="line">    Destroy(gameObject);<span class="comment">//摧毁</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>VictoryScreen对象(UI)创建同名脚本<strong>VictoryScreen</strong></p>
<p>VictoryScreen默认Canvas和Animator为隐藏</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220921174100250.png" alt="image-20220921174100250"></p>
<p>在ShowUI函数中开启显示Canvas和Animator组件。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">VictoryScreen</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">  [<span class="meta">SerializeField</span>] VoidEventChannel levelClearedEventChannel;<span class="comment">//获取事件频道</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnEnable</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    levelClearedEventChannel.AddListener(ShowUI);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnDisable</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    levelClearedEventChannel.RemoveListener(ShowUI);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ShowUI</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    GetComponent&lt;Canvas&gt;().enabled = <span class="literal">true</span>;</span><br><span class="line">    GetComponent&lt;Animator&gt;().enabled = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>unity</category>
      </categories>
      <tags>
        <tag>unity</tag>
        <tag>平台跳跃控制器</tag>
      </tags>
  </entry>
  <entry>
    <title>平台跳跃控制器之宝石功能实现:delegate</title>
    <url>/Blog/2022/09/20/%E5%B9%B3%E5%8F%B0%E8%B7%B3%E8%B7%83%E6%8E%A7%E5%88%B6%E5%99%A8%E4%B9%8B%E5%AE%9D%E7%9F%B3%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0-delegate/</url>
    <content><![CDATA[<h2 id="常规方法：通过委托联系宝石与门-观察者模式"><a href="#常规方法：通过委托联系宝石与门-观察者模式" class="headerlink" title="常规方法：通过委托联系宝石与门(观察者模式)"></a>常规方法：通过委托联系宝石与门(观察者模式)</h2><p><strong>流程是:</strong></p>
<ul>
<li><strong>在宝石脚本中创建委托,并在碰撞函数中调用(Invoke());</strong></li>
<li><strong>在门脚本中创建函数(Open())摧毁对象,并且订阅宝石中的委托。</strong></li>
<li><strong>当宝石碰撞，调用了委托，订阅委托的两个门就执行相应动作(摧毁)。</strong></li>
</ul>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220921125104646.png" alt="image-20220921125104646"></p>
<p>这个方法缺点是门与宝石耦合</p>
<h3 id="给宝石添加委托"><a href="#给宝石添加委托" class="headerlink" title="给宝石添加委托"></a>给宝石添加委托</h3><p>event关键字:其他类不可使用&#x3D;,只可以+&#x3D;或-&#x3D;</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220921124328815.png" alt="image-20220921124328815"></p>
<p><strong>碰撞事件函数中调用委托</strong></p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220921124431032.png" alt="image-20220921124431032"></p>
<h3 id="给门添加Gate脚本"><a href="#给门添加Gate脚本" class="headerlink" title="给门添加Gate脚本"></a>给门添加Gate脚本</h3><p><strong>写一个函数来销毁门</strong></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Open</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    Destroy(gameObject);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>获取<strong>gateTrigger</strong>实例并且</p>
<p>在**Onenable()**中订阅Open函数</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220921125021772.png" alt="image-20220921125021772"></p>
<h2 id="引入Scriptable-Object实现解耦"><a href="#引入Scriptable-Object实现解耦" class="headerlink" title="引入Scriptable Object实现解耦"></a>引入Scriptable Object实现解耦</h2><p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220921134702232.png" alt="image-20220921134702232"></p>
<p>新建一个<strong>EventChannels文件夹</strong>并且创建<strong>VoidEventChannel脚本</strong></p>
<p>将它继承于ScriptableObject,实现<strong>声明委托、调用、订阅、退订</strong>等操作。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line">[<span class="meta">CreateAssetMenu(menuName = <span class="string">&quot;Data/EventChannels/VoidEventChannel&quot;</span>, fileName = <span class="string">&quot;VoidEventChannel_&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">VoidEventChannel</span> : <span class="title">ScriptableObject</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">event</span> System.Action Delegate;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Broadcast</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    Delegate?.Invoke();<span class="comment">//调用委托</span></span><br><span class="line">    <span class="comment">// 等价于如下代码</span></span><br><span class="line">    <span class="comment">//  if (Delegate!=null)</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//  Delegate.Invoke(); </span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddListener</span>(<span class="params">System.Action action</span>)</span> &#123; Delegate += action; &#125;<span class="comment">//订阅</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RemoveListener</span>(<span class="params">System.Action action</span>)</span> &#123; Delegate -= action; &#125;<span class="comment">//退订</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在中Data文件夹中创建EventChannels文件夹，并创建VoidEventChannel_文件</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220921150235366.png" alt="image-20220921150235366"></p>
<p>门开关之类的命名为<strong>VoidEventChannel_GateTriggered</strong></p>
<h3 id="修改GateTrigger代码"><a href="#修改GateTrigger代码" class="headerlink" title="修改GateTrigger代码"></a>修改GateTrigger代码</h3><p>序列化获取<strong>VoidEventChannel</strong>可脚本化对象,注释定义委托代码,在触发器中调用VoidEventChannel中的调用委托函数。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GateTrigger</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">  [<span class="meta">SerializeField</span>] AudioClip pickUpSound;<span class="comment">//音效</span></span><br><span class="line">  [<span class="meta">SerializeField</span>] ParticleSystem pickUpVFX;<span class="comment">//特效</span></span><br><span class="line">  [<span class="meta">SerializeField</span>] VoidEventChannel gateTriggeredEventChannel;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// public event System.Action OpenDoor;//定义委托</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnTriggerEnter</span>(<span class="params">Collider other</span>)</span></span><br><span class="line">  &#123;</span><br><span class="line">    gateTriggeredEventChannel.Broadcast();<span class="comment">//调用委托</span></span><br><span class="line"></span><br><span class="line">    SoundEffectsPlayer.audioSource.PlayOneShot(pickUpSound);</span><br><span class="line">    Instantiate(pickUpVFX, transform.position, Quaternion.identity);</span><br><span class="line">    Destroy(gameObject);<span class="comment">//摧毁</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="修改Gate代码"><a href="#修改Gate代码" class="headerlink" title="修改Gate代码"></a>修改Gate代码</h3><p>序列化获取<strong>VoidEventChannel</strong>可脚本化对象，调用其中订阅和退订函数,意为<strong>委托</strong>执行时<strong>摧毁门</strong>。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Gate</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">  [<span class="meta">SerializeField</span>] VoidEventChannel gateTriggeredEventChannel;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnEnable</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//gateTrigger.OpenDoor += Open;</span></span><br><span class="line">    gateTriggeredEventChannel.AddListener(Open);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnDisable</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//gateTrigger.OpenDoor -= Open;</span></span><br><span class="line">    gateTriggeredEventChannel.RemoveListener(Open);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Open</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    Destroy(gameObject);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p><strong>GateTrigger</strong>和相对应的<strong>Gate</strong>拖入可视化脚本对象，<strong>VoidEventChannel</strong></p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220921165250298.png" alt="image-20220921165250298"></p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220921165627060.png" alt="image-20220921165627060"></p>
<p>此时,拾取蓝宝石将会摧毁宝石和红门。</p>
]]></content>
      <categories>
        <category>unity</category>
      </categories>
      <tags>
        <tag>unity</tag>
        <tag>平台跳跃控制器</tag>
      </tags>
  </entry>
  <entry>
    <title>平台跳跃控制器之声音</title>
    <url>/Blog/2022/09/15/%E5%B9%B3%E5%8F%B0%E8%B7%B3%E8%B7%83%E6%8E%A7%E5%88%B6%E5%99%A8%E4%B9%8B%E5%A3%B0%E9%9F%B3/</url>
    <content><![CDATA[<p>说明:红宝石和蓝宝石是一次性的,所以拾取后要摧毁音效对象，而黄宝石是需要重复利用的，不需要摧毁。</p>
<p>为了整体音效更好管理，新建一个<strong>SoundEffectsPlayer类</strong>,附加在SFX Player对象上,SFX Player对象上要有<strong>AudioSource组件</strong>。</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220919133724914.png" alt="image-20220919133724914"></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SoundEffectsPlayer</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> AudioSource audioSource &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    audioSource = GetComponent&lt;AudioSource&gt;();</span><br><span class="line">    audioSource.playOnAwake = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>StarGem</strong>,黄色跳跃星星脚本中,注释掉AudioSource定义代码，播放音效改为调用<strong>SoundEffectsPlayer</strong>类中的AudioSource:<code>SoundEffectsPlayer.audioSource.PlayOneShot(pickUpSFX);//播放音效</code></p>
<hr>
<h3 id="一次性宝石"><a href="#一次性宝石" class="headerlink" title="一次性宝石"></a>一次性宝石</h3><p>分别在红、蓝宝石组件上新建两个同名脚本:VitoryGem、GateTrigger</p>
<p><strong>统一代码为:拾取时播放音效、特效。</strong></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GateTrigger</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">  [<span class="meta">SerializeField</span>] AudioClip pickUpSound;<span class="comment">//音效</span></span><br><span class="line">  [<span class="meta">SerializeField</span>] ParticleSystem pickUpVFX;<span class="comment">//特效</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnTriggerEnter</span>(<span class="params">Collider other</span>)</span></span><br><span class="line">  &#123;</span><br><span class="line">    SoundEffectsPlayer.audioSource.PlayOneShot(pickUpSound);</span><br><span class="line">    Instantiate(pickUpVFX, transform.position, Quaternion.identity);</span><br><span class="line">    Destroy(gameObject);<span class="comment">//摧毁</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>红、蓝宝石不需要判断是否和玩家产生碰撞。通过碰撞物理层级来实现，限定两个宝石只和玩家产生碰撞</strong></p>
<p>新建<strong>Player</strong>和<strong>Interactable</strong>层级</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220919153452969.png" alt="image-20220919153452969"></p>
<p>项目设置中，设置Interactable物理层级只和player碰撞。</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220919155937199.png" alt="image-20220919155937199"></p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220919155922111.png" alt="image-20220919155922111"></p>
<hr>
<h3 id="玩家音效"><a href="#玩家音效" class="headerlink" title="玩家音效"></a>玩家音效</h3><p>在<strong>PlayerController</strong>中添加音源组件</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220920124419579.png" alt="image-20220920124419579"></p>
<p>在<strong>跳跃、二段跳、落地</strong>等状态中添加音效（截图为跳跃状态，其他代码一样）</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220920124648621.png" alt="image-20220920124648621"></p>
<p>然后在编辑器中拖入各自的音频文件</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220920124755696.png" alt="image-20220920124755696"></p>
<h3 id="添加背景音乐-Loop：循环播放，Play-On-Awake-开局自动播放"><a href="#添加背景音乐-Loop：循环播放，Play-On-Awake-开局自动播放" class="headerlink" title="添加背景音乐(Loop：循环播放，Play On Awake:开局自动播放)"></a>添加背景音乐(Loop：循环播放，Play On Awake:开局自动播放)</h3><p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220920124901051.png" alt="image-20220920124901051"></p>
<hr>
<h3 id="调整音量"><a href="#调整音量" class="headerlink" title="调整音量"></a>调整音量</h3><p>在每个有创建<strong>AudioSource</strong>,的脚本中添加音量调整滑块</p>
<h4 id="SoundEffectsPlayer"><a href="#SoundEffectsPlayer" class="headerlink" title="SoundEffectsPlayer:"></a>SoundEffectsPlayer:</h4><p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220920124123545.png" alt="image-20220920124123545"></p>
<h4 id="PlayerController"><a href="#PlayerController" class="headerlink" title="PlayerController:"></a>PlayerController:</h4><p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220920124310496.png" alt="image-20220920124310496"></p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220920124321772.png" alt="image-20220920124321772"></p>
<h4 id="效果："><a href="#效果：" class="headerlink" title="效果："></a>效果：</h4><p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220920125147979.png" alt="image-20220920125147979"></p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220920125237699.png" alt="image-20220920125237699"></p>
]]></content>
      <categories>
        <category>unity</category>
      </categories>
      <tags>
        <tag>unity</tag>
        <tag>平台跳跃控制器</tag>
      </tags>
  </entry>
  <entry>
    <title>游戏画面中查看debug:OnGUI</title>
    <url>/Blog/2022/09/14/%E6%B8%B8%E6%88%8F%E7%94%BB%E9%9D%A2%E4%B8%AD%E6%9F%A5%E7%9C%8Bdebug-OnGUI/</url>
    <content><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnGUI</span>()</span></span><br><span class="line"> &#123;</span><br><span class="line">   Rect rect = <span class="keyword">new</span> Rect(<span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>);<span class="comment">//显示位置</span></span><br><span class="line">   <span class="built_in">string</span> msg = <span class="string">&quot;是否有跳跃缓冲:&quot;</span> + HasJumpInputBuffer;<span class="comment">//字符串</span></span><br><span class="line">   GUIStyle style = <span class="keyword">new</span> GUIStyle();<span class="comment">//自定义文本样式</span></span><br><span class="line">   style.fontSize = <span class="number">20</span>;</span><br><span class="line">   style.fontStyle = FontStyle.Bold;<span class="comment">//粗体</span></span><br><span class="line">   GUI.Label(rect, msg, style);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>unity</category>
      </categories>
      <tags>
        <tag>unity</tag>
        <tag>OnGUI</tag>
      </tags>
  </entry>
  <entry>
    <title>平台跳跃控制器之预输入</title>
    <url>/Blog/2022/09/14/%E5%B9%B3%E5%8F%B0%E8%B7%B3%E8%B7%83%E6%8E%A7%E5%88%B6%E5%99%A8%E4%B9%8B%E9%A2%84%E8%BE%93%E5%85%A5/</url>
    <content><![CDATA[<h2 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h2><p><strong>说明:未落地时按跳跃键,可被记录，并且落地后起跳。</strong></p>
<ul>
<li><strong>降落</strong>状态，并且无法二段跳时，<strong>开启缓冲输入</strong>。</li>
<li>从降落到落地<strong>之间</strong>只要一直按着空格，落地后会立马跳起。</li>
<li><strong>中间松开</strong>就会<strong>关闭缓冲输入</strong>。</li>
<li><strong>落地</strong>后<strong>关闭缓冲输入</strong>。</li>
</ul>
<p><strong>PlayerInput</strong>中添加变量<code>public bool HasJumpInputBuffer &#123; get; set; &#125;</code></p>
<p>**onEnable()**函数中添加松开按键判定</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnEnable</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//当玩家松开按键跳跃时</span></span><br><span class="line">    playerInputAction.GamePlay.Jump.canceled += <span class="built_in">delegate</span></span><br><span class="line">    &#123;</span><br><span class="line">      HasJumpInputBuffer = <span class="literal">false</span>;<span class="comment">//松开按键关闭跳跃输入缓冲</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p><strong>PlayerState_Fall</strong>脚本中添加输入缓冲</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (input.playerjump)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (player.CanAirJump)</span><br><span class="line">      &#123;<span class="comment">//当玩家可以跳跃时(吃到星星,测试时条件是落地后)</span></span><br><span class="line">        stateMachine.SwitchState(<span class="keyword">typeof</span>(PlayerState_AirJump));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      input.HasJumpInputBuffer = <span class="literal">true</span>;<span class="comment">//如果玩家不能二段跳,则开启动作预输入(输入缓冲)</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>PlayerState_JumpUp</strong>脚本,**Enter()**中添加<code>input.HasJumpInputBuffer = false;//关闭动作缓冲</code></p>
<p><strong>PlayerState_Land</strong>,落地状态脚本,判定开启动作缓冲输入时也可跳跃</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (input.HasJumpInputBuffer || input.playerjump)</span><br><span class="line">    &#123;<span class="comment">//如果存在跳跃输入缓冲</span></span><br><span class="line">      <span class="comment">//或者玩家按下空格起跳,则切换状态为跳跃</span></span><br><span class="line">      stateMachine.SwitchState(<span class="keyword">typeof</span>(PlayerState_JumpUp));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="限制缓冲输入时长"><a href="#限制缓冲输入时长" class="headerlink" title="限制缓冲输入时长"></a>限制缓冲输入时长</h2><p>新建协程<strong>JumpInputBufferCoroutine</strong>,跳跃输入缓冲携程</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function">IEnumerator <span class="title">JumpInputBufferCoroutine</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//跳跃输入缓冲携程</span></span><br><span class="line">    HasJumpInputBuffer = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">return</span> waitJumpInputBufferTime;<span class="comment">//延迟0.5s</span></span><br><span class="line">    HasJumpInputBuffer = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>该协程写进一个方法用以别的类调用</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetJumpInputBufferTimer</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    StopCoroutine(<span class="keyword">nameof</span>(JumpInputBufferCoroutine));</span><br><span class="line">    StartCoroutine(<span class="keyword">nameof</span>(JumpInputBufferCoroutine));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>例如<strong>PlayerState_Fall</strong>状态中,将无限制缓冲输入时长改为长按0.5s失效</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//若如果玩家不能二段跳,则开启动作预输入(输入缓冲) 携程</span></span><br><span class="line">      <span class="comment">// input.HasJumpInputBuffer = true;</span></span><br><span class="line">      input.SetJumpInputBufferTimer();</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>unity</category>
      </categories>
      <tags>
        <tag>unity</tag>
        <tag>平台跳跃控制器</tag>
      </tags>
  </entry>
  <entry>
    <title>平台跳跃控制器之土狼时间</title>
    <url>/Blog/2022/09/08/%E5%B9%B3%E5%8F%B0%E8%B7%B3%E8%B7%83%E6%8E%A7%E5%88%B6%E5%99%A8%E4%B9%8B%E5%9C%9F%E7%8B%BC%E6%97%B6%E9%97%B4/</url>
    <content><![CDATA[<h2 id="土狼时间"><a href="#土狼时间" class="headerlink" title="土狼时间"></a>土狼时间</h2><p><strong>人物在地面&#x2F;平台边缘即将掉落的时候,仍有机会进行跳跃动作;</strong></p>
<p><strong>其原理是:在人物掉落判定时开始计时,在设置的土狼时间内,可以按键跳跃。</strong></p>
<ul>
<li>新建一个状态脚本<strong>PlayerState_CoyoteTime</strong>，大部分代码可复制<strong>PlayerState_Run</strong>。</li>
<li>从<strong>RUN</strong>状态转向<strong>CoyoteTime</strong>，首先关闭刚体重力(需要在<strong>PlayerController</strong>脚本中添加方法获取参数)，使角色在空中保持一段时间。状态结束再开启刚体重力。</li>
<li>其中包含的下落状态处理逻辑，因此可以将<strong>PlayerState_Run</strong>中浮空切换下落状态改为切换为<strong>PlayerState_CoyoteTime</strong></li>
</ul>
<p><strong>PlayerState_CoyoteTime.cs</strong>代码</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line">[<span class="meta">CreateAssetMenu(menuName = <span class="string">&quot;Data/StateMachine/PlayerState/CoyoteTime&quot;</span>, fileName = <span class="string">&quot;PlayerState_CoyoteTime&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PlayerState_CoyoteTime</span> : <span class="title">PlayerState</span></span><br><span class="line">&#123;</span><br><span class="line">  [<span class="meta">SerializeField</span>] <span class="built_in">float</span> runSpeed = <span class="number">5f</span>;<span class="comment">//跑步速度</span></span><br><span class="line">  [<span class="meta">SerializeField</span>] <span class="built_in">float</span> coyoteTime = <span class="number">0.1f</span>;<span class="comment">//土狼时间持续时间</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Enter</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">base</span>.Enter();</span><br><span class="line">    <span class="comment">//取消刚体重力</span></span><br><span class="line">    player.SetUseGravity(<span class="literal">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Exit</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//结束,开启重力</span></span><br><span class="line">    player.SetUseGravity(<span class="literal">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">LogicUpdate</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (input.playerjump)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">//如果玩家按下空格起跳,则切换状态为跳跃</span></span><br><span class="line">      stateMachine.SwitchState(<span class="keyword">typeof</span>(PlayerState_JumpUp));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (StateDuration &gt; coyoteTime || !input.PlayerMove)</span><br><span class="line">    &#123;<span class="comment">//当玩家不进行移动操作,或土狼时间结束时,切换为掉落状态 </span></span><br><span class="line">      stateMachine.SwitchState(<span class="keyword">typeof</span>(PlayerState_Fall));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">PhysicUpdate</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    player.Move(runSpeed);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>PlayerController中新加的函数</strong></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetUseGravity</span>(<span class="params"><span class="built_in">bool</span> <span class="keyword">value</span></span>)</span></span><br><span class="line"> &#123;<span class="comment">//控制刚体重力开关</span></span><br><span class="line">   rigidBody.useGravity = <span class="keyword">value</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>PlayerState_Run中修改后的内容</strong></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!player.IsGrounded)</span><br><span class="line">    &#123;<span class="comment">//当玩家不在地面上时,切换为土狼时间状态 </span></span><br><span class="line">      stateMachine.SwitchState(<span class="keyword">typeof</span>(PlayerState_CoyoteTime));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>unity</category>
      </categories>
      <tags>
        <tag>unity</tag>
        <tag>平台跳跃控制器</tag>
      </tags>
  </entry>
  <entry>
    <title>平台跳跃控制器之二段跳</title>
    <url>/Blog/2022/08/29/%E5%B9%B3%E5%8F%B0%E8%B7%B3%E8%B7%83%E6%8E%A7%E5%88%B6%E5%99%A8%E4%B9%8B%E4%BA%8C%E6%AE%B5%E8%B7%B3/</url>
    <content><![CDATA[<blockquote>
<p>总章中间漏了点，最近懒得补。干脆做到哪写到哪吧，有时间再整理。</p>
</blockquote>
<ul>
<li><p><strong>跳跃在空中的状态是：跳起-&gt;下落;</strong></p>
</li>
<li><p><strong>跳起之后松开空格就是下落状态，所以二段跳逻辑我们写在下落状态中；</strong></p>
</li>
</ul>
<h2 id="实现空中多段跳"><a href="#实现空中多段跳" class="headerlink" title="实现空中多段跳"></a>实现空中多段跳</h2><ul>
<li><p><strong>新建一个空中跳跃状态(PlayerState_AirJump.cs),为他添加资产菜单(CreateAssetMenu);</strong></p>
</li>
<li><p><strong>空中跳跃的逻辑和普通跳跃一样,所以直接复制代码即可。重要的地方在于,我们需要给二段跳进行限制。</strong></p>
</li>
</ul>
<p>在<strong>PlayerController.cs</strong>中,新建属性<strong>CanAirJump</strong>,<code>public bool CanAirJump &#123; get; set; &#125; = true;//控制空中跳跃能力的开关</code></p>
<p>在下落状态脚本<strong>PlayerState_Fall.cs</strong>中的**LogicUpdate()**函数里实现判断,当玩家可以跳跃时(吃到星星,测试时条件是落地后)切换状态:</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">LogicUpdate</span>()</span></span><br><span class="line"> &#123;</span><br><span class="line">   <span class="keyword">if</span> (player.IsGrounded)</span><br><span class="line">   &#123;<span class="comment">//当玩家接触到地面时,切换到落地状态</span></span><br><span class="line">     stateMachine.SwitchState(<span class="keyword">typeof</span>(PlayerState_Land));</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (input.playerjump) 	</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="keyword">if</span> (player.CanAirJump)</span><br><span class="line">     &#123;<span class="comment">//当玩家可以跳跃时(吃到星星,测试时条件是落地后)</span></span><br><span class="line">       stateMachine.SwitchState(<span class="keyword">typeof</span>(PlayerState_AirJump));</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="给跳跃添加粒子特效"><a href="#给跳跃添加粒子特效" class="headerlink" title="给跳跃添加粒子特效"></a>给跳跃添加粒子特效</h3><p>分别在两个跳跃状态新建<code>[SerializeField] ParticleSystem jumpVFX;//粒子特效</code></p>
<h2 id="实现吃星星增加跳跃次数"><a href="#实现吃星星增加跳跃次数" class="headerlink" title="实现吃星星增加跳跃次数"></a>实现吃星星增加跳跃次数</h2><h3 id="首先"><a href="#首先" class="headerlink" title="首先"></a>首先</h3><p>将玩家控制器脚本<strong>PlayerController</strong>中,属性<code> public bool CanAirJump &#123; get; set; &#125;</code>的ture赋值删除,不进行初始化.默认值为false;</p>
<h3 id="其次"><a href="#其次" class="headerlink" title="其次"></a>其次</h3><p>在<strong>PlayerState_Land</strong>脚本中删除Enter()里,<code>player.CanAirJump</code>。</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220901163609823.png" alt="image-20220901163609823"></p>
<h3 id="打开星星宝石预制体-创建脚本StarGem-内容如下"><a href="#打开星星宝石预制体-创建脚本StarGem-内容如下" class="headerlink" title="打开星星宝石预制体,创建脚本StarGem,内容如下:"></a>打开星星宝石预制体,创建脚本StarGem,内容如下:</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StarGem</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//进入触发器</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnTriggerEnter</span>(<span class="params">Collider other</span>)</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//检测进入触发器的对象是否是玩家</span></span><br><span class="line">    <span class="keyword">if</span> (other.TryGetComponent&lt;PlayerController&gt;(<span class="keyword">out</span> PlayerController player))</span><br><span class="line">    &#123;<span class="comment">//打开空中跳跃能力</span></span><br><span class="line">      player.CanAirJump = <span class="literal">true</span>;</span><br><span class="line">      <span class="comment">//Destroy(gameObject);不可直接摧毁宝石</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>碰撞体配置,记得打开触发器</strong></p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220907181056931.png" alt="image-20220907181056931"></p>
<p><strong>接下来实现星星宝石消失后延时恢复</strong></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StarGem</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;<span class="comment">//进入触发器</span></span><br><span class="line">    </span><br><span class="line">  [<span class="meta">SerializeField</span>] <span class="built_in">float</span> resetTime = <span class="number">2</span>;</span><br><span class="line">  MeshRenderer meshRenderer;<span class="comment">//渲染器组件</span></span><br><span class="line">  <span class="keyword">new</span> Collider collider;<span class="comment">//碰撞器组件</span></span><br><span class="line"></span><br><span class="line">  WaitForSeconds waitResetTime;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    meshRenderer = GetComponentInChildren&lt;MeshRenderer&gt;();</span><br><span class="line">    collider = GetComponent&lt;Collider&gt;();</span><br><span class="line">    waitResetTime = <span class="keyword">new</span> WaitForSeconds(resetTime);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnTriggerEnter</span>(<span class="params">Collider other</span>)</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//检测进入触发器的对象是否是玩家</span></span><br><span class="line">    <span class="keyword">if</span> (other.TryGetComponent&lt;PlayerController&gt;(<span class="keyword">out</span> PlayerController player))</span><br><span class="line">    &#123;<span class="comment">//打开空中跳跃能力</span></span><br><span class="line">      player.CanAirJump = <span class="literal">true</span>;</span><br><span class="line">      <span class="comment">//Destroy(gameObject);不可直接摧毁宝石</span></span><br><span class="line">      meshRenderer.enabled = <span class="literal">false</span>;<span class="comment">//关闭宝石的渲染器组件</span></span><br><span class="line">      collider.enabled = <span class="literal">false</span>;<span class="comment">//关闭碰撞器组件</span></span><br><span class="line">      <span class="comment">//Invoke(nameof(Reset), resetTime);//延时resetTime秒调用函数</span></span><br><span class="line">      StartCoroutine(ResetCoroutine());<span class="comment">//启动延时携程</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function">IEnumerator <span class="title">ResetCoroutine</span>()</span></span><br><span class="line">  &#123;<span class="comment">//延时携程</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">return</span> waitResetTime;<span class="comment">//挂起等待resetTime秒</span></span><br><span class="line">    Reset();<span class="comment">//实现功能</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Reset</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    meshRenderer.enabled = <span class="literal">true</span>;<span class="comment">//关闭宝石的渲染器组件</span></span><br><span class="line">    collider.enabled = <span class="literal">true</span>;<span class="comment">//关闭碰撞器组件</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="给星星添加音效"><a href="#给星星添加音效" class="headerlink" title="给星星添加音效"></a>给星星添加音效</h2><p><strong>组件中添加Audio Source,在代码中添加拾取音效.图中已圈出</strong></p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220908024359260.png" alt="image-20220908024359260"></p>
<h2 id="旋转星星"><a href="#旋转星星" class="headerlink" title="旋转星星"></a>旋转星星</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AutoRotate</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">  [<span class="meta">SerializeField</span>] Vector3 rotation;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">  &#123;<span class="comment">//旋转</span></span><br><span class="line">    transform.Rotate(rotation * Time.deltaTime);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220908233011726.png" alt="image-20220908233011726"></p>
]]></content>
      <categories>
        <category>unity</category>
      </categories>
      <tags>
        <tag>unity</tag>
        <tag>平台跳跃控制器</tag>
      </tags>
  </entry>
  <entry>
    <title>(转载)Cinemachine Camera部分讲解和使用</title>
    <url>/Blog/2022/08/04/Cinemachine%20Camera%E8%AF%A6%E7%BB%86%E8%AE%B2%E8%A7%A3%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Cinemachine-Camera"><a href="#Cinemachine-Camera" class="headerlink" title="Cinemachine Camera"></a>Cinemachine Camera</h1><p>转载自知乎用户:<a href="https://www.zhihu.com/people/kingqueenno1">Ouroboros</a></p>
<p>文章地址:<a href="https://zhuanlan.zhihu.com/p/516625841">https://zhuanlan.zhihu.com/p/516625841</a></p>
<p><strong>本篇节选了body部分</strong></p>
<p>在阅读以下文章之前先了解以下概念</p>
<p><img src="https://pic3.zhimg.com/80/v2-67d6d7f9cddc44624d5cf1058b758a6e_720w.jpg" alt="img"></p>
<ul>
<li>Pitch Axis：俯仰轴</li>
<li>Roll Axis：翻转轴</li>
<li>Yaw Axis：航向轴</li>
</ul>
<p>这三个轴与x，y，z坐标轴不同概念</p>
<hr>
<h2 id="Body"><a href="#Body" class="headerlink" title="Body"></a>Body</h2><p><img src="https://pic2.zhimg.com/80/v2-cef05c88a081f2eb44e3825590e78fc5_720w.jpg" alt="img"></p>
<p><strong>打开Body组件界面有7种算法</strong></p>
<p>以下图片出现黄色感叹号是因为Follow没有挂载跟随目标</p>
<h3 id="Do-nothing"><a href="#Do-nothing" class="headerlink" title="Do nothing"></a>Do nothing</h3><p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/v2-ffe5c327327870fc473da8dc2c8b9473_720w.png" alt="img"></p>
<p>选择该算法后，该虚拟相机的坐标不会移动更新，通常为静态镜头选择此算法或使用自定义脚本直接为相机位置设置动画。通常和LookAt配合使用，模拟固定位置的跟随镜头。</p>
<hr>
<h3 id="3rd-Person-Follow"><a href="#3rd-Person-Follow" class="headerlink" title="3rd Person Follow"></a>3rd Person Follow</h3><p>选择该算法后虚拟相机会自动跟随任务移动，就是常见的第三人称视角</p>
<p><img src="https://pic3.zhimg.com/80/v2-85209d1fa4107de7c94cf0703a70efa2_720w.jpg" alt="img"></p>
<table>
<thead>
<tr>
<th>变量</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>Damping</td>
<td>阻尼系数，指摄像机向x,y,z轴三个方向移动反应速度，系数越小反应越快，系数越大反应越慢，可以通过调整三个不同方向轴的阻尼系数来实现不同的移动效果。</td>
</tr>
<tr>
<td>Shoulder Offset</td>
<td>相对于跟随目标原点的肩膀支点的位置。这个偏移量位于目标模型空间。</td>
</tr>
<tr>
<td>Vertical Arm Length</td>
<td>手相对于肩膀的垂直偏移量。当相机垂直旋转时，arm长度会影响跟踪目标在屏幕空间的偏移。</td>
</tr>
<tr>
<td>Camera Side</td>
<td>明确哪个位置是相机的肩膀（0-1，代表left，in-between，right三种状态）</td>
</tr>
<tr>
<td>Camera Distance</td>
<td>相机的手部位置会被放置多远距离</td>
</tr>
<tr>
<td>Camera Collision Fiter</td>
<td>相机碰撞过滤器，相机会自动避免阻碍这些层。有以下成员：Nothing&#x2F;Everything&#x2F;default&#x2F;TransparentFX&#x2F;Ignore Raycast&#x2F;Water&#x2F;UI</td>
</tr>
<tr>
<td>Ignore Tag</td>
<td>检测忽略的Tag</td>
</tr>
<tr>
<td>Camera Radius</td>
<td>虚拟相机会尽量与遮挡物保持不低于这个距离。如果你看到由于较大的FOV导致相机穿透了遮挡物内部，可以适当增加这个值。</td>
</tr>
</tbody></table>
<hr>
<h3 id="Framing-Transposer"><a href="#Framing-Transposer" class="headerlink" title="Framing Transposer"></a>Framing Transposer</h3><p>​	此虚拟相机本身算法将相机以固定的屏幕空间关系移动到跟随目标。您还可以指定偏移、阻尼和合成规则。<strong>Framing Transposer</strong>只改变相机在空间中的位置。它不会重新定向或以其他方式瞄准相机。</p>
<p>​	<strong>Framing Transposer</strong>专为 2D 和正交相机而设计。但它也适用于透视相机和 3D 环境。</p>
<p>​	此算法首先沿相机 Z 轴移动相机，直到跟随目标与相机的 XY 平面处于所需距离。然后在其 XY 平面中移动相机，直到跟随目标位于相机屏幕上的所需点。</p>
<p><strong>注意</strong>：<strong>Framing Transposer</strong>忽略 LookAt 目标 - 仅使用 Follow 目标。</p>
<p>如果<strong>Follow</strong>目标是Target Group，则可以使用其他属性来构建整个组。</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/v2-c71c17a1642d70fb40ca84386dbe3b37_720w.jpg" alt="img">面版</p>
<table>
<thead>
<tr>
<th>变量</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>Tracked Object Offse</td>
<td>对跟随目标对象的偏移量（在目标-局部坐标中）。相机将尝试框定目标位置加上此偏移量的点。当目标原点不是目标点时，使用它来校正相机</td>
</tr>
<tr>
<td>Lookahead Time</td>
<td>根据目标的运动，调整虚拟相机与“跟随”目标的偏移量。Cinemachine预测目标在未来数秒之内到达的位置并提前设置Unity相机的位置。这个功能对微动的动画敏感，并且会放大噪点，导致非预期的相机抖动。如果不能接受目标运动时的相机抖动，减小这个属性可能会使相机动画更流畅。</td>
</tr>
<tr>
<td>Lookahead Smoothing</td>
<td>预测算法的平滑度。较大的值可以消除抖动但会使预测滞后。</td>
</tr>
<tr>
<td>Lookahead Ignore Y</td>
<td>如果选中，则忽略沿 Y 轴的移动以进行预测计算。</td>
</tr>
<tr>
<td>X ，Y，Z Damping</td>
<td>相机尝试保持 x ，y，z轴偏移的响应程度。小数字使相机更灵敏。数字越大，相机响应越慢。每个轴使用不同的设置可以产生广泛的相机行为。</td>
</tr>
<tr>
<td>Target Movement Only</td>
<td>如果启用此选项，则阻尼仅适用于目标的运动。相机旋转更改将绕过阻尼。</td>
</tr>
<tr>
<td>Screen X，Y</td>
<td>目标的水平，垂直屏幕位置。相机移动的结果是使目标处于此位置。</td>
</tr>
<tr>
<td>Camera Distance</td>
<td>沿摄像机Z轴与跟随目标保持的距离。</td>
</tr>
<tr>
<td>Dead Zone Width</td>
<td>当目标在此位置范围内时，不会水平移动相机</td>
</tr>
<tr>
<td>Dead Zone Height</td>
<td>当目标在此位置范围内时，不会垂直移动相机。</td>
</tr>
<tr>
<td>Dead Zone Depth</td>
<td>当跟随目标距离相机在此范围内时，不会沿其z轴移动相机。</td>
</tr>
<tr>
<td>Unlimited Soft Zone</td>
<td>如果选中，Soft Zone没有边界</td>
</tr>
<tr>
<td>Soft Zone Width</td>
<td>当目标处于此范围内时，会水平移动相机，将目标移回到Dead Zone中。Damping属性会影响摄像机的运动速度。</td>
</tr>
<tr>
<td>Soft Zone Height</td>
<td>当目标处于此范围内时，会垂直移动相机，将目标移回到Dead Zone中。Damping属性会影响摄像机的运动速度。</td>
</tr>
<tr>
<td>Bias X，Y</td>
<td>Soft Zone的中心与目标位置的水平，垂直偏移。</td>
</tr>
<tr>
<td>Center On Active</td>
<td>选中时，虚拟相机激活时会将镜头中心对准物体。不选中时，虚拟相机会将目标物体放置在最近的dead zone边缘。</td>
</tr>
</tbody></table>
<p><img src="https://pic1.zhimg.com/80/v2-5aa8fe7f8dfa09e98c5dc0b640e1ed80_720w.jpg" alt="img"></p>
<p>非常详细不用介绍了</p>
<hr>
<h3 id="Hard-Lock-To-Target"><a href="#Hard-Lock-To-Target" class="headerlink" title="Hard Lock To Target"></a>Hard Lock To Target</h3><p>该算法实现虚拟相机和跟随目标使用相同位置。可以用作第一人称</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/v2-7c16c8bb450721134f136ecea798b622_720w.png" alt="img"></p>
<hr>
<h3 id="Orbital-Transposer"><a href="#Orbital-Transposer" class="headerlink" title="Orbital Transposer"></a>Orbital Transposer</h3><p>这个算法支持相机和目标之间的可变相对位置关系。可以接受玩家的输入，动态的控制相机的位置。</p>
<p>Orbital Transposer引入了一个新的概念叫heading，代表了目标移动的方向或面朝的方向。Orbital Transposer会尝试移动相机，让镜头朝向heading的方向。默认情况下，相机的位置会在target的正后面。也可以通过Heading Bias属性设置。如果给Orbital Transposer添加了输入控制器，玩家就可以控制相机围绕目标旋转。可以设置为Input Manager中的轴，也可以直接用脚本控制。</p>
<p>当Recenter To Target Heading属性选中时，在没有输入时Orbital Transposer可以自动重新居中相机。</p>
<p><img src="https://pic3.zhimg.com/80/v2-21a945ad30e46cfd39c31ebf2d6a036a_720w.jpg" alt="img"></p>
<table>
<thead>
<tr>
<th>变量</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>Binding Mode</td>
<td>解释虚拟摄像机与跟随目标的偏移时要使用的坐标空间。</td>
</tr>
<tr>
<td>Follow Offset</td>
<td>跟随目标时的位置偏移</td>
</tr>
<tr>
<td>X Damping</td>
<td>相机在X轴上移动的阻力系数。较小的值会使相机反应更快。较大的值会使相机的反应速度变慢。每个轴使用不同的设置可以制造出各种类型相机的行为。 绑定模式为Simple Follow With World Up时不可用。</td>
</tr>
<tr>
<td>Y Damping</td>
<td>相机尝试保持 y 轴偏移的响应速度。小数字使相机更灵敏。数字越大，相机响应越慢。</td>
</tr>
<tr>
<td>Z Damping</td>
<td>相机尝试保持 z 轴偏移的响应程度。小数字使相机更灵敏。数字越大，相机响应越慢。</td>
</tr>
<tr>
<td>Yaw Damping</td>
<td>相机在y轴旋转的阻力系数。较小的数字会使相机反应更快。较大的数字会使相机的反应速度变慢。每个轴使用不同的设置可以制造出各种类型相机的行为。Binding Mode为Lock to Target With World Up、Lock to Target No Roll、Lock to Target时可用。</td>
</tr>
<tr>
<td>Pitch Damping</td>
<td>相机在x轴旋转的阻力系数。较小的数字会使相机反应更快。较大的数字会使相机的反应速度变慢。 Binding Mode为Lock to Target No Roll、Lock to Target时可用。</td>
</tr>
<tr>
<td>Roll Damping</td>
<td>相机在z轴旋转的阻力系数。较小的数字会使相机反应更快。较大的数字会使相机的反应速度变慢。 Binding Mode为Lock to Target时可用。</td>
</tr>
<tr>
<td>Heading</td>
<td>指定如何计算跟随目标的航向。</td>
</tr>
<tr>
<td>Recenter To Target Heading</td>
<td>Orbital Transposer __可选地自动将相机重新居中。选中__Recenter To Target Heading 后，Orbital Transposer 会自动将相机移回目标航向。您可以指定在检测到没有用户输入后要等待的时间长度以及重新定位的速度。</td>
</tr>
<tr>
<td>X Axis</td>
<td>航向控制。此处的设置控制相机响应玩家输入的行为。</td>
</tr>
</tbody></table>
<ul>
<li><strong>Binding Mode</strong></li>
</ul>
<ol>
<li>Lock To Target On Assign：本地空间，相机被激活或target赋值时的相对位置。</li>
<li>Lock To Target With World Up：本地空间，保持相机y轴朝上，yaw和roll为0。</li>
<li>Lock To Target No Roll：本地空间，锁定到目标物体，roll为0。</li>
<li>Lock To Target：本地空间，锁定到目标物体 。</li>
<li>World Space：世界空间 。</li>
<li>Simple Follow With World Up：相对于目标的位置，使用相机的本地坐标系，保持相机y轴朝上。</li>
</ol>
<ul>
<li><strong>Heading</strong></li>
</ul>
<p>Definition：计算Follow朝向的方法</p>
<ol>
<li>Position Delta 以根据上次更新和当前帧的目标位置差异来计算航向。</li>
<li>Velocity 以使用目标刚体的速度。 如果目标没有刚体组件，则恢复到位置增量。</li>
<li>Target Forward 以使用目标的本地 Forward 轴作为航向。</li>
<li>World Forward 以使用恒定的世界空间 Forward 作为航向。</li>
<li>Velocity Filter Strength：在定义中使用 Position Delta 或 Velocity 时控制速度的平滑。</li>
</ol>
<p>Bias：相对于航向放置相机的轨道中的角度偏移。 以度为单位。 轴值为 0 会将相机放在此处。</p>
<ul>
<li><strong>Recenter To Target Heading</strong></li>
</ul>
<p>Wait Time：如果在轴上没有检测到用户输入，相机会在重新定位之前等待这么长时间（以秒为单位）。</p>
<p>Recentering Time：重新自动定位居中的过程花费的时间.</p>
<ul>
<li><strong>X Axis</strong></li>
</ul>
<p>Value：当前值</p>
<p>Value Range ：值范围</p>
<p>Wrap：如果选中，则轴在 Min 和 Max 值之间形成一个循环。</p>
<p>Speed ：最大速度（Max Speed）或者最大增加速度（Input Value Gain）</p>
<p>Accel Time ：加速到最高速度所需要的时间</p>
<p>Input Axis Name：在 Unity 输入管理器中指定的此轴的名称。 设置为空字符串以禁用此轴的自动更新。</p>
<p>Input Axis Value：玩家输入轴的值。值0表示没有输入。可以通过编写脚本控制</p>
<p>Invert：是否反转输入的值（取相反数）</p>
<hr>
<h3 id="Tracked-Dolly"><a href="#Tracked-Dolly" class="headerlink" title="Tracked Dolly"></a>Tracked Dolly</h3><p>这个算法可以让相机沿预定路径移动（轨道相机）。使用Path Position属性来指定将虚拟相机放置在路径上的位置。需Follow目标移动。</p>
<p>使用Auto-Dolly模式将虚拟相机移动到路径上最接近Follow目标的位置。启用后，Auto-Dolly会自动将虚拟相机的位置移动到最接近目标的路径上的位置。</p>
<p>提示：使用Auto-Dolly模式时，一定要谨慎选择路径形状。在围绕某个点形成弧形的路径上可能会有问题。举一个极端的例子，考虑一条以Follow目标为中心的完美圆形路径。路径上最接近目标的点变得不稳定，因为圆形路径上的所有点都同样接近目标。在这种情况下，将Follow目标移动很小的距离会导致相机在轨道上移动很大的距离。</p>
<p>注意此算法一定要有<strong>Path</strong></p>
<p><img src="https://pic1.zhimg.com/80/v2-9c3304ff6d05571fa011d37422bb4a9c_720w.jpg" alt="img"></p>
<table>
<thead>
<tr>
<th>变量</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>Path</td>
<td>相机移动的路径。此属性必须引用CinemachinePath或Cinemachine Smooth Path对象。</td>
</tr>
<tr>
<td>Path Position</td>
<td>沿路径放置相机的位置。直接给这个属性作动画或启用Auto-Dolly。这个值以Position Units指定的单位为单位。</td>
</tr>
<tr>
<td>Position Units</td>
<td>路径位置的度量单位。</td>
</tr>
<tr>
<td>Path Offset</td>
<td>相机相对于路径的位置。X 垂直于路径，Y 向上，Z 平行于路径。使用此属性可使相机偏离路径本身</td>
</tr>
<tr>
<td>X ，Y，Z Damping</td>
<td>相机尝试保持 x ，y，z轴偏移的响应程度。小数字使相机更灵敏。数字越大，相机响应越慢。每个轴使用不同的设置可以产生广泛的相机行为。</td>
</tr>
<tr>
<td>Camera Up</td>
<td>如何为虚拟摄像机设置向上矢量。这会影响屏幕构图，因为相机 Aim 算法尝试尊重向上方向。</td>
</tr>
<tr>
<td>Auto Dolly</td>
<td>控制自动轨道位置选择方式。要使用此功能，必须设置Follow目标。</td>
</tr>
</tbody></table>
<ul>
<li><strong>Path</strong></li>
</ul>
<p>Cinemachine中有两种Dolly Path组件：</p>
<ol>
<li><strong>CinemachinePath组件</strong>：每个路径点都可以设置位置、切线和翻转角度，可以最大程度控制路径。但是如果切线设置的不合理，相机在路径上运动时可能会有不稳定的现象。</li>
<li><strong>CinemachineSmoothPath组件</strong>：每个路径点都可以设置位置和翻转角度。组件中会使用Bezier算法来推算路径点之间的位置。虽然SmoothPath不能完全控制路径，但是整个路径会更平滑和连续。<strong>推荐优先使用。可以避免出现，尽管路径位置始终是平滑连续的，但沿路径设置动画时仍然可能会产生不稳定的现象。</strong></li>
</ol>
<hr>
<ul>
<li><strong>额外扩展：什么是Bezier算法和Bezier曲线</strong></li>
</ul>
<p>Bezier曲线</p>
<p><a href="https://www.zhihu.com/question/29565629">怎么理解贝塞尔曲线? - 知乎</a></p>
<p>Bezier算法</p>
<p>详细的算法推导可以在上述链接中观看如何逐阶层运算各个阶的Bezier曲线。</p>
<p>Unity本身自带的<strong>CinemachineSmoothPath</strong>脚本源码，他们是定义一个世界空间路径，由一组路点组成，每个路点都有位置和滚动设置。Bezier 插值在航点之间执行，以获得平滑和连续的路径。 计算距离缓存时，对点之间的路径进行多次采样。路径将通过所有航路点，并且（与 CinemachinePath 不同）保证一阶和二阶连续性。</p>
<p>源码都是运算过程，大家可以自行观看。</p>
<hr>
<ul>
<li><strong>如何创建Dolly Path</strong></li>
</ul>
<ol>
<li>方法一：<strong>如果是在相机上制作路径动画</strong>，可以直接创建Dolly Camera。菜单栏<strong>Cinemachine &gt; Create Dolly Camera with Track</strong>。点击后会创建一个虚拟相机和dolly path。这个Path默认是SmoothPath。虚拟相机会自动设置好Body属性为Dolly Track并且Path属性赋值为创建出来的Dolly path。</li>
<li>方法二：<strong>如果是给GameObject制作路径动画</strong>，可以直接创建Dolly Cart。菜单栏<strong>Cinemachine &gt; Create Dolly Track With Cart</strong>。点击后会创建一个虚拟相机和DollyCart。这个Path默认是SmoothPath。只需要把做路径动画的物体作为Cart的子物体即可。</li>
<li>方法三：直接创建Dolly Path。创建一个空物体，给空物体添加CinemachinePath或CinemachineSmoothPath组件。</li>
</ol>
<ul>
<li><strong>SmoothPath参数详解</strong></li>
</ul>
<p><img src="https://pic3.zhimg.com/80/v2-829c23ce177d2b138965237cc53a7fba_720w.jpg" alt="img"></p>
<p>Resolution： 每个路径点之间采样的次数。Cinemachine在计算路径距离时使用此值来限制粒度。场景视图中路径Gizmo上的交叉线反映了该值。</p>
<p>Appearance ：路径在场景中显示的外观。只在编辑器中生效。</p>
<p>Path Color ：选中路径时的颜色。</p>
<p>Inactive Path Color ：未选中路径的颜色。</p>
<p>Width ：路径轨道的宽度。</p>
<p>Looped ：选中后，路径会首尾相连。</p>
<p>Path Length ：整个路径长度，这个数据是只读的，根据所有路径点计算出来的。</p>
<p>Waypoints ：定义路径点的列表。</p>
<p>Position ：位置，在路径局部空间中的位置（即相对于路径GameObject本身的变换）</p>
<p>Roll* ：翻转角度。朝向的其他轴方向是从切线和世界的向上向量推断出来的。</p>
<ul>
<li><strong>Dolly Cart参数</strong></li>
</ul>
<p><strong>（只有Create Dolly Track With Cart才有）详解</strong>：</p>
<p>这是限制在 CinemachinePath的移动镜头。 它可用于为路径上的任何对象设置动画，或作为 Cinemachine 虚拟摄像机的跟随目标。这个组件就是把当前所附着的GameObject沿着path移动。</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/v2-d6477528a4dc1150f6bddb5b6c31354d_720w.jpg" alt="img"></p>
<p>Speed ：移动物体的速度。基于Position Unit设置的单位。如果速度不为0，则小车会根据速度自动移动。</p>
<p>Position :当前物体所处的位置。基于Position Unit设置的单位</p>
<hr>
<ul>
<li><strong>Position Units</strong></li>
</ul>
<p>Path Units ：使用路径点的序号。比如0代表第一个路径点，1代表第二个路径点。</p>
<p>Distance ：使用路径的总长度。</p>
<p>Normalized： 归一化。0代表路径最开始的位置，1代表路径结束的位置。</p>
<ul>
<li><strong>Camera Up</strong></li>
</ul>
<ol>
<li>Default：不修改虚拟相机up方向，使用Cinemachine Brain的Override的World Up</li>
<li>Path：使用路径当前的向上向量</li>
<li>Path No Roll：使用路径节点当前的向上向量，Roll*为0</li>
<li>Follow Target：使用跟随目标的向上向量</li>
<li>Follow Target No Roll：使用跟随目标的向上向量，Roll*为0</li>
</ol>
<p>不要修改虚拟摄像机的向上方向。 相反，使用 Cinemachine Brain 中的 World Up Override 属性</p>
<ul>
<li><strong>Auto Dolly</strong></li>
</ul>
<p>Enabled：选中使用自动dolly，注意：这对性能可能会有一些影响，却决于Search Resolution</p>
<p>Position Offset：从路径最近点到跟随目标的偏移量</p>
<p>Search Radius：对当前路径点的n个单位点进行搜索，如果为0则为整条路径所有点</p>
<p>Search Resolution：Cinemachine 通过将片段分成许多直线来搜索片段。 数字越大，结果越准确。 但是，对于更高的数字，性能会成比例地变慢。</p>
<hr>
<h3 id="Transposer"><a href="#Transposer" class="headerlink" title="Transposer"></a>Transposer</h3><p>这个算法将虚拟相机的坐标与跟随目标的坐标有固定的偏移量来进行跟随，也可以使用Damping属性</p>
<p>简单来说就是虚拟相机跟目标会有固定的位置差偏移</p>
<p><img src="https://pic4.zhimg.com/80/v2-e26da735d448fe7263dd67a2b6aa0b93_720w.jpg" alt="img"></p>
<p>根据BindingMode的不同选择会有不同参数的Damping可以调整</p>
<p>Binding Mode 各种模式可以参考上面Orbital Transposer 的详细介绍</p>
]]></content>
      <categories>
        <category>unity</category>
      </categories>
      <tags>
        <tag>unity</tag>
        <tag>Cinemachine Camera</tag>
      </tags>
  </entry>
  <entry>
    <title>使用vscode开发unity项目</title>
    <url>/Blog/2022/07/12/%E4%BD%BF%E7%94%A8vscode%E5%BC%80%E5%8F%91unity%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<p><strong>仅做记录</strong></p>
<h3 id="vscode需要的插件如下："><a href="#vscode需要的插件如下：" class="headerlink" title="vscode需要的插件如下："></a>vscode需要的插件如下：</h3><ul>
<li>Auto-Using for C#，自动添加引用</li>
<li>Unity Code Snippets，unity代码补全</li>
<li>c#，必备</li>
<li>C# XML Documentation Comments，三下&#x2F;&#x2F;&#x2F;实现xm注释l</li>
<li>Code Runner，运行代码</li>
<li>GitHub Theme；eppz! (C# theme for Unity)；Gruvbox Theme；（三款编辑器皮肤</li>
</ul>
<p>期间会提示安装.net framework，sdk包。</p>
<h4 id="vscode字体设置"><a href="#vscode字体设置" class="headerlink" title="vscode字体设置:"></a>vscode字体设置:</h4><p>“editor.fontFamily”: “Fira Code Medium, ‘Courier New’, monospace”</p>
<h3 id="unity中打开edit-gt-Preferences-gt-External-Tools-选中vscode，记得勾选下面前两行。"><a href="#unity中打开edit-gt-Preferences-gt-External-Tools-选中vscode，记得勾选下面前两行。" class="headerlink" title="unity中打开edit-&gt;Preferences-&gt;External Tools,选中vscode，记得勾选下面前两行。"></a>unity中打开edit-&gt;Preferences-&gt;External Tools,选中vscode，记得勾选下面前两行。</h3><p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220712152947737.png" alt="image-20220712152947737"></p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220712153037736.png" alt="image-20220712153037736"></p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>unity</tag>
        <tag>VsCode</tag>
      </tags>
  </entry>
  <entry>
    <title>unity平台跳跃控制器</title>
    <url>/Blog/2022/07/08/unity%E5%B9%B3%E5%8F%B0%E8%B7%B3%E8%B7%83%E6%8E%A7%E5%88%B6%E5%99%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\Blog\assets\css\APlayer.min.css"><script src="\Blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\Blog\assets\js\Meting.min.js"></script><p>教程来自b站阿严:<a href="https://www.bilibili.com/video/BV1rL4y1W7KH">https://www.bilibili.com/video/BV1rL4y1W7KH</a></p>
<hr>
<p><strong>成果展示:</strong></p>
<p>【[unity]平台跳跃类demo】 <a href="https://www.bilibili.com/video/BV1AK411Q7ry?share_source=copy_web&amp;vd_source=644eac695af0d52dcffdec474d1423b1">https://www.bilibili.com/video/BV1AK411Q7ry?share_source=copy_web&amp;vd_source=644eac695af0d52dcffdec474d1423b1</a></p>
<iframe src="//player.bilibili.com/player.html?bvid=BV1AK411Q7ry&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<h2 id="一-项目的创建和管理插件"><a href="#一-项目的创建和管理插件" class="headerlink" title="一 项目的创建和管理插件"></a>一 项目的创建和管理插件</h2><p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220708151216150.png" alt="image-20220708151216150"></p>
<p>删除不需要的插件，安装需要的插件，删除后插件内容：</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220708151839520.png" alt="image-20220708151839520"></p>
<h3 id="1-1-安装："><a href="#1-1-安装：" class="headerlink" title="1.1 安装："></a>1.1 安装：</h3><ul>
<li>Cinemachine，虚拟相机插件。</li>
<li>Post Processing，后处理插件。</li>
<li>Input System，新的输入系统插件。</li>
</ul>
<h3 id="1-2-安装完成后图"><a href="#1-2-安装完成后图" class="headerlink" title="1.2 安装完成后图:"></a>1.2 安装完成后图:</h3><p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220708152529919.png" alt="image-20220708152529919"></p>
<h3 id="1-3-导入资源包"><a href="#1-3-导入资源包" class="headerlink" title="1.3 导入资源包"></a>1.3 导入资源包</h3><p>这里我使用的是自己在unity商店买的资源包，替换了unity酱，想要做点不一样的。</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220727162106523.png" alt="image-20220727162106523"></p>
<hr>
<h2 id="二-状态机系统"><a href="#二-状态机系统" class="headerlink" title="二 状态机系统"></a>二 状态机系统</h2><p>创建接口文件和状态机类</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220708172046551.png" alt="image-20220708172046551"></p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220708172412575.png" alt="image-20220708172412575"></p>
<h3 id="2-1-Istate接口"><a href="#2-1-Istate接口" class="headerlink" title="2.1 Istate接口"></a>2.1 Istate接口</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IState</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Enter</span>()</span>;<span class="comment">//状态进入</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Exit</span>()</span>;<span class="comment">//状态退出</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">LogicUpdate</span>()</span>;<span class="comment">//状态逻辑更新</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">PhysicUpdate</span>()</span>;<span class="comment">//状态物理更新</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-2-StateMachine类"><a href="#2-2-StateMachine类" class="headerlink" title="2.2 StateMachine类"></a>2.2 StateMachine类</h3><p>作用:</p>
<ul>
<li>持有所有状态,并且进行管理和切换;</li>
<li>负责当前状态的更新.</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StateMachine</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//1、持有所有状态,并且进行管理和切换;2、负责当前状态的更新</span></span><br><span class="line">  IState currentState;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//更新状态逻辑</span></span><br><span class="line">    currentState.LogicUpdate();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">FixedUpdate</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//更新物理</span></span><br><span class="line">    currentState.PhysicUpdate();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">SwitchOn</span>(<span class="params">IState newState</span>)</span></span><br><span class="line">  &#123;<span class="comment">//状态开启</span></span><br><span class="line">   <span class="comment">//新状态赋值给当前状态,然后启动</span></span><br><span class="line">    currentState = newState;</span><br><span class="line">    currentState.Enter();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SwitchState</span>(<span class="params">IState newState</span>)</span></span><br><span class="line">  &#123;<span class="comment">//切换状态</span></span><br><span class="line">   <span class="comment">//先关闭状态,然后新状态赋值给当前状态,启动</span></span><br><span class="line">    currentState.Exit();</span><br><span class="line">    SwitchOn(newState);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="三-扩展状态机系统"><a href="#三-扩展状态机系统" class="headerlink" title="三 扩展状态机系统"></a>三 扩展状态机系统</h2><p><strong>创建PlayerStates(玩家状态)并初始化</strong></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PlayerState</span> : <span class="title">ScriptableObject</span>, <span class="title">IState</span></span><br><span class="line">&#123;<span class="comment">//玩家状态类</span></span><br><span class="line">  Animator animator;<span class="comment">//动画器</span></span><br><span class="line">  PlayerStateMachine stateMachine;<span class="comment">//玩家状态机类</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Initialize</span>(<span class="params">Animator animator, PlayerStateMachine stateMachine</span>)</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">this</span>.animator = animator;</span><br><span class="line">    <span class="keyword">this</span>.stateMachine = stateMachine;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Enter</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Exit</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">LogicUpdate</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PhysicUpdate</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>PlayerStatesMachine(玩家状态机)</strong></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PlayerStateMachine</span> : <span class="title">StateMachine</span></span><br><span class="line">&#123;<span class="comment">//玩家状态机</span></span><br><span class="line">  Animator animator;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    animator = GetComponentInChildren&lt;Animator&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//可以在此初始化 玩家状态</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-1-状态机系统继承关系图"><a href="#3-1-状态机系统继承关系图" class="headerlink" title="3.1 状态机系统继承关系图"></a>3.1 状态机系统继承关系图</h3><p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220708193345419.png" alt="image-20220708193345419"></p>
<h3 id="3-2-使用两种方法实现角色动画"><a href="#3-2-使用两种方法实现角色动画" class="headerlink" title="3.2 使用两种方法实现角色动画"></a>3.2 使用两种方法实现角色动画</h3><h4 id="3-2-1、常规方法-不使用状态机"><a href="#3-2-1、常规方法-不使用状态机" class="headerlink" title="3.2.1、常规方法(不使用状态机)"></a>3.2.1、常规方法(不使用状态机)</h4><p><strong>构建基础状态机系统,创建动画控制器</strong></p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220715153516317.png" alt="image-20220715153516317"></p>
<p><strong>拖到玩家对象</strong></p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220715153636233.png" alt="image-20220715153636233"></p>
<p><strong>将动画拖入控制器</strong></p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220715153742399.png" alt="image-20220715153742399"></p>
<p><strong>更改默认状态</strong></p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220715154429486.png" alt="image-20220715154429486"></p>
<p><strong>然后在player对象添加玩家控制器脚本</strong></p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220715155527938.png" alt="image-20220715155527938"></p>
<p><strong>需求分析:</strong></p>
<ul>
<li>按下A&#x2F;D键时播放跑步动画</li>
<li>松开按键回到空闲动画</li>
</ul>
<p><strong>实现方式：</strong></p>
<ul>
<li>获取键盘的输入信号(Input System)</li>
<li>播放特定动画(Animator)</li>
</ul>
<p><strong>PlayerController代码如下：</strong></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.InputSystem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PlayerController</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">  Animator animator;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    animator = GetComponentInChildren&lt;Animator&gt;();<span class="comment">//获取动画控制组件</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//按住当前键盘的a或者d键</span></span><br><span class="line">    <span class="comment">//if(Input.GetKey(KeyCode.A)|| Input.GetKey(KeyCode.D))</span></span><br><span class="line">    <span class="keyword">if</span> (Keyboard.current.aKey.isPressed || Keyboard.current.dKey.isPressed)</span><br><span class="line">    &#123;</span><br><span class="line">      animator.Play(<span class="string">&quot;Run&quot;</span>);<span class="comment">//播放动画器中特定动画</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span><span class="comment">//松开按键时</span></span><br><span class="line">    &#123;</span><br><span class="line">      animator.Play(<span class="string">&quot;Idle&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>并且同时更改动画器中动画的名字，以匹配代码中的命名</strong></p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220715161313196.png" alt="image-20220715161313196"></p>
<p><strong>全部改完效果如图：</strong></p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220715161513401.png" alt="image-20220715161513401"></p>
<h4 id="3-2-2、通过状态机实现动画状态切换"><a href="#3-2-2、通过状态机实现动画状态切换" class="headerlink" title="3.2.2、通过状态机实现动画状态切换"></a>3.2.2、通过状态机实现动画状态切换</h4><p><strong>首先将状态机脚本添加到玩家上</strong></p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220715162041929.png" alt="image-20220715162041929"></p>
<p><strong>其次在Player State文件夹中创建idle和run状态脚本</strong></p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220719030021036.png" alt="image-20220719030021036"></p>
<p>皆继承于PlayerState</p>
<p><code>[CreateAssetMenu(menuName = &quot;Data/StateMachine/PlayerState/Idle&quot;, fileName = &quot;PlayerState_Idle&quot;)]</code></p>
<p>这条代码将代码暴露在编辑器中，可在文件夹中创建可程序化对象文件</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220715162722895.png" alt="image-20220715162722895"></p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220715163129842.png" alt="image-20220715163129842"></p>
<p><strong>举例PlayerState_Idle代码如下:</strong></p>
<p><strong>重写状态函数,更新状态</strong></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.InputSystem;</span><br><span class="line"></span><br><span class="line">[<span class="meta">CreateAssetMenu(menuName = <span class="string">&quot;Data/StateMachine/PlayerState/Idle&quot;</span>, fileName = <span class="string">&quot;PlayerState_Idle&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PlayerState_Idle</span> : <span class="title">PlayerState</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Enter</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    animator.Play(<span class="string">&quot;Idle&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">LogicUpdate</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (Keyboard.current.aKey.isPressed || Keyboard.current.dKey.isPressed)</span><br><span class="line">    &#123;</span><br><span class="line">      stateMachine.SwitchState(stateMachine.runState);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>PlayerState_Idle脚本代码同理。</strong></p>
<p><strong>状态机模式将不同状态分开来处理,这个模式中只需要思考,当前状态如何切换到下一状态,而不再需要同时考虑另一个状态的逻辑问题。</strong></p>
<p><strong>(例如需要落地后才可起跳，常规方法需要使用很多Boolean值来判断状态，而状态机模式只需要在各自状态中实现切换即可)</strong></p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220719042545564.png" alt="image-20220719042545564"></p>
<h3 id="3-3-状态机模式优缺点"><a href="#3-3-状态机模式优缺点" class="headerlink" title="3.3 状态机模式优缺点"></a>3.3 状态机模式优缺点</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul>
<li>逻辑分开到各个状态中处理，不需要考虑状态之间的约束，让思路更清楚。</li>
<li>代码性能提升</li>
</ul>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li>文件数量增加</li>
<li>代码重复</li>
</ul>
<h3 id="3-4-继续完善状态机功能"><a href="#3-4-继续完善状态机功能" class="headerlink" title="3.4 继续完善状态机功能"></a>3.4 继续完善状态机功能</h3><p><strong>打开玩家状态机脚本PlayerStateMachine</strong></p>
<p>目前所有新状态都需要新建初始化,是否可以声明一个鸡和然后将所有状态都扔进去呢?当然可以。</p>
<p><strong>首先修改玩家状态机类的代码，(注释中是原代码)</strong></p>
<p>我们新建一个states数组，通过遍历获取玩家具体状态。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PlayerStateMachine</span> : <span class="title">StateMachine</span></span><br><span class="line">&#123;<span class="comment">//玩家状态机</span></span><br><span class="line">  Animator animator;</span><br><span class="line">  <span class="comment">//public PlayerState_Idle idleState;</span></span><br><span class="line">  <span class="comment">//public PlayerState_Run runState;</span></span><br><span class="line">    </span><br><span class="line">  [<span class="meta">SerializeField</span>] PlayerState[] states;<span class="comment">//持有所有状态</span></span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    animator = GetComponentInChildren&lt;Animator&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//可以在此初始化 玩家状态</span></span><br><span class="line">    <span class="comment">//idleState.Initialize(animator, this);</span></span><br><span class="line">    <span class="comment">//runState.Initialize(animator, this);</span></span><br><span class="line">    <span class="keyword">foreach</span> (PlayerState state <span class="keyword">in</span> states)</span><br><span class="line">    &#123;</span><br><span class="line">      state.Initialize(animator, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    SwitchOn(【idleState】);<span class="comment">//默认idle，【idleState】报错，需要通过字典</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这么做<code>idleState</code>会出现报错，</p>
<p>这时需要在<strong>父类创建字典</strong>，声明一个<strong>键为System.Type值为IState类型</strong>的字典</p>
<p>然后在玩家状态机类PlayerStateMachine中的状态遍历循环中，给它赋值。</p>
<p>最后就可以通过键来获取状态。以下是父类，也就是状态+6机类StateMachine中代码：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StateMachine</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//1、持有所有状态,并且进行管理和切换;2、负责当前状态的更新</span></span><br><span class="line">  IState currentState;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//新建一个 键为System.Type 值为IState类型的字典</span></span><br><span class="line">  <span class="keyword">protected</span> Dictionary&lt;System.Type, IState&gt; stateTbale;</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//更新状态逻辑</span></span><br><span class="line">    currentState.LogicUpdate();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">FixedUpdate</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//更新物理</span></span><br><span class="line">    currentState.PhysicUpdate();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">SwitchOn</span>(<span class="params">IState newState</span>)</span></span><br><span class="line">  &#123;<span class="comment">//状态开启</span></span><br><span class="line">   <span class="comment">//新状态赋值给当前状态,然后启动</span></span><br><span class="line">    currentState = newState;</span><br><span class="line">    currentState.Enter();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SwitchState</span>(<span class="params">IState newState</span>)</span></span><br><span class="line">  &#123;<span class="comment">//切换状态</span></span><br><span class="line">   <span class="comment">//先关闭状态,然后新状态赋值给当前状态,启动</span></span><br><span class="line">    currentState.Exit();</span><br><span class="line">    SwitchOn(newState);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接着在玩家状态机类awake()中初始化，更改后的玩家状态机类代码如下：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PlayerStateMachine</span> : <span class="title">StateMachine</span></span><br><span class="line">&#123;<span class="comment">//玩家状态机</span></span><br><span class="line">  Animator animator;</span><br><span class="line">  <span class="comment">//public PlayerState_Idle idleState;</span></span><br><span class="line">  <span class="comment">//public PlayerState_Run runState;</span></span><br><span class="line"></span><br><span class="line">  [<span class="meta">SerializeField</span>] PlayerState[] states;<span class="comment">//持有所有状态</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//获取动画</span></span><br><span class="line">    animator = GetComponentInChildren&lt;Animator&gt;();</span><br><span class="line">    <span class="comment">//字典长度为状态数组长度</span></span><br><span class="line">    stateTbale = <span class="keyword">new</span> Dictionary&lt;System.Type, IState&gt;(states.Length);</span><br><span class="line">    <span class="comment">//可以在此初始化 玩家状态</span></span><br><span class="line">    <span class="comment">//idleState.Initialize(animator, this);</span></span><br><span class="line">    <span class="comment">//runState.Initialize(animator, this);</span></span><br><span class="line">    <span class="keyword">foreach</span> (PlayerState state <span class="keyword">in</span> states)</span><br><span class="line">    &#123;</span><br><span class="line">      state.Initialize(animator, <span class="keyword">this</span>);</span><br><span class="line">      stateTbale.Add(state.GetType(), state);<span class="comment">//朝字典添加数据</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    Debug.Log(<span class="keyword">typeof</span>(PlayerState_Idle));</span><br><span class="line">    <span class="comment">//在字典中传入PlayerState_Idle的类型</span></span><br><span class="line">    <span class="comment">//默认idle</span></span><br><span class="line">    SwitchOn(stateTbale[<span class="keyword">typeof</span>(PlayerState_Idle)]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接着会遇到两个报错：PlayerState_Run和PlayerState_Idle类中的状态切换里的变量不存在了。</p>
<p>我们需要回到状态机主类StateMachine，重载状态切换函数SwitchState。将变量类型改为字典需要的键(System.Type类)对比如下:</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SwitchState</span>(<span class="params">IState newState</span>)</span></span><br><span class="line"> &#123;<span class="comment">//切换状态</span></span><br><span class="line">  <span class="comment">//先关闭状态,然后新状态赋值给当前状态,启动</span></span><br><span class="line">   currentState.Exit();</span><br><span class="line">   SwitchOn(newState);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SwitchState</span>(<span class="params">System.Type newStateType</span>)</span></span><br><span class="line"> &#123;<span class="comment">//切换状态</span></span><br><span class="line">  <span class="comment">//通过字典获取状态，再调用上面那个SwitchState()；</span></span><br><span class="line">   SwitchState(stateTbale[newStateType]);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>这样在报错的PlayerState_Run和PlayerState_Idle中修改相应的变量即可：</p>
<p><code>stateMachine.SwitchState(runState);</code></p>
<p>改成了</p>
<p><code>stateMachine.SwitchState(typeof(PlayerState_Run));</code></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.InputSystem;</span><br><span class="line"></span><br><span class="line">[<span class="meta">CreateAssetMenu(menuName = <span class="string">&quot;Data/StateMachine/PlayerState/Idle&quot;</span>, fileName = <span class="string">&quot;PlayerState_Idle&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PlayerState_Idle</span> : <span class="title">PlayerState</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Enter</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    animator.Play(<span class="string">&quot;Idle&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">LogicUpdate</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (Keyboard.current.aKey.isPressed || Keyboard.current.dKey.isPressed)</span><br><span class="line">    &#123;</span><br><span class="line">      stateMachine.SwitchState(<span class="keyword">typeof</span>(PlayerState_Run));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="四-Input-System输入系统"><a href="#四-Input-System输入系统" class="headerlink" title="四 Input System输入系统"></a>四 Input System输入系统</h2><p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220720175109099.png" alt="image-20220720175109099"></p>
<p>如果需要某个功能对应不同按键都可触发,使用InputSystem会更加方便。不使用输入系统的话需要多个判断语句实现。</p>
<h3 id="4-1-新建Input-Actions"><a href="#4-1-新建Input-Actions" class="headerlink" title="4.1 新建Input Actions"></a>4.1 新建Input Actions</h3><p><strong>命名为PlayerInputActions,玩家输入动作</strong></p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220722155719378.png" alt="image-20220722155719378"></p>
<h4 id="4-1-1、创建移动动作"><a href="#4-1-1、创建移动动作" class="headerlink" title="4.1.1、创建移动动作"></a>4.1.1、创建移动动作</h4><p><strong>新建GamePlay动作表,重命名动作名为Axes 轴。右边动作类型选value，值类型选二维向量</strong></p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220722160205417.png" alt="image-20220722160205417"></p>
<p><strong>删除默认的按键，添加预设的上下左右</strong></p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220727162430682.png" alt="image-20220727162430682"></p>
<p><strong>通过listen绑定按键</strong></p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220727162634092.png" alt="image-20220727162634092"></p>
<p><strong>手柄和键盘的模式都改成digital，这样手柄将和键盘一样xy取值只有0,-1,1</strong></p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220727163045286.png" alt="image-20220727163045286"></p>
<h4 id="4-1-2、创建跳跃动作"><a href="#4-1-2、创建跳跃动作" class="headerlink" title="4.1.2、创建跳跃动作"></a>4.1.2、创建跳跃动作</h4><p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220727163504217.png" alt="image-20220727163504217"></p>
<p><strong>记得保存资产</strong></p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220727163532695.png" alt="image-20220727163532695"></p>
<h4 id="4-1-3、生成c-文件"><a href="#4-1-3、生成c-文件" class="headerlink" title="4.1.3、生成c#文件"></a>4.1.3、生成c#文件</h4><p><strong>更改文件位置</strong></p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220727163837612.png" alt="image-20220727163837612"></p>
<h3 id="4-2-初始化玩家输入"><a href="#4-2-初始化玩家输入" class="headerlink" title="4.2 初始化玩家输入"></a>4.2 初始化玩家输入</h3><h4 id="4-2-1、新建脚本PlayerInput-玩家输入类，并且添加到player对象中。"><a href="#4-2-1、新建脚本PlayerInput-玩家输入类，并且添加到player对象中。" class="headerlink" title="4.2.1、新建脚本PlayerInput 玩家输入类，并且添加到player对象中。"></a>4.2.1、新建脚本PlayerInput 玩家输入类，并且添加到player对象中。</h4><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PlayerInput</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;<span class="comment">//玩家输入类</span></span><br><span class="line"></span><br><span class="line">  PlayerInputActions playerInputAction;<span class="comment">//inputsystem生成的c#文件</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">bool</span> PlayerMove =&gt; AxisX != <span class="number">0f</span>;<span class="comment">//通过判断x轴是否为0,判断是否移动</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//获取轴的值 x,y</span></span><br><span class="line">  Vector2 axes =&gt; playerInputAction.GamePlay.Axes.ReadValue&lt;Vector2&gt;();</span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">float</span> AxisX =&gt; axes.x;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//WasPressedThisFrame()是否按下</span></span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">bool</span> playerjump =&gt; 		playerInputAction.GamePlay.Jump.WasPressedThisFrame();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//WasReleasedThisFrame()是否松开按键</span></span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">bool</span> playerstopJump =&gt; playerInputAction.GamePlay.Jump.WasReleasedThisFrame();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    playerInputAction = <span class="keyword">new</span> PlayerInputActions();<span class="comment">//初始化</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">EnableGameplayInputs</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//启用gameplay动作表（inputsystem中自带的方法，通过.GamePlay.Enable()启动）</span></span><br><span class="line">    playerInputAction.GamePlay.Enable();</span><br><span class="line">    Cursor.lockState = CursorLockMode.Locked;<span class="comment">//鼠标设置为锁定模式 </span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-2-2、更改PlayerState-玩家状态脚本，加入玩家输入-初始化"><a href="#4-2-2、更改PlayerState-玩家状态脚本，加入玩家输入-初始化" class="headerlink" title="4.2.2、更改PlayerState 玩家状态脚本，加入玩家输入 初始化"></a>4.2.2、更改PlayerState 玩家状态脚本，加入玩家输入 初始化</h4><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PlayerState</span> : <span class="title">ScriptableObject</span>, <span class="title">IState</span></span><br><span class="line">&#123;<span class="comment">//玩家状态类</span></span><br><span class="line">  <span class="keyword">protected</span> Animator animator;<span class="comment">//动画器</span></span><br><span class="line">  <span class="keyword">protected</span> PlayerInput input;<span class="comment">//玩家输入类</span></span><br><span class="line">  <span class="keyword">protected</span> PlayerStateMachine stateMachine;<span class="comment">//玩家状态机类</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Initialize</span>(<span class="params">Animator animator, PlayerInput input, PlayerStateMachine stateMachine</span>)</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//初始化状态动画,玩家输入类，玩家状态机</span></span><br><span class="line">    <span class="keyword">this</span>.animator = animator;</span><br><span class="line">    <span class="keyword">this</span>.input = input;</span><br><span class="line">    <span class="keyword">this</span>.stateMachine = stateMachine;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Enter</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Exit</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">LogicUpdate</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PhysicUpdate</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-2-3、修改PlayerState-Idle和PlayerState-Run脚本"><a href="#4-2-3、修改PlayerState-Idle和PlayerState-Run脚本" class="headerlink" title="4.2.3、修改PlayerState_Idle和PlayerState_Run脚本"></a>4.2.3、修改PlayerState_Idle和PlayerState_Run脚本</h4><p>因为在PlayerInput中,新建了一个变量表示玩家是否移动。原来判断玩家是否在移动的语句优化如下：</p>
<p><strong>旧版通过检测按键a或者d判断:</strong></p>
<p><code>if (Keyboard.current.aKey.isPressed || Keyboard.current.dKey.isPressed)</code></p>
<p><strong>新版判断输入事件x轴是否为0，得出玩家是否正移动:</strong></p>
<p><code>if (input.PlayerMove)</code></p>
<h4 id="4-2-4、在PlayerStateMachine-玩家状态机类中初始化玩家输入"><a href="#4-2-4、在PlayerStateMachine-玩家状态机类中初始化玩家输入" class="headerlink" title="4.2.4、在PlayerStateMachine 玩家状态机类中初始化玩家输入"></a>4.2.4、在PlayerStateMachine 玩家状态机类中初始化玩家输入</h4><p><strong>部分代码如下：</strong></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">PlayerInput input;<span class="comment">//玩家输入</span></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//获取动画</span></span><br><span class="line">    animator = GetComponentInChildren&lt;Animator&gt;();</span><br><span class="line">    <span class="comment">//获取玩家输入</span></span><br><span class="line">    input = GetComponent&lt;PlayerInput&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//字典长度为状态数组长度</span></span><br><span class="line">    stateTbale = <span class="keyword">new</span> Dictionary&lt;System.Type, IState&gt;(states.Length);</span><br><span class="line">    <span class="comment">//可以在此初始化 玩家状态</span></span><br><span class="line">    <span class="comment">//idleState.Initialize(animator, this);</span></span><br><span class="line">    <span class="comment">//runState.Initialize(animator, this);</span></span><br><span class="line">    <span class="keyword">foreach</span> (PlayerState state <span class="keyword">in</span> states)</span><br><span class="line">    &#123;</span><br><span class="line">      state.Initialize(animator, input, <span class="keyword">this</span>);</span><br><span class="line">      stateTbale.Add(state.GetType(), state);<span class="comment">//朝字典添加数据</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-2-5、在PlayerController-玩家控制器类中添加玩家输入，并且启用动作表"><a href="#4-2-5、在PlayerController-玩家控制器类中添加玩家输入，并且启用动作表" class="headerlink" title="4.2.5、在PlayerController 玩家控制器类中添加玩家输入，并且启用动作表"></a>4.2.5、在PlayerController 玩家控制器类中添加玩家输入，并且启用动作表</h4><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PlayerController</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//玩家控制器</span></span><br><span class="line">  PlayerInput input;<span class="comment">//玩家输入类</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    input = GetComponent&lt;PlayerInput&gt;();<span class="comment">//获取对象</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    input.EnableGameplayInputs();<span class="comment">//启用动作表</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">region</span> 常规方法(不使用状态机)...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="五-玩家移动、转向"><a href="#五-玩家移动、转向" class="headerlink" title="五 玩家移动、转向"></a>五 玩家移动、转向</h2><h3 id="5-1-玩家移动功能实现"><a href="#5-1-玩家移动功能实现" class="headerlink" title="5.1 玩家移动功能实现"></a>5.1 玩家移动功能实现</h3><p>分析:通过刚体模拟物体运动，需要获取player身上的刚体组件。</p>
<p>将玩家移动功能写在<strong>PlayerController玩家控制器</strong>脚本中。</p>
<p>新建刚体变量，获取实例，创建了三个改变刚体速度的函数</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.InputSystem;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PlayerController</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;<span class="comment">//玩家控制器</span></span><br><span class="line">  PlayerInput input;<span class="comment">//玩家输入类</span></span><br><span class="line">  Rigidbody rigidBody;<span class="comment">//刚体类引用变量</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    input = GetComponent&lt;PlayerInput&gt;();<span class="comment">//获取对象实例</span></span><br><span class="line">    rigidBody = GetComponent&lt;Rigidbody&gt;();<span class="comment">//获取刚体组件实例</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    input.EnableGameplayInputs();<span class="comment">//启用动作表</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetVelocity</span>(<span class="params">Vector3 velocity</span>)</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//直接修改刚体速度</span></span><br><span class="line">    rigidBody.velocity = velocity;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetVelocityX</span>(<span class="params"><span class="built_in">float</span> velocityX</span>)</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//将刚体x轴的速度设置为参数的值,y不变。左右移动</span></span><br><span class="line">    rigidBody.velocity = <span class="keyword">new</span> Vector3(velocityX, rigidBody.velocity.y);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetVelocityY</span>(<span class="params"><span class="built_in">float</span> velocityY</span>)</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//将刚体y轴的速度设置为参数的值,x不变。跳跃或者下落</span></span><br><span class="line">    rigidBody.velocity = <span class="keyword">new</span> Vector3(rigidBody.velocity.x, velocityY);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">#<span class="keyword">region</span> 常规方法(不使用状态机)...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>PlayerState 玩家状态类</strong>中添加玩家控制器类，并初始化(部分代码)</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> PlayerController player;<span class="comment">//玩家控制器</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Initialize</span>(<span class="params">PlayerController player, Animator animator, PlayerInput input, PlayerStateMachine stateMachine</span>)</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//初始化玩家控制器，状态动画,玩家输入类，玩家状态机</span></span><br><span class="line">    <span class="keyword">this</span>.player = player;</span><br><span class="line">    <span class="keyword">this</span>.animator = animator;</span><br><span class="line">    <span class="keyword">this</span>.input = input;</span><br><span class="line">    <span class="keyword">this</span>.stateMachine = stateMachine;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p><strong>PlayerStateMachine 玩家状态机类</strong>一起更新</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PlayerStateMachine</span> : <span class="title">StateMachine</span></span><br><span class="line">&#123;<span class="comment">//玩家状态机</span></span><br><span class="line"></span><br><span class="line">  Animator animator;<span class="comment">//动画</span></span><br><span class="line">  PlayerInput input;<span class="comment">//玩家输入</span></span><br><span class="line">  PlayerController playerController;<span class="comment">//玩家状态机</span></span><br><span class="line"></span><br><span class="line">  [<span class="meta">SerializeField</span>] PlayerState[] states;<span class="comment">//持有所有状态</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//获取动画</span></span><br><span class="line">    animator = GetComponentInChildren&lt;Animator&gt;();</span><br><span class="line">    <span class="comment">//获取玩家输入</span></span><br><span class="line">    input = GetComponent&lt;PlayerInput&gt;();</span><br><span class="line">    <span class="comment">//获取玩家控制器</span></span><br><span class="line">    playerController = GetComponent&lt;PlayerController&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//字典长度为状态数组长度</span></span><br><span class="line">    stateTbale = <span class="keyword">new</span> Dictionary&lt;System.Type, IState&gt;(states.Length);</span><br><span class="line">    <span class="comment">//可以在此初始化 玩家状态</span></span><br><span class="line">    <span class="comment">//idleState.Initialize(animator, this);</span></span><br><span class="line">    <span class="comment">//runState.Initialize(animator, this);</span></span><br><span class="line">    <span class="keyword">foreach</span> (PlayerState state <span class="keyword">in</span> states)</span><br><span class="line">    &#123;</span><br><span class="line">      state.Initialize(playerController, animator, input, <span class="keyword">this</span>);</span><br><span class="line">      stateTbale.Add(state.GetType(), state);<span class="comment">//朝字典添加数据</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Debug.Log(typeof(PlayerState_Idle));</span></span><br><span class="line">    <span class="comment">//在字典中传入PlayerState_Idle的类型</span></span><br><span class="line">    <span class="comment">//默认idle</span></span><br><span class="line">    SwitchOn(stateTbale[<span class="keyword">typeof</span>(PlayerState_Idle)]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在<strong>PlayerState_Run 跑步状态脚本</strong>中**重写PhysicUpdate()**方法实现玩家移动</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line">[<span class="meta">CreateAssetMenu(menuName = <span class="string">&quot;Data/StateMachine/PlayerState/Run&quot;</span>, fileName = <span class="string">&quot;PlayerState_Run&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PlayerState_Run</span> : <span class="title">PlayerState</span></span><br><span class="line">&#123;</span><br><span class="line">  [<span class="meta">SerializeField</span>] <span class="built_in">float</span> runSpeed = <span class="number">5f</span>;<span class="comment">//跑步速度</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Enter</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    animator.Play(<span class="string">&quot;Run&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">LogicUpdate</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (!input.PlayerMove)</span><br><span class="line">    &#123;<span class="comment">//if玩家没移动输入 则切换状态为idle</span></span><br><span class="line">      stateMachine.SwitchState(<span class="keyword">typeof</span>(PlayerState_Idle));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">PhysicUpdate</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    player.SetVelocityX(runSpeed);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>新建变量<strong>runSpeed 跑步速度</strong> 将它序列化，已暴露在编辑器中，至此移动功能实现。</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220729025838477.png" alt="image-20220729025838477"></p>
<h3 id="5-2-玩家转向"><a href="#5-2-玩家转向" class="headerlink" title="5.2 玩家转向"></a>5.2 玩家转向</h3><h4 id="5-2-1、通过镜像翻转改变玩家朝向"><a href="#5-2-1、通过镜像翻转改变玩家朝向" class="headerlink" title="5.2.1、通过镜像翻转改变玩家朝向"></a>5.2.1、通过镜像翻转改变玩家朝向</h4><p>首先在<strong>PlayerController 玩家控制器</strong>中增加<strong>Move()</strong>,</p>
<p>通过更改Player的localScale的属性<strong>x轴正负(对应axisX轴)值</strong>,同步修改<strong>角色朝向</strong>。</p>
<p>左右移动功能使用速度x方向</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220729034552855.png" alt="image-20220729034552855"></p>
<p>然后修改<strong>PlayerState_Run</strong>中**PhysicUpdate()**函数</p>
<p><code>player.SetVelocityX(runSpeed);</code>改为<code>player.Move(runSpeed);</code></p>
<p>新的比旧的多了转向功能。</p>
<h4 id="5-5-2、停止移动"><a href="#5-5-2、停止移动" class="headerlink" title="5.5.2、停止移动"></a>5.5.2、停止移动</h4><p>**PlayerState_Idle类Enter()**中新加一条代码<code>player.SetVelocityX(0f);</code>x轴速度归零</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220729035245706.png" alt="image-20220729035245706"></p>
<h3 id="5-3-玩家加速和减速"><a href="#5-3-玩家加速和减速" class="headerlink" title="5.3 玩家加速和减速"></a>5.3 玩家加速和减速</h3><h4 id="5-3-1、实现玩家加速"><a href="#5-3-1、实现玩家加速" class="headerlink" title="5.3.1、实现玩家加速"></a>5.3.1、实现玩家加速</h4><p>在<strong>玩家控制器</strong>中添加一个方法,获取玩家移速。</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220803155755085.png" alt="image-20220803155755085"></p>
<p>打开<strong>玩家状态类</strong>声明浮点型变量currentSpeed，当前速度</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220803170504220.png" alt="image-20220803170504220"></p>
<p>修改<strong>PlayerState_Run</strong>脚本,新增变量acceration加速度，Enter()中获取当前速度，LogicUpdate()中新增缓慢加速的算法。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line">[<span class="meta">CreateAssetMenu(menuName = <span class="string">&quot;Data/StateMachine/PlayerState/Run&quot;</span>, fileName = <span class="string">&quot;PlayerState_Run&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PlayerState_Run</span> : <span class="title">PlayerState</span></span><br><span class="line">&#123;</span><br><span class="line">  [<span class="meta">SerializeField</span>] <span class="built_in">float</span> runSpeed = <span class="number">5f</span>;<span class="comment">//跑步速度</span></span><br><span class="line">  [<span class="meta">SerializeField</span>] <span class="built_in">float</span> acceration = <span class="number">10f</span>;<span class="comment">//加速度</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Enter</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    animator.Play(<span class="string">&quot;Run&quot;</span>);</span><br><span class="line">    currentSpeed = player.MoveSpeed;<span class="comment">//获取当前速度</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">LogicUpdate</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (!input.PlayerMove)</span><br><span class="line">    &#123;<span class="comment">//if玩家没移动输入 则切换状态为idle</span></span><br><span class="line">      stateMachine.SwitchState(<span class="keyword">typeof</span>(PlayerState_Idle));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//从当前速度到指定速度之间随着acceration加速度增加。</span></span><br><span class="line">    currentSpeed = Mathf.MoveTowards(currentSpeed, runSpeed, acceration * Time.deltaTime);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">PhysicUpdate</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//player.Move(runSpeed);</span></span><br><span class="line">    player.Move(currentSpeed);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-3-2、实现玩家减速"><a href="#5-3-2、实现玩家减速" class="headerlink" title="5.3.2、实现玩家减速"></a>5.3.2、实现玩家减速</h4><p>修改<strong>PlayerState_Idle</strong>脚本，新增变量deceleration表示减速加速度，Enter()中记录当前速度，LogicUpdate()中新增缓慢减速算法。重写PhysicUpdate()方法设置减速。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line">[<span class="meta">CreateAssetMenu(menuName = <span class="string">&quot;Data/StateMachine/PlayerState/Idle&quot;</span>, fileName = <span class="string">&quot;PlayerState_Idle&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PlayerState_Idle</span> : <span class="title">PlayerState</span></span><br><span class="line">&#123;</span><br><span class="line">  [<span class="meta">SerializeField</span>] <span class="built_in">float</span> deceleration = <span class="number">5f</span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Enter</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    animator.Play(<span class="string">&quot;Idle&quot;</span>);<span class="comment">//播放动画器里的idle动画</span></span><br><span class="line">    <span class="comment">//player.SetVelocityX(0f);//x轴速度归零</span></span><br><span class="line">    currentSpeed = player.MoveSpeed;<span class="comment">//记录当前速度</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">LogicUpdate</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (input.PlayerMove)</span><br><span class="line">    &#123;<span class="comment">//判断是否移动</span></span><br><span class="line">      stateMachine.SwitchState(<span class="keyword">typeof</span>(PlayerState_Run));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//减速</span></span><br><span class="line">    currentSpeed = Mathf.MoveTowards(currentSpeed, <span class="number">0</span>, deceleration * Time.deltaTime);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">PhysicUpdate</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//因为已停止移动 所以不能用Move()，并且需要获取玩家朝向layer.transform.localScale.x</span></span><br><span class="line">    player.SetVelocityX(currentSpeed * player.transform.localScale.x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-4-相机跟随玩家"><a href="#5-4-相机跟随玩家" class="headerlink" title="5.4 相机跟随玩家"></a>5.4 相机跟随玩家</h3><p>使用<strong>Cinemachine虚拟相机插件</strong>实现。</p>
<p>新建虚拟相机命名为<strong>Virtual Camera Player Follow</strong>，</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220803182643175.png" alt="image-20220803182643175"></p>
<p>拖到Cameras下。</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220804124847239.png" alt="image-20220804124847239"></p>
<p>提前重置两个相机位置，然后将player拖到follow槽中</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220804125015412.png" alt="image-20220804125015412"></p>
<p>取消勾选Aim选项，这个是用作瞄准用的。</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220804125321555.png" alt="image-20220804125321555"></p>
<p>将body机身改成Framing Transposer取景器</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220804131918252.png" alt="image-20220804131918252"></p>
<p>调试参数，选中这个，在试玩时做的操作也会保存</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220804132030035.png" alt="image-20220804132030035"></p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220804132047150.png" alt="image-20220804132047150"></p>
<hr>
<h2 id="六-优化改进动画播放"><a href="#六-优化改进动画播放" class="headerlink" title="六 优化改进动画播放"></a>六 优化改进动画播放</h2><p><strong>PlayerState玩家状态</strong>脚本中新增三条属性</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220804135546469.png" alt="image-20220804135546469"></p>
<p>分别用来获取状态动画名称、动画切换时间、声明int类型哈希值。</p>
<p>onenable()中，将获取的<strong>字符串转哈希值</strong>（哈希值占用资源少）。</p>
<p>Enter()中，使用<strong>animator.crossFade()<strong>过渡动画，</strong>淡入淡出效果</strong>。</p>
<p><strong>参数1：字符串或者哈希值，参数2：持续时间。</strong></p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220804135713005.png" alt="image-20220804135713005"></p>
<p>玩家状态<strong>PlayerState_Idle和PlayerState_Run</strong>中的<code>animator.Play()</code>改为<code>base.Enter();</code>继承父类</p>
<p>回到编辑器中只需要在可视化脚本中输入动画名即可.</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220804140201463.png" alt="image-20220804140201463"></p>
<hr>
<h2 id="七-玩家跳跃功能"><a href="#七-玩家跳跃功能" class="headerlink" title="七 玩家跳跃功能"></a>七 玩家跳跃功能</h2><h3 id="7-1-地面检测"><a href="#7-1-地面检测" class="headerlink" title="7.1 地面检测"></a>7.1 地面检测</h3><p>要实现跳跃功能，首先要检测地面。</p>
<p>在Player对象下的Ground Detector空对象中添加新的脚本：<strong>PlayerGroundDetector 玩家地面检测器</strong></p>
<p>代码如下:</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PlayerGroundDetector</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">  [<span class="meta">SerializeField</span>] <span class="built_in">float</span> detectionRadius = <span class="number">0.1f</span>;<span class="comment">//检测半径</span></span><br><span class="line">  [<span class="meta">SerializeField</span>] LayerMask groundLayer;<span class="comment">//层级</span></span><br><span class="line">  Collider[] colliders = <span class="keyword">new</span> Collider[<span class="number">1</span>];<span class="comment">//碰撞数组</span></span><br><span class="line">    </span><br><span class="line">  <span class="comment">//Physics.OverlapSphereNonAlloc 检测碰撞个数,不触发回收机制 判断如不为0则返回true</span></span><br><span class="line">  <span class="comment">//IsGrounded:可以判断玩家是否在地面</span></span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">bool</span> IsGrounded =&gt; Physics.OverlapSphereNonAlloc(transform.position, detectionRadius, colliders,groundLayer) != <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">//OnDrawGizmosSelected():系统提供的方法,不是自己建的。  </span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">OnDrawGizmosSelected</span>()</span></span><br><span class="line">  &#123;<span class="comment">//在编辑器中展示 方便调试</span></span><br><span class="line">    Gizmos.color = Color.green;</span><br><span class="line">    Gizmos.DrawWireSphere(transform.position, detectionRadius);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在<strong>PlayerController 玩家控制器脚本</strong>中新增代码,以使用玩家地面检测器的参数.</p>
<p>新增内容:</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">PlayerGroundDetector groundDetector;<span class="comment">//玩家地面检测</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取地面检测结果</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">bool</span> IsGrounded =&gt; groundDetector.IsGrounded;<span class="comment">//true 为已接触</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断玩家是否为正在下落,下落时刚体的y速度为负数,并且需要未落地.</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">bool</span> IsFalling =&gt; rigidBody.velocity.y &lt; <span class="number">0f</span> &amp;&amp; !IsGrounded;</span><br></pre></td></tr></table></figure>



<hr>
<h3 id="7-2-检测当前播放动画是否完成"><a href="#7-2-检测当前播放动画是否完成" class="headerlink" title="7.2 检测当前播放动画是否完成"></a>7.2 检测当前播放动画是否完成</h3><p>需要获取:1.动画播放开启的时间;2.当前状态持续时长;3.动画自身播放时长</p>
<p>打开<strong>玩家状态脚本 PlayerState</strong>,新增代码.</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">float</span> stateStartTime;<span class="comment">//状态开始时间</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//动画是否播放完毕,通过判断 [当前状态的持续时间]是否大于等于[动画本身长度],若大于则动画结束.</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="built_in">bool</span> IsAnimationFinished =&gt; StateDuration &gt;= animator.GetCurrentAnimatorStateInfo(<span class="number">0</span>).length;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//当前状态的持续时间,当前时间减去状态开始时间.</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="built_in">float</span> StateDuration =&gt; Time.time - stateStartTime;</span><br></pre></td></tr></table></figure>

<p><strong>Enter()中给stateStartTime赋值</strong></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Enter</span>()</span></span><br><span class="line">  &#123;<span class="comment">//animator.CrossFade()交叉淡化函数,可传入哈希值或者string</span></span><br><span class="line">    animator.CrossFade(stateHash, transitionDuration);</span><br><span class="line">    stateStartTime = Time.time;<span class="comment">//记录下状态开始时间</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-3-玩家跳跃"><a href="#7-3-玩家跳跃" class="headerlink" title="7.3 玩家跳跃"></a>7.3 玩家跳跃</h3><p>新建三个状态类<strong>PlayerState_Fall</strong>,<strong>PlayerState_JumpUp</strong>,<strong>PlayerState_Land</strong>。</p>
<p>玩家按下跳跃键,并且玩家在地面上</p>
]]></content>
      <categories>
        <category>unity</category>
      </categories>
      <tags>
        <tag>unity</tag>
        <tag>平台跳跃控制器</tag>
      </tags>
  </entry>
  <entry>
    <title>unity中Invoke用法</title>
    <url>/Blog/2022/06/16/unity%E4%B8%ADInvoke%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<h4 id="Invoke方法是Unity3D-中的一种委托机制。"><a href="#Invoke方法是Unity3D-中的一种委托机制。" class="headerlink" title="Invoke方法是Unity3D 中的一种委托机制。"></a>Invoke方法是Unity3D 中的一种委托机制。</h4><p>现在看一下官网给出的API：</p>
<blockquote>
<p>public void Invoke(string methodName, float time);</p>
<p>methodName 是方法名，time 是具体几秒</p>
<p>Invokes the method <code>methodName</code> in time seconds.</p>
</blockquote>
<p>在具体事件以后调用这个方法</p>
<p>　　也就是说，Invoke(“SendMessage”,5) ,表示的是在“5s”以后执行“SendMessage”方法。</p>
<p>使用Invoke方法需要注意以下三点：</p>
<p>1、它应该在<strong>Start,Update,FixUpdate,LateUpdate,还有OnGUI</strong>中被调用</p>
<p>2、Invoke中传递的方法不能是含有参数的方法、</p>
<p>3、当Time.ScaleTime &#x3D; 0时，Invoke()无效，调用不到Invoke方法</p>
<p>当然，Invoke也支持重复调用:</p>
<p>InvokeRepeating(“SendMessage”,2,3);</p>
<p>表示在“2s”以后开始调用第一次，之后每隔“3s”重复调用一次。</p>
]]></content>
      <categories>
        <category>unity</category>
      </categories>
      <tags>
        <tag>unity</tag>
        <tag>Invoke</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式(搬运)</title>
    <url>/Blog/2022/06/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<p align="center">
    <br/>
    <a href="https://github.com/ziishaned/learn-regex">
        <img src="https://i.imgur.com/bYwl7Vf.png" alt="Learn Regex">
    </a>
    <br /><br />
    <p>
        <a href="https://twitter.com/home?status=Learn%20regex%20the%20easy%20way%20by%20%40ziishaned%20http%3A//github.com/ziishaned/learn-regex">
            <img src="https://img.shields.io/badge/twitter-tweet-blue.svg?style=flat-square"/>
        </a>
        <a href="https://twitter.com/ziishaned">
            <img src="https://img.shields.io/badge/feedback-@ziishaned-blue.svg?style=flat-square" />
        </a>
    </p>
</p>


<h2 id="什么是正则表达式？"><a href="#什么是正则表达式？" class="headerlink" title="什么是正则表达式？"></a>什么是正则表达式？</h2><blockquote>
<p>正则表达式是一组由字母和符号组成的特殊文本，它可以用来从文本中找出满足你想要的格式的句子。</p>
</blockquote>
<p>一个正则表达式是一种从左到右匹配主体字符串的模式。<br>“Regular expression”这个词比较拗口，我们常使用缩写的术语“regex”或“regexp”。<br>正则表达式可以从一个基础字符串中根据一定的匹配模式替换文本中的字符串、验证表单、提取字符串等等。</p>
<p>想象你正在写一个应用，然后你想设定一个用户命名的规则，让用户名包含字符、数字、下划线和连字符，以及限制字符的个数，好让名字看起来没那么丑。<br>我们使用以下正则表达式来验证一个用户名：</p>
<p><img src="https://raw.githubusercontent.com/ziishaned/learn-regex/master/img/regexp-cn.png"></p>
<p>以上的正则表达式可以接受 <code>john_doe</code>、<code>jo-hn_doe</code>、<code>john12_as</code>。<br>但不匹配<code>Jo</code>，因为它包含了大写的字母而且太短了。</p>
<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul>
<li><a href="#1-%E5%9F%BA%E6%9C%AC%E5%8C%B9%E9%85%8D">1. 基本匹配</a></li>
<li><a href="#2-%E5%85%83%E5%AD%97%E7%AC%A6">2. 元字符</a><ul>
<li><a href="#21-%E7%82%B9%E8%BF%90%E7%AE%97%E7%AC%A6-">2.1 点运算符 .</a></li>
<li><a href="#22-%E5%AD%97%E7%AC%A6%E9%9B%86">2.2 字符集</a><ul>
<li><a href="#221-%E5%90%A6%E5%AE%9A%E5%AD%97%E7%AC%A6%E9%9B%86">2.2.1 否定字符集</a></li>
</ul>
</li>
<li><a href="#23-%E9%87%8D%E5%A4%8D%E6%AC%A1%E6%95%B0">2.3 重复次数</a><ul>
<li><a href="#231--%E5%8F%B7">2.3.1 * 号</a></li>
<li><a href="#232--%E5%8F%B7">2.3.2 + 号</a></li>
<li><a href="#233--%E5%8F%B7">2.3.3 ? 号</a></li>
</ul>
</li>
<li><a href="#24--%E5%8F%B7">2.4 {} 号</a></li>
<li><a href="#25--%E7%89%B9%E5%BE%81%E6%A0%87%E7%BE%A4">2.5 (…) 特征标群</a></li>
<li><a href="#26--%E6%88%96%E8%BF%90%E7%AE%97%E7%AC%A6">2.6 | 或运算符</a></li>
<li><a href="#27-%E8%BD%AC%E7%A0%81%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6">2.7 转码特殊字符</a></li>
<li><a href="#28-%E9%94%9A%E7%82%B9">2.8 锚点</a><ul>
<li><a href="#281--%E5%8F%B7">2.8.1 ^ 号</a></li>
<li><a href="#282--%E5%8F%B7">2.8.2 $ 号</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#3-%E7%AE%80%E5%86%99%E5%AD%97%E7%AC%A6%E9%9B%86">3. 简写字符集</a></li>
<li><a href="#4-%E9%9B%B6%E5%AE%BD%E5%BA%A6%E6%96%AD%E8%A8%80%E5%89%8D%E5%90%8E%E9%A2%84%E6%9F%A5">4. 零宽度断言(前后预查)</a><ul>
<li><a href="#41--%E6%AD%A3%E5%85%88%E8%A1%8C%E6%96%AD%E8%A8%80">4.1 ?&#x3D;… 正先行断言</a></li>
<li><a href="#42--%E8%B4%9F%E5%85%88%E8%A1%8C%E6%96%AD%E8%A8%80">4.2 ?!… 负先行断言</a></li>
<li><a href="#43---%E6%AD%A3%E5%90%8E%E5%8F%91%E6%96%AD%E8%A8%80">4.3 ?&lt;&#x3D; … 正后发断言</a></li>
<li><a href="#44--%E8%B4%9F%E5%90%8E%E5%8F%91%E6%96%AD%E8%A8%80">4.4 ?&lt;!… 负后发断言</a></li>
</ul>
</li>
<li><a href="#5-%E6%A0%87%E5%BF%97">5. 标志</a><ul>
<li><a href="#51-%E5%BF%BD%E7%95%A5%E5%A4%A7%E5%B0%8F%E5%86%99-case-insensitive">5.1 忽略大小写（Case Insensitive）</a></li>
<li><a href="#52-%E5%85%A8%E5%B1%80%E6%90%9C%E7%B4%A2-global-search">5.2 全局搜索（Global search）</a></li>
<li><a href="#53-%E5%A4%9A%E8%A1%8C%E4%BF%AE%E9%A5%B0%E7%AC%A6-multiline">5.3 多行修饰符（Multiline）</a></li>
</ul>
</li>
<li><a href="#%E9%A2%9D%E5%A4%96%E8%A1%A5%E5%85%85">额外补充</a></li>
<li><a href="#%E8%B4%A1%E7%8C%AE">贡献</a></li>
<li><a href="#%E8%AE%B8%E5%8F%AF%E8%AF%81">许可证</a></li>
</ul>
<h2 id="1-基本匹配"><a href="#1-基本匹配" class="headerlink" title="1. 基本匹配"></a>1. 基本匹配</h2><p>正则表达式其实就是在执行搜索时的格式，它由一些字母和数字组合而成。<br>例如：一个正则表达式 <code>the</code>，它表示一个规则：由字母<code>t</code>开始，接着是<code>h</code>，再接着是<code>e</code>。</p>
<pre>
"the" => The fat cat sat on <a href="#learn-regex"><strong>the</strong></a> mat.
</pre>
<p><a href="https://regex101.com/r/dmRygT/1">在线练习</a></p>
<p>正则表达式<code>123</code>匹配字符串<code>123</code>。它逐个字符的与输入的正则表达式做比较。</p>
<p>正则表达式是大小写敏感的，所以<code>The</code>不会匹配<code>the</code>。</p>
<pre>
"The" => <a href="#learn-regex"><strong>The</strong></a> fat cat sat on the mat.
</pre>

<p><a href="https://regex101.com/r/1paXsy/1">在线练习</a></p>
<h2 id="2-元字符"><a href="#2-元字符" class="headerlink" title="2. 元字符"></a>2. 元字符</h2><p>正则表达式主要依赖于元字符。<br>元字符不代表他们本身的字面意思，他们都有特殊的含义。一些元字符写在方括号中的时候有一些特殊的意思。以下是一些元字符的介绍：</p>
<table>
<thead>
<tr>
<th align="center">元字符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">.</td>
<td>句号匹配任意单个字符除了换行符。</td>
</tr>
<tr>
<td align="center">[ ]</td>
<td>字符种类。匹配方括号内的任意字符。</td>
</tr>
<tr>
<td align="center">[^ ]</td>
<td>否定的字符种类。匹配除了方括号里的任意字符</td>
</tr>
<tr>
<td align="center">*</td>
<td>匹配&gt;&#x3D;0个重复的在*号之前的字符。</td>
</tr>
<tr>
<td align="center">+</td>
<td>匹配&gt;&#x3D;1个重复的+号前的字符。</td>
</tr>
<tr>
<td align="center">?</td>
<td>标记?之前的字符为可选.</td>
</tr>
<tr>
<td align="center">{n,m}</td>
<td>匹配num个大括号之前的字符或字符集 (n &lt;&#x3D; num &lt;&#x3D; m).</td>
</tr>
<tr>
<td align="center">(xyz)</td>
<td>字符集，匹配与 xyz 完全相等的字符串.</td>
</tr>
<tr>
<td align="center">&amp;#124;</td>
<td>或运算符，匹配符号前或后的字符.</td>
</tr>
<tr>
<td align="center">&amp;#92;</td>
<td>转义字符,用于匹配一些保留的字符 <code>[ ] ( ) &#123; &#125; . * + ? ^ $ \ &#124;</code></td>
</tr>
<tr>
<td align="center">^</td>
<td>从开始行开始匹配.</td>
</tr>
<tr>
<td align="center">$</td>
<td>从末端开始匹配.</td>
</tr>
</tbody></table>
<h2 id="2-1-点运算符"><a href="#2-1-点运算符" class="headerlink" title="2.1 点运算符 ."></a>2.1 点运算符 <code>.</code></h2><p><code>.</code>是元字符中最简单的例子。<br><code>.</code>匹配任意单个字符，但不匹配换行符。<br>例如，表达式<code>.ar</code>匹配一个任意字符后面跟着是<code>a</code>和<code>r</code>的字符串。</p>
<pre>
".ar" => The <a href="#learn-regex"><strong>car</strong></a> <a href="#learn-regex"><strong>par</strong></a>ked in the <a href="#learn-regex"><strong>gar</strong></a>age.
</pre>

<p><a href="https://regex101.com/r/xc9GkU/1">在线练习</a></p>
<h2 id="2-2-字符集"><a href="#2-2-字符集" class="headerlink" title="2.2 字符集"></a>2.2 字符集</h2><p>字符集也叫做字符类。<br>方括号用来指定一个字符集。<br>在方括号中使用连字符来指定字符集的范围。<br>在方括号中的字符集不关心顺序。<br>例如，表达式<code>[Tt]he</code> 匹配 <code>the</code> 和 <code>The</code>。</p>
<pre>
"[Tt]he" => <a href="#learn-regex"><strong>The</strong></a> car parked in <a href="#learn-regex"><strong>the</strong></a> garage.
</pre>

<p><a href="https://regex101.com/r/2ITLQ4/1">在线练习</a></p>
<p>方括号的句号就表示句号。<br>表达式 <code>ar[.]</code> 匹配 <code>ar.</code>字符串</p>
<pre>
"ar[.]" => A garage is a good place to park a c<a href="#learn-regex"><strong>ar.</strong></a>
</pre>

<p><a href="https://regex101.com/r/wL3xtE/1">在线练习</a></p>
<h3 id="2-2-1-否定字符集"><a href="#2-2-1-否定字符集" class="headerlink" title="2.2.1 否定字符集"></a>2.2.1 否定字符集</h3><p>一般来说 <code>^</code> 表示一个字符串的开头，但它用在一个方括号的开头的时候，它表示这个字符集是否定的。<br>例如，表达式<code>[^c]ar</code> 匹配一个后面跟着<code>ar</code>的除了<code>c</code>的任意字符。</p>
<pre>
"[^c]ar" => The car <a href="#learn-regex"><strong>par</strong></a>ked in the <a href="#learn-regex"><strong>gar</strong></a>age.
</pre>

<p><a href="https://regex101.com/r/nNNlq3/1">在线练习</a></p>
<h2 id="2-3-重复次数"><a href="#2-3-重复次数" class="headerlink" title="2.3 重复次数"></a>2.3 重复次数</h2><p>后面跟着元字符 <code>+</code>，<code>*</code> or <code>?</code> 的，用来指定匹配子模式的次数。<br>这些元字符在不同的情况下有着不同的意思。</p>
<h3 id="2-3-1-号"><a href="#2-3-1-号" class="headerlink" title="2.3.1 * 号"></a>2.3.1 <code>*</code> 号</h3><p><code>*</code>号匹配 在<code>*</code>之前的字符出现<code>大于等于0</code>次。<br>例如，表达式 <code>a*</code> 匹配0或更多个以a开头的字符。表达式<code>[a-z]*</code> 匹配一个行中所有以小写字母开头的字符串。</p>
<pre>
"[a-z]*" => T<a href="#learn-regex"><strong>he</strong></a> <a href="#learn-regex"><strong>car</strong></a> <a href="#learn-regex"><strong>parked</strong></a> <a href="#learn-regex"><strong>in</strong></a> <a href="#learn-regex"><strong>the</strong></a> <a href="#learn-regex"><strong>garage</strong></a> #21.
</pre>

<p><a href="https://regex101.com/r/7m8me5/1">在线练习</a></p>
<p><code>*</code>字符和<code>.</code>字符搭配可以匹配所有的字符<code>.*</code>。<br><code>*</code>和表示匹配空格的符号<code>\s</code>连起来用，如表达式<code>\s*cat\s*</code>匹配0或更多个空格开头和0或更多个空格结尾的cat字符串。</p>
<pre>
"\s*cat\s*" => The fat<a href="#learn-regex"><strong> cat </strong></a>sat on the con<a href="#learn-regex"><strong>cat</strong></a>enation.
</pre>

<p><a href="https://regex101.com/r/gGrwuz/1">在线练习</a></p>
<h3 id="2-3-2-号"><a href="#2-3-2-号" class="headerlink" title="2.3.2 + 号"></a>2.3.2 <code>+</code> 号</h3><p><code>+</code>号匹配<code>+</code>号之前的字符出现 &gt;&#x3D;1 次。<br>例如表达式<code>c.+t</code> 匹配以首字母<code>c</code>开头以<code>t</code>结尾，中间跟着至少一个字符的字符串。</p>
<pre>
"c.+t" => The fat <a href="#learn-regex"><strong>cat sat on the mat</strong></a>.
</pre>

<p><a href="https://regex101.com/r/Dzf9Aa/1">在线练习</a></p>
<h3 id="2-3-3-号"><a href="#2-3-3-号" class="headerlink" title="2.3.3 ? 号"></a>2.3.3 <code>?</code> 号</h3><p>在正则表达式中元字符 <code>?</code> 标记在符号前面的字符为可选，即出现 0 或 1 次。<br>例如，表达式 <code>[T]?he</code> 匹配字符串 <code>he</code> 和 <code>The</code>。</p>
<pre>
"[T]he" => <a href="#learn-regex"><strong>The</strong></a> car is parked in the garage.
</pre>

<p><a href="https://regex101.com/r/cIg9zm/1">在线练习</a></p>
<pre>
"[T]?he" => <a href="#learn-regex"><strong>The</strong></a> car is parked in t<a href="#learn-regex"><strong>he</strong></a> garage.
</pre>

<p><a href="https://regex101.com/r/kPpO2x/1">在线练习</a></p>
<h2 id="2-4-号"><a href="#2-4-号" class="headerlink" title="2.4 {} 号"></a>2.4 <code>&#123;&#125;</code> 号</h2><p>在正则表达式中 <code>&#123;&#125;</code> 是一个量词，常用来限定一个或一组字符可以重复出现的次数。<br>例如， 表达式 <code>[0-9]&#123;2,3&#125;</code> 匹配最少 2 位最多 3 位 0~9 的数字。</p>
<pre>
"[0-9]{2,3}" => The number was 9.<a href="#learn-regex"><strong>999</strong></a>7 but we rounded it off to <a href="#learn-regex"><strong>10</strong></a>.0.
</pre>

<p><a href="https://regex101.com/r/juM86s/1">在线练习</a></p>
<p>我们可以省略第二个参数。<br>例如，<code>[0-9]&#123;2,&#125;</code> 匹配至少两位 0~9 的数字。</p>
<pre>
"[0-9]{2,}" => The number was 9.<a href="#learn-regex"><strong>9997</strong></a> but we rounded it off to <a href="#learn-regex"><strong>10</strong></a>.0.
</pre>

<p><a href="https://regex101.com/r/Gdy4w5/1">在线练习</a></p>
<p>如果逗号也省略掉则表示重复固定的次数。<br>例如，<code>[0-9]&#123;3&#125;</code> 匹配3位数字</p>
<pre>
"[0-9]{3}" => The number was 9.<a href="#learn-regex"><strong>999</strong></a>7 but we rounded it off to 10.0.
</pre>

<p><a href="https://regex101.com/r/Sivu30/1">在线练习</a></p>
<h2 id="2-5-特征标群"><a href="#2-5-特征标群" class="headerlink" title="2.5 (...) 特征标群"></a>2.5 <code>(...)</code> 特征标群</h2><p>特征标群是一组写在 <code>(...)</code> 中的子模式。<code>(...)</code> 中包含的内容将会被看成一个整体，和数学中小括号（ ）的作用相同。例如, 表达式 <code>(ab)*</code> 匹配连续出现 0 或更多个 <code>ab</code>。如果没有使用 <code>(...)</code> ，那么表达式 <code>ab*</code> 将匹配连续出现 0 或更多个 <code>b</code> 。再比如之前说的 <code>&#123;&#125;</code> 是用来表示前面一个字符出现指定次数。但如果在 <code>&#123;&#125;</code> 前加上特征标群 <code>(...)</code> 则表示整个标群内的字符重复 N 次。</p>
<p>我们还可以在 <code>()</code> 中用或字符 <code>|</code> 表示或。例如，<code>(c|g|p)ar</code> 匹配 <code>car</code> 或 <code>gar</code> 或 <code>par</code>.</p>
<pre>
"(c|g|p)ar" => The <a href="#learn-regex"><strong>car</strong></a> is <a href="#learn-regex"><strong>par</strong></a>ked in the <a href="#learn-regex"><strong>gar</strong></a>age.
</pre>

<p><a href="https://regex101.com/r/tUxrBG/1">在线练习</a></p>
<h2 id="2-6-或运算符"><a href="#2-6-或运算符" class="headerlink" title="2.6 | 或运算符"></a>2.6 <code>|</code> 或运算符</h2><p>或运算符就表示或，用作判断条件。</p>
<p>例如 <code>(T|t)he|car</code> 匹配 <code>(T|t)he</code> 或 <code>car</code>。</p>
<pre>
"(T|t)he|car" => <a href="#learn-regex"><strong>The</strong></a> <a href="#learn-regex"><strong>car</strong></a> is parked in <a href="#learn-regex"><strong>the</strong></a> garage.
</pre>

<p><a href="https://regex101.com/r/fBXyX0/1">在线练习</a></p>
<h2 id="2-7-转码特殊字符"><a href="#2-7-转码特殊字符" class="headerlink" title="2.7 转码特殊字符"></a>2.7 转码特殊字符</h2><p>反斜线 <code>\</code> 在表达式中用于转码紧跟其后的字符。用于指定 <code>&#123; &#125; [ ] / \ + * . $ ^ | ?</code> 这些特殊字符。如果想要匹配这些特殊字符则要在其前面加上反斜线 <code>\</code>。</p>
<p>例如 <code>.</code> 是用来匹配除换行符外的所有字符的。如果想要匹配句子中的 <code>.</code> 则要写成 <code>\.</code> 以下这个例子 <code>\.?</code>是选择性匹配<code>.</code></p>
<pre>
"(f|c|m)at\.?" => The <a href="#learn-regex"><strong>fat</strong></a> <a href="#learn-regex"><strong>cat</strong></a> sat on the <a href="#learn-regex"><strong>mat.</strong></a>
</pre>

<p><a href="https://regex101.com/r/DOc5Nu/1">在线练习</a></p>
<h2 id="2-8-锚点"><a href="#2-8-锚点" class="headerlink" title="2.8 锚点"></a>2.8 锚点</h2><p>在正则表达式中，想要匹配指定开头或结尾的字符串就要使用到锚点。<code>^</code> 指定开头，<code>$</code> 指定结尾。</p>
<h3 id="2-8-1-号"><a href="#2-8-1-号" class="headerlink" title="2.8.1 ^ 号"></a>2.8.1 <code>^</code> 号</h3><p><code>^</code> 用来检查匹配的字符串是否在所匹配字符串的开头。</p>
<p>例如，在 <code>abc</code> 中使用表达式 <code>^a</code> 会得到结果 <code>a</code>。但如果使用 <code>^b</code> 将匹配不到任何结果。因为在字符串 <code>abc</code> 中并不是以 <code>b</code> 开头。</p>
<p>例如，<code>^(T|t)he</code> 匹配以 <code>The</code> 或 <code>the</code> 开头的字符串。</p>
<pre>
"(T|t)he" => <a href="#learn-regex"><strong>The</strong></a> car is parked in <a href="#learn-regex"><strong>the</strong></a> garage.
</pre>

<p><a href="https://regex101.com/r/5ljjgB/1">在线练习</a></p>
<pre>
"^(T|t)he" => <a href="#learn-regex"><strong>The</strong></a> car is parked in the garage.
</pre>

<p><a href="https://regex101.com/r/jXrKne/1">在线练习</a></p>
<h3 id="2-8-2-号"><a href="#2-8-2-号" class="headerlink" title="2.8.2 $ 号"></a>2.8.2 <code>$</code> 号</h3><p>同理于 <code>^</code> 号，<code>$</code> 号用来匹配字符是否是最后一个。</p>
<p>例如，<code>(at\.)$</code> 匹配以 <code>at.</code> 结尾的字符串。</p>
<pre>
"(at\.)" => The fat c<a href="#learn-regex"><strong>at.</strong></a> s<a href="#learn-regex"><strong>at.</strong></a> on the m<a href="#learn-regex"><strong>at.</strong></a>
</pre>

<p><a href="https://regex101.com/r/y4Au4D/1">在线练习</a></p>
<pre>
"(at\.)$" => The fat cat. sat. on the m<a href="#learn-regex"><strong>at.</strong></a>
</pre>

<p><a href="https://regex101.com/r/t0AkOd/1">在线练习</a></p>
<h2 id="3-简写字符集"><a href="#3-简写字符集" class="headerlink" title="3. 简写字符集"></a>3. 简写字符集</h2><p>正则表达式提供一些常用的字符集简写。如下:</p>
<table>
<thead>
<tr>
<th align="center">简写</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">.</td>
<td>除换行符外的所有字符</td>
</tr>
<tr>
<td align="center">\w</td>
<td>匹配所有字母数字，等同于 <code>[a-zA-Z0-9_]</code></td>
</tr>
<tr>
<td align="center">\W</td>
<td>匹配所有非字母数字，即符号，等同于： <code>[^\w]</code></td>
</tr>
<tr>
<td align="center">\d</td>
<td>匹配数字： <code>[0-9]</code></td>
</tr>
<tr>
<td align="center">\D</td>
<td>匹配非数字： <code>[^\d]</code></td>
</tr>
<tr>
<td align="center">\s</td>
<td>匹配所有空格字符，等同于： <code>[\t\n\f\r\p&#123;Z&#125;]</code></td>
</tr>
<tr>
<td align="center">\S</td>
<td>匹配所有非空格字符： <code>[^\s]</code></td>
</tr>
<tr>
<td align="center">\f</td>
<td>匹配一个换页符</td>
</tr>
<tr>
<td align="center">\n</td>
<td>匹配一个换行符</td>
</tr>
<tr>
<td align="center">\r</td>
<td>匹配一个回车符</td>
</tr>
<tr>
<td align="center">\t</td>
<td>匹配一个制表符</td>
</tr>
<tr>
<td align="center">\v</td>
<td>匹配一个垂直制表符</td>
</tr>
<tr>
<td align="center">\p</td>
<td>匹配 CR&#x2F;LF（等同于 <code>\r\n</code>），用来匹配 DOS 行终止符</td>
</tr>
</tbody></table>
<h2 id="4-零宽度断言（前后预查）"><a href="#4-零宽度断言（前后预查）" class="headerlink" title="4. 零宽度断言（前后预查）"></a>4. 零宽度断言（前后预查）</h2><p>先行断言和后发断言（合称 lookaround）都属于<strong>非捕获组</strong>（用于匹配模式，但不包括在匹配列表中）。当我们需要一个模式的前面或后面有另一个特定的模式时，就可以使用它们。</p>
<p>例如，我们希望从下面的输入字符串 <code>$4.44</code> 和 <code>$10.88</code> 中获得所有以 <code>$</code> 字符开头的数字，我们将使用以下的正则表达式 <code>(?&lt;=\$)[0-9\.]*</code>。意思是：获取所有包含 <code>.</code> 并且前面是 <code>$</code> 的数字。</p>
<p>零宽度断言如下：</p>
<table>
<thead>
<tr>
<th align="center">符号</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">?&#x3D;</td>
<td>正先行断言-存在</td>
</tr>
<tr>
<td align="center">?!</td>
<td>负先行断言-排除</td>
</tr>
<tr>
<td align="center">?&lt;&#x3D;</td>
<td>正后发断言-存在</td>
</tr>
<tr>
<td align="center">?&lt;!</td>
<td>负后发断言-排除</td>
</tr>
</tbody></table>
<h3 id="4-1-正先行断言"><a href="#4-1-正先行断言" class="headerlink" title="4.1 ?=... 正先行断言"></a>4.1 <code>?=...</code> 正先行断言</h3><p><code>?=...</code> 正先行断言，表示第一部分表达式之后必须跟着 <code>?=...</code>定义的表达式。</p>
<p>返回结果只包含满足匹配条件的第一部分表达式。<br>定义一个正先行断言要使用 <code>()</code>。在括号内部使用一个问号和等号： <code>(?=...)</code>。</p>
<p>正先行断言的内容写在括号中的等号后面。<br>例如，表达式 <code>(T|t)he(?=\sfat)</code> 匹配 <code>The</code> 和 <code>the</code>，在括号中我们又定义了正先行断言 <code>(?=\sfat)</code> ，即 <code>The</code> 和 <code>the</code> 后面紧跟着 <code>(空格)fat</code>。</p>
<pre>
"(T|t)he(?=\sfat)" => <a href="#learn-regex"><strong>The</strong></a> fat cat sat on the mat.
</pre>

<p><a href="https://regex101.com/r/IDDARt/1">在线练习</a></p>
<h3 id="4-2-负先行断言"><a href="#4-2-负先行断言" class="headerlink" title="4.2 ?!... 负先行断言"></a>4.2 <code>?!...</code> 负先行断言</h3><p>负先行断言 <code>?!</code> 用于筛选所有匹配结果，筛选条件为 其后不跟随着断言中定义的格式。<br><code>正先行断言</code>  定义和 <code>负先行断言</code> 一样，区别就是 <code>=</code> 替换成 <code>!</code> 也就是 <code>(?!...)</code>。</p>
<p>表达式 <code>(T|t)he(?!\sfat)</code> 匹配 <code>The</code> 和 <code>the</code>，且其后不跟着 <code>(空格)fat</code>。</p>
<pre>
"(T|t)he(?!\sfat)" => The fat cat sat on <a href="#learn-regex"><strong>the</strong></a> mat.
</pre>

<p><a href="https://regex101.com/r/V32Npg/1">在线练习</a></p>
<h3 id="4-3-lt-正后发断言"><a href="#4-3-lt-正后发断言" class="headerlink" title="4.3 ?&lt;= ... 正后发断言"></a>4.3 <code>?&lt;= ...</code> 正后发断言</h3><p>正后发断言 记作<code>(?&lt;=...)</code> 用于筛选所有匹配结果，筛选条件为 其前跟随着断言中定义的格式。<br>例如，表达式 <code>(?&lt;=(T|t)he\s)(fat|mat)</code> 匹配 <code>fat</code> 和 <code>mat</code>，且其前跟着 <code>The</code> 或 <code>the</code>。</p>
<pre>
"(?<=(T|t)he\s)(fat|mat)" => The <a href="#learn-regex"><strong>fat</strong></a> cat sat on the <a href="#learn-regex"><strong>mat</strong></a>.
</pre>

<p><a href="https://regex101.com/r/avH165/1">在线练习</a></p>
<h3 id="4-4-lt-负后发断言"><a href="#4-4-lt-负后发断言" class="headerlink" title="4.4 ?&lt;!... 负后发断言"></a>4.4 <code>?&lt;!...</code> 负后发断言</h3><p>负后发断言 记作 <code>(?&lt;!...)</code> 用于筛选所有匹配结果，筛选条件为 其前不跟随着断言中定义的格式。<br>例如，表达式 <code>(?&lt;!(T|t)he\s)(cat)</code> 匹配 <code>cat</code>，且其前不跟着 <code>The</code> 或 <code>the</code>。</p>
<pre>
"(?&lt;!(T|t)he\s)(cat)" => The cat sat on <a href="#learn-regex"><strong>cat</strong></a>.
</pre>

<p><a href="https://regex101.com/r/8Efx5G/1">在线练习</a></p>
<h2 id="5-标志"><a href="#5-标志" class="headerlink" title="5. 标志"></a>5. 标志</h2><p>标志也叫模式修正符，因为它可以用来修改表达式的搜索结果。<br>这些标志可以任意的组合使用，它也是整个正则表达式的一部分。</p>
<table>
<thead>
<tr>
<th align="center">标志</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">i</td>
<td>忽略大小写。</td>
</tr>
<tr>
<td align="center">g</td>
<td>全局搜索。</td>
</tr>
<tr>
<td align="center">m</td>
<td>多行修饰符：锚点元字符 <code>^</code> <code>$</code> 工作范围在每行的起始。</td>
</tr>
</tbody></table>
<h3 id="5-1-忽略大小写-Case-Insensitive"><a href="#5-1-忽略大小写-Case-Insensitive" class="headerlink" title="5.1 忽略大小写 (Case Insensitive)"></a>5.1 忽略大小写 (Case Insensitive)</h3><p>修饰语 <code>i</code> 用于忽略大小写。<br>例如，表达式 <code>/The/gi</code> 表示在全局搜索 <code>The</code>，在后面的 <code>i</code> 将其条件修改为忽略大小写，则变成搜索 <code>the</code> 和 <code>The</code>，<code>g</code> 表示全局搜索。</p>
<pre>
"The" => <a href="#learn-regex"><strong>The</strong></a> fat cat sat on the mat.
</pre>

<p><a href="https://regex101.com/r/dpQyf9/1">在线练习</a></p>
<pre>
"/The/gi" => <a href="#learn-regex"><strong>The</strong></a> fat cat sat on <a href="#learn-regex"><strong>the</strong></a> mat.
</pre>

<p><a href="https://regex101.com/r/ahfiuh/1">在线练习</a></p>
<h3 id="5-2-全局搜索-Global-search"><a href="#5-2-全局搜索-Global-search" class="headerlink" title="5.2 全局搜索 (Global search)"></a>5.2 全局搜索 (Global search)</h3><p>修饰符 <code>g</code> 常用于执行一个全局搜索匹配，即（不仅仅返回第一个匹配的，而是返回全部）。<br>例如，表达式 <code>/.(at)/g</code> 表示搜索 任意字符（除了换行）+ <code>at</code>，并返回全部结果。</p>
<pre>
"/.(at)/" => The <a href="#learn-regex"><strong>fat</strong></a> cat sat on the mat.
</pre>

<p><a href="https://regex101.com/r/jnk6gM/1">在线练习</a></p>
<pre>
"/.(at)/g" => The <a href="#learn-regex"><strong>fat</strong></a> <a href="#learn-regex"><strong>cat</strong></a> <a href="#learn-regex"><strong>sat</strong></a> on the <a href="#learn-regex"><strong>mat</strong></a>.
</pre>

<p><a href="https://regex101.com/r/dO1nef/1">在线练习</a></p>
<h3 id="5-3-多行修饰符-Multiline"><a href="#5-3-多行修饰符-Multiline" class="headerlink" title="5.3 多行修饰符 (Multiline)"></a>5.3 多行修饰符 (Multiline)</h3><p>多行修饰符 <code>m</code> 常用于执行一个多行匹配。</p>
<p>像之前介绍的 <code>(^,$)</code> 用于检查格式是否是在待检测字符串的开头或结尾。但我们如果想要它在每行的开头和结尾生效，我们需要用到多行修饰符 <code>m</code>。</p>
<p>例如，表达式 <code>/at(.)?$/gm</code> 表示小写字符 <code>a</code> 后跟小写字符 <code>t</code> ，末尾可选除换行符外任意字符。根据 <code>m</code> 修饰符，现在表达式匹配每行的结尾。</p>
<pre>
"/.at(.)?$/" => The fat
                cat sat
                on the <a href="#learn-regex"><strong>mat.</strong></a>
</pre>

<p><a href="https://regex101.com/r/hoGMkP/1">在线练习</a></p>
<pre>
"/.at(.)?$/gm" => The <a href="#learn-regex"><strong>fat</strong></a>
                  cat <a href="#learn-regex"><strong>sat</strong></a>
                  on the <a href="#learn-regex"><strong>mat.</strong></a>
</pre>

<p><a href="https://regex101.com/r/E88WE2/1">在线练习</a></p>
<h3 id="6-贪婪匹配与惰性匹配-Greedy-vs-lazy-matching"><a href="#6-贪婪匹配与惰性匹配-Greedy-vs-lazy-matching" class="headerlink" title="6. 贪婪匹配与惰性匹配 (Greedy vs lazy matching)"></a>6. 贪婪匹配与惰性匹配 (Greedy vs lazy matching)</h3><p>正则表达式默认采用贪婪匹配模式，在该模式下意味着会匹配尽可能长的子串。我们可以使用 <code>?</code> 将贪婪匹配模式转化为惰性匹配模式。</p>
<pre>
"/(.*at)/" => <a href="#learn-regex"><strong>The fat cat sat on the mat</strong></a>. </pre>

<p><a href="https://regex101.com/r/AyAdgJ/1">在线练习</a></p>
<pre>
"/(.*?at)/" => <a href="#learn-regex"><strong>The fat</strong></a> cat sat on the mat. </pre>

<p><a href="https://regex101.com/r/AyAdgJ/2">在线练习</a></p>
<h2 id="贡献"><a href="#贡献" class="headerlink" title="贡献"></a>贡献</h2><ul>
<li>报告问题</li>
<li>开放合并请求</li>
<li>传播此文档</li>
<li>直接和我联系 <a href="mailto:&#122;&#x69;&#105;&#115;&#x68;&#97;&#x6e;&#x65;&#x64;&#x40;&#103;&#109;&#97;&#x69;&#x6c;&#x2e;&#x63;&#111;&#x6d;">&#122;&#x69;&#105;&#115;&#x68;&#97;&#x6e;&#x65;&#x64;&#x40;&#103;&#109;&#97;&#x69;&#x6c;&#x2e;&#x63;&#111;&#x6d;</a> 或 <a href="https://twitter.com/ziishaned"><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/ziishaned.svg" alt="Twitter URL"></a></li>
</ul>
<h2 id="许可证"><a href="#许可证" class="headerlink" title="许可证"></a>许可证</h2><p>MIT &amp;copy; <a href="https://twitter.com/ziishaned">Zeeshan Ahmad</a></p>
]]></content>
      <categories>
        <category>基础学习</category>
      </categories>
      <tags>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>ScriptableObject简单使用</title>
    <url>/Blog/2022/06/06/ScriptableObject/</url>
    <content><![CDATA[<h1 id="ScriptableObject"><a href="#ScriptableObject" class="headerlink" title="ScriptableObject"></a>ScriptableObject</h1><h2 id="平时开发存在的一些问题："><a href="#平时开发存在的一些问题：" class="headerlink" title="平时开发存在的一些问题："></a>平时开发存在的一些问题：</h2><ul>
<li><p>一个场景内有多个相同组件使用相同数值的时候，这个组件也在内存中多了一份实例，浪费内存空间。</p>
</li>
<li><p>static或者[Serializable]修饰的变量，在程序退出后会还原。编辑器模式运行时，只能通过Copy Component Values来临时保存调整好的数值。</p>
</li>
<li><p>项目之间、场景之间数据很难共享。</p>
</li>
<li><p>在runtime下要改变某个GameObject上组件的数值，就一定要获取到这个GameObject实例，使项目耦合度成倍提高，最后变成蜘蛛网。</p>
</li>
<li><p>场景中总会有一些空的GameObject用来保存和共享数据，这个GameObject基本不会参与太多的游戏逻辑，但为了保存和共享场景内的数据就不得不碍眼的在场景中出现，逼死强迫症，也不利于模块抽象。</p>
</li>
<li><p>同样，要通过UGUI Button中的On Click事件调用一个GameObject上的方法，也只能获取到GameObject实例来调用，数量太多的话也变成了蜘蛛网。</p>
</li>
</ul>
<h2 id="使用ScriptableObject如何解决"><a href="#使用ScriptableObject如何解决" class="headerlink" title="使用ScriptableObject如何解决"></a>使用ScriptableObject如何解决</h2><ul>
<li>ScriptableObject是将数据存储在.asset文件中的，可以理解为类似material这样的文件，ScriptableObject中存储的数值在runtime中作出修改，在退出后也会被保存下来。</li>
<li>同样，类似material文件，在多个地方需要用到同一个数据，只要把ScriptableObject生成的.asset文件拖入相应位置就可以，不必再指向某个单例或者实例。</li>
<li>可以被任何场景引用，在项目之间、场景之间很容易的共享数据。</li>
<li>不必为了保存数据在场景中放置一个空GameObject。让项目的复杂度和耦合度最大限度的降低，强迫症福音。</li>
<li>ScriptableObject是自定义的数据类型，应用非常灵活。</li>
<li>通过UGUI Button中的On Click事件只需要指向某一个ScriptableObject文件，而响应事件的GameObject也只需要获取到这个ScriptableObject文件即可触发，不必让按钮指向GameObject实例。大幅度减少了项目逻辑和结构的复杂程度。</li>
</ul>
<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><ol>
<li>通过ScriptableObject获取一个GameObject的实例。</li>
<li>不获取物体实例，通过ScriptableObject实现UnityEvent的执行。</li>
</ol>
<p>角色：player,enemy;</p>
<p>场景内会在随机位置生成任意数量的敌人，敌人会追着player一直跑，player通过移动来躲避敌人，每次碰到敌人就会减少生命值。</p>
<h2 id="开始实现"><a href="#开始实现" class="headerlink" title="开始实现"></a>开始实现</h2><h4 id="搭建场景和角色敌人"><a href="#搭建场景和角色敌人" class="headerlink" title="搭建场景和角色敌人:"></a>搭建场景和角色敌人:</h4><p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220606180524764.png" alt="image-20220606180524764"></p>
<h4 id="新建脚本FollowTransformSmooth，实现追踪功能，拖到enemy上面。"><a href="#新建脚本FollowTransformSmooth，实现追踪功能，拖到enemy上面。" class="headerlink" title="新建脚本FollowTransformSmooth，实现追踪功能，拖到enemy上面。"></a>新建脚本FollowTransformSmooth，实现追踪功能，拖到enemy上面。</h4><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FollowTransformSmooth</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//[SerializeField] Transform target;</span></span><br><span class="line">    [<span class="meta">SerializeField</span>] TargetTransform target;</span><br><span class="line">    [<span class="meta">SerializeField</span>] Rigidbody selfRigidbody;</span><br><span class="line">    [<span class="meta">SerializeField, Range(0f, 100f)</span>] <span class="built_in">float</span> moveSpeed = <span class="number">10f</span>;</span><br><span class="line">    Vector3 _destination;<span class="comment">//目的地</span></span><br><span class="line">    Vector3 _direction;<span class="comment">//方向</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">LateUpdate</span>()</span></span><br><span class="line">    &#123;<span class="comment">//LateUpdate 在调用所有 Update 函数后调用。</span></span><br><span class="line">        <span class="comment">//_destination = target.position;//怪物追踪目的地</span></span><br><span class="line">        _destination = target.targetTrans.position;<span class="comment">//怪物追踪目的地</span></span><br><span class="line">        _direction = (_destination - transform.position).normalized;<span class="comment">//怪物前进方向</span></span><br><span class="line">        <span class="comment">//AddForce,向刚体添加力,(vector3方向,ForceMode力类型)</span></span><br><span class="line">        selfRigidbody.AddForce(_direction * moveSpeed, ForceMode.Acceleration);</span><br><span class="line">        <span class="comment">// ForceMode.Force	向此刚体添加连续力，使用其质量。</span></span><br><span class="line">        <span class="comment">// ForceMode.Acceleration 向此刚体添加连续加速度，忽略其质量。</span></span><br><span class="line">        <span class="comment">// ForceMode.Impulse	向此刚体添加瞬时力冲击，考虑其质量。</span></span><br><span class="line">        <span class="comment">// ForceMode.VelocityChange	向此刚体添加瞬时速度变化，忽略其质量。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="新建TargetTransform脚本，继承ScriptableObject，用来存储主角的位置信息"><a href="#新建TargetTransform脚本，继承ScriptableObject，用来存储主角的位置信息" class="headerlink" title="新建TargetTransform脚本，继承ScriptableObject，用来存储主角的位置信息"></a>新建TargetTransform脚本，继承ScriptableObject，用来存储主角的位置信息</h4><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">[<span class="meta">CreateAssetMenu(menuName = <span class="string">&quot;mySubMenu/TargetTransform &quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TargetTransform</span> : <span class="title">ScriptableObject</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Transform targetTrans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>编译完在文件夹新建TargetTransform，命名为Player</strong></p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220606181512646.png" alt="image-20220606181512646"></p>
<h4 id="新建SetTarget脚本，主角位置数据赋值给TargetTransform。拖到player上"><a href="#新建SetTarget脚本，主角位置数据赋值给TargetTransform。拖到player上" class="headerlink" title="新建SetTarget脚本，主角位置数据赋值给TargetTransform。拖到player上"></a>新建SetTarget脚本，主角位置数据赋值给TargetTransform。拖到player上</h4><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SetTarget</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">SerializeField</span>] TargetTransform target;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        target.targetTrans = gameObject.transform;<span class="comment">//当前位置数据传递给TargetTransform</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="预制体上的配置："><a href="#预制体上的配置：" class="headerlink" title="预制体上的配置："></a>预制体上的配置：</h4><p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220606181229495.png" alt="image-20220606181229495"></p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220606181237509.png" alt="image-20220606181237509"></p>
]]></content>
      <categories>
        <category>unity</category>
      </categories>
      <tags>
        <tag>unity</tag>
        <tag>ScriptableObject</tag>
      </tags>
  </entry>
  <entry>
    <title>横板卷轴射击游戏笔记</title>
    <url>/Blog/2022/05/27/%E6%A8%AA%E6%9D%BF%E5%8D%B7%E8%BD%B4%E5%B0%84%E5%87%BB%E6%B8%B8%E6%88%8F%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="一、背景滚动实现方法"><a href="#一、背景滚动实现方法" class="headerlink" title="一、背景滚动实现方法"></a>一、背景滚动实现方法</h2><ul>
<li><p>创建一个3d对象Quad,重命名为SimpleBackground,调整好大小(跟图片差不多大)</p>
</li>
<li><p>新建一个材质,设置shader为Unlit&#x2F;Textu</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220525113508926.png" alt="image-20220525113508926"></p>
</li>
<li><p>将图片texture type设置为default，拖入材质。</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220525114905000.png" alt="image-20220525114905000"></p>
</li>
<li><p>将材质拖进SimpleBackground，这样就做好了背景。</p>
</li>
<li><p>通过实时更改材质中offset偏移值，来实现滚动效果</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220525115257651.png" alt="image-20220525115257651"></p>
</li>
<li><p>滚动代码如下：将Start()改为每帧刷新的协程(模拟Update())</p>
</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Material material;</span><br><span class="line">   [<span class="meta">SerializeField</span>] Vector2 scrollVelocity;<span class="comment">//速度</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">   &#123;</span><br><span class="line">       material = GetComponent&lt;Renderer&gt;().material;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">private</span> IEnumerator <span class="title">Start</span>()</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">while</span> (GameManager.GameState != GameState.GameOver)</span><br><span class="line">           <span class="comment">//游戏状态不为gameover可运行场景滚动</span></span><br><span class="line">       &#123;</span><br><span class="line">           material.mainTextureOffset += scrollVelocity * Time.deltaTime;</span><br><span class="line">           <span class="keyword">yield</span> <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h2 id="二、Input-System动作输入系统"><a href="#二、Input-System动作输入系统" class="headerlink" title="二、Input System动作输入系统"></a>二、Input System动作输入系统</h2><p>Input System（安装包）实现了一个，可使用任何类型输入设备来控制unity内容的系统。它旨在替代unity旧的输入管理器（UnityEngine.Input类），并且更为强大，灵活易用。</p>
<h3 id="安装输入系统"><a href="#安装输入系统" class="headerlink" title="安装输入系统"></a>安装输入系统</h3><p>Window-&gt;Pacjage Manager-&gt;UnityRegistry(搜索input)-&gt;安装</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220525193119457.png" alt="image-20220525193119457"></p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220525193205846.png" alt="image-20220525193205846"></p>
<h3 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a>实现功能</h3><p>新建InputActions文件</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220525193424028.png" alt="image-20220525193424028"></p>
<p>打开InputActions，绑定输入信号。</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220526133600652.png" alt="image-20220526133600652"></p>
<p>创建c#文件,注意名字可自定，我取名为PlayerInputActions。</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220527165032291.png" alt="image-20220527165032291"></p>
<p>新建一个PlayInput类,继承于ScriptableObject,<code>//ScriptableObject:一个类，如果需要创建【无需附加到游戏对象】的对象时，可从该类派生。【】表示强调。</code>继承PlayerInputActions类中的几个接口，实现接口。</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220527173825594.png" alt="image-20220527173825594"></p>
<h4 id="未完待续…-因为是好早之前看视频学的-详细的内容得去重看视频再补-目前还没那个时间"><a href="#未完待续…-因为是好早之前看视频学的-详细的内容得去重看视频再补-目前还没那个时间" class="headerlink" title="未完待续…(因为是好早之前看视频学的,详细的内容得去重看视频再补,目前还没那个时间)"></a>未完待续…(因为是好早之前看视频学的,详细的内容得去重看视频再补,目前还没那个时间)</h4>]]></content>
      <categories>
        <category>unity</category>
      </categories>
      <tags>
        <tag>unity</tag>
      </tags>
  </entry>
  <entry>
    <title>github图床搭建</title>
    <url>/Blog/2022/05/23/git%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\Blog\assets\css\APlayer.min.css"><script src="\Blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\Blog\assets\js\Meting.min.js"></script><p><strong>※提示:github是国外网站，所以图片加载速度一般，现在我已经换成了阿里云存储了，详细请看：<a href="https://niaoyu00.github.io/Blog/2022/10/24/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90/">https://niaoyu00.github.io/Blog/2022/10/24/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90/</a></strong></p>
<blockquote>
<p>gitee的图床居然炸了？！难怪我之前看网站里图片都没了，一直没意识到是gitee的问题。因为本人前段时间重装电脑系统，导致今天整理笔记的时候要重新配置picgo的图床，刚配置完一看图片显示都是空的…我一直怀疑是因为我typora没升级付费版，所以他不给显示。网上查了半天，最后才发现是gitee加了防盗链，虽然说拿他白嫖做图床有点不厚道，但是你既然开放了这个功能，要停的话至少提前说一下嘛。算了，回到重点，下面是<strong>github图床搭建流程</strong>，在此记录下来以后忘了可以看看：</p>
</blockquote>
<h2 id="1、新建一个github仓库，clone到本地，然后将gitee旧图片文件夹拷进来再上传。"><a href="#1、新建一个github仓库，clone到本地，然后将gitee旧图片文件夹拷进来再上传。" class="headerlink" title="1、新建一个github仓库，clone到本地，然后将gitee旧图片文件夹拷进来再上传。"></a>1、新建一个github仓库，clone到本地，然后将gitee旧图片文件夹拷进来再上传。</h2><p>完成后大概是这样：</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/pics/image-2022052319275.png" alt="image-2022052319275"></p>
<h2 id="2、仓库搞完去获取个人令牌"><a href="#2、仓库搞完去获取个人令牌" class="headerlink" title="2、仓库搞完去获取个人令牌"></a>2、仓库搞完去获取个人令牌</h2><p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220523192914167.png" alt="image-20220523192914167"></p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220523193134548.png" alt="image-20220523193134548"></p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220523193205679.png" alt="image-20220523193205679"></p>
<h3 id="名字随便取，自己记得就好。日期选无限期。下方选repo"><a href="#名字随便取，自己记得就好。日期选无限期。下方选repo" class="headerlink" title="名字随便取，自己记得就好。日期选无限期。下方选repo"></a>名字随便取，自己记得就好。日期选无限期。下方选repo</h3><p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220523193349159.png" alt="image-20220523193349159"></p>
<h3 id="然后获取token，记得复制"><a href="#然后获取token，记得复制" class="headerlink" title="然后获取token，记得复制"></a>然后获取token，记得复制</h3><p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220523193420375.png" alt="image-20220523193420375"></p>
<h2 id="3、打开picgo输入相应数据"><a href="#3、打开picgo输入相应数据" class="headerlink" title="3、打开picgo输入相应数据"></a>3、打开picgo输入相应数据</h2><p>仓库名直接复制github的http链接，删一下前半部分<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tLyVFOCVCRiU5OCVFNiU5QyU4OSVFNiU5QyU4MCVFNSU5MCU4RSVFNyU5QSU4NC5naXQlRTUlQjAlQjElRTglQTElOEMlRTMlODAlODIlRTYlOEMlODclRTUlQUUlOUElRTUlQUQlOTglRTUlODIlQTglRTglQjclQUYlRTUlQkUlODQlRTYlOUMlODAlRTUlQTUlQkQlRTUlODglQUIlRTUlQTElQUIlRUYlQkMlOEMlRTYlODglOTElRTglQUYlOTUlRTQlQkElODYlRTUlQkUlODglRTUlQUUlQjklRTYlOTglOTMlRTQlQjglOEElRTQlQkMlQTAlRTUlQTQlQjElRTglQjQlQTUlRTMlODAlODI=">https://github.com/还有最后的.git就行。指定存储路径最好别填，我试了很容易上传失败。<i class="fa fa-external-link-alt"></i></span></p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220523193616475.png" alt="image-20220523193616475"></p>
<h2 id="4、打开typora中文件-gt-偏好设置-gt-图像"><a href="#4、打开typora中文件-gt-偏好设置-gt-图像" class="headerlink" title="4、打开typora中文件-&gt;偏好设置-&gt;图像"></a>4、打开typora中文件-&gt;偏好设置-&gt;图像</h2><p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20220523193818256.png" alt="image-20220523193818256"></p>
<h3 id="按图片中操作完测试下"><a href="#按图片中操作完测试下" class="headerlink" title="按图片中操作完测试下"></a>按图片中操作完测试下</h3><p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/images/image-20220523193939032.png" alt="image-20220523193939032"></p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>unity滑条控制音量事件</title>
    <url>/Blog/2022/05/12/unity%E6%BB%91%E6%9D%A1%E6%8E%A7%E5%88%B6%E9%9F%B3%E9%87%8F%E4%BA%8B%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="slider-onValueChanged-AddListener"><a href="#slider-onValueChanged-AddListener" class="headerlink" title="slider.onValueChanged.AddListener"></a>slider.onValueChanged.AddListener</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">slider.onValueChanged.AddListener((<span class="built_in">float</span> v) =&gt;</span><br><span class="line">        &#123;<span class="comment">//v等价于slider.value</span></span><br><span class="line">            AudioTuning.Instance.SetMasterVolume(v);</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>

<h4 id="AudioTuning"><a href="#AudioTuning" class="headerlink" title="AudioTuning:"></a>AudioTuning:</h4><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AudioTuning</span> : <span class="title">SingLeton</span>&lt;<span class="title">AudioTuning</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">SerializeField</span>] AudioMixer audioMixer;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetMasterVolume</span>(<span class="params"><span class="built_in">float</span> volume</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        audioMixer.SetFloat(<span class="string">&quot;MasterVolume&quot;</span>, volume);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>unity</category>
      </categories>
      <tags>
        <tag>unity</tag>
      </tags>
  </entry>
  <entry>
    <title>unity中查找对象的五种方法</title>
    <url>/Blog/2022/05/12/unity%E4%B8%AD%E6%9F%A5%E6%89%BE%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%BA%94%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<ul>
<li>通过对象名称（Find方法）<ul>
<li><code>GameObject.Find(&quot;name&quot;)</code></li>
</ul>
</li>
<li>通过标签获取单个游戏对象（FindWithTag方法）<ul>
<li><code>GameObject.FindWithTag(&quot;Tag&quot;); </code></li>
</ul>
</li>
<li>通过标签获取多个游戏对象（FindGameObjectsWithTags方法）</li>
<li>通过类型获取单个游戏对象（FindObjectOfType方法）</li>
<li>通过类型获取多个游戏对象（FindObjectsOfType方法）</li>
</ul>
]]></content>
      <categories>
        <category>unity</category>
      </categories>
      <tags>
        <tag>unity</tag>
      </tags>
  </entry>
  <entry>
    <title>unity塔防demo记录</title>
    <url>/Blog/2022/03/09/unity%E5%A1%94%E9%98%B2demo%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h3 id="参考项目-https-www-bilibili-com-video-BV15W411976h"><a href="#参考项目-https-www-bilibili-com-video-BV15W411976h" class="headerlink" title="参考项目:https://www.bilibili.com/video/BV15W411976h"></a>参考项目:<a href="https://www.bilibili.com/video/BV15W411976h">https://www.bilibili.com/video/BV15W411976h</a></h3><h3 id="新加的功能"><a href="#新加的功能" class="headerlink" title="新加的功能"></a>新加的功能</h3><p>1.怪物球自转</p>
<p>2.不同炮台只可在特定颜色，区域内建造。</p>
<p>3.未选中炮台不可建造</p>
<h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><p>炮弹打中敌人之后发现后方的一个怪会持续扣血直到死亡。初步猜测是碰撞触发了多次，后来暂停看的时候发现，子弹爆炸特效(在子弹销毁时触发) 在敌人死亡的时候会一下子刷出特别多。因此我判断是子弹打入敌人之后没有实时销毁。运行一测，果然是。最后在子弹脚本中，释放子弹爆炸特效的前方增加了销毁自身的代码。修复了bug。</p>
<h3 id="待续"><a href="#待续" class="headerlink" title="待续.."></a>待续..</h3>]]></content>
      <categories>
        <category>unity</category>
      </categories>
      <tags>
        <tag>unity</tag>
        <tag>塔防demo</tag>
      </tags>
  </entry>
  <entry>
    <title>协调程序</title>
    <url>/Blog/2022/03/03/%E5%8D%8F%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="协程：协同程序"><a href="#协程：协同程序" class="headerlink" title="协程：协同程序"></a>协程：协同程序</h1><p><strong>协程的使用前提</strong>：直接或间接的继承MonoBehavior才可以使用。</p>
<p><strong>不足</strong>：会产生外的开销。</p>
<h3 id="协程方法与普通方法的区别："><a href="#协程方法与普通方法的区别：" class="headerlink" title="协程方法与普通方法的区别："></a>协程方法与普通方法的区别：</h3><p><strong>被调用时</strong>：普通方法被调用时，原来执行的部分保留现场，停止执行，然后去执行要调用的方法，并且，被调用的方法执行完之后才能返回到调用前的状态接着往下执行。。。协同方法的执行是不用等协同方法执行完再执行调用之前原来方法的代码。而是两者&#x3D;&#x3D;异步执行&#x3D;&#x3D;。</p>
<p>类似js的异步</p>
]]></content>
      <categories>
        <category>基础学习</category>
      </categories>
      <tags>
        <tag>unity</tag>
      </tags>
  </entry>
  <entry>
    <title>git指令</title>
    <url>/Blog/2022/03/01/git%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.配置提交人姓名: git config --global user.name提交人姓名</span><br><span class="line">2.配置提交人姓名: git config --global user.email提交人邮箱</span><br><span class="line">3.查看git配置信息: git config --list</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init          	  |初始化git仓库</span><br><span class="line">git status        	  |查看文件状态</span><br><span class="line">git add 文件列表    	|提交到暂存区</span><br><span class="line">git commit -m 提交信息  |向仓库提交代码</span><br></pre></td></tr></table></figure>

<p><strong>用&#x3D;&#x3D;暂存区&#x3D;&#x3D;中的文件覆盖&#x3D;&#x3D;电脑工作目录&#x3D;&#x3D;的文件：<code>git checkout 文件名</code></strong></p>
<p><strong>将文件从暂存区里删除: <code>git rm --cached 文件</code></strong></p>
<p><strong>将git仓库中置顶的更新&#x3D;&#x3D;记录恢复&#x3D;&#x3D;出来，并且覆盖&#x3D;&#x3D;暂存区和工作目录&#x3D;&#x3D;:</strong></p>
<p><strong><code>git reset --hard commitID</code></strong></p>
<h4 id="分支命令"><a href="#分支命令" class="headerlink" title="分支命令"></a>分支命令</h4><p><strong>功能分支 -&gt; 开发分支 -&gt; 主分支</strong></p>
<p><strong><code>git branch</code> 查看分支</strong></p>
<p><strong><code>git branch 分支名称</code> 创建分支</strong></p>
<p><strong><code>git checkout 分支名称</code> 切换分支</strong></p>
<p><strong><code>git merge 来源分支</code> &#x3D;&#x3D;合并分支&#x3D;&#x3D;</strong></p>
<p><strong><code>git branch -d 分支名称</code> 删除分支（分支被合并后才允许删除）（-D 强制删除）</strong></p>
<h3 id="暂时保存更改"><a href="#暂时保存更改" class="headerlink" title="暂时保存更改"></a>暂时保存更改</h3><p><strong>在git中，可以暂时提取分支上所有的改动并存储，让开发人员得到一个干净的工作副本，临时转向其他工作。</strong></p>
<p><strong>使用场景：分支临时切换</strong></p>
<ul>
<li><strong>存储临时改动：<code>git stash</code></strong><!--暂时保存--></li>
<li><strong>恢复改动：<code>git stash pop</code></strong></li>
</ul>
<h3 id="本地仓库推送到远程仓库"><a href="#本地仓库推送到远程仓库" class="headerlink" title="本地仓库推送到远程仓库"></a>本地仓库推送到远程仓库</h3><ol>
<li><p><strong>git push 远程仓库地址 分支名称</strong></p>
</li>
<li><p><strong>git remote add 远程仓库&#x3D;&#x3D;地址别名&#x3D;&#x3D; 远程仓库地址</strong></p>
</li>
<li><p><strong>git push 远程仓库&#x3D;&#x3D;地址别名&#x3D;&#x3D; 分支名称</strong></p>
</li>
<li><p><strong>git push &#x3D;&#x3D;-u&#x3D;&#x3D; 远程仓库地址别名 分支名称</strong></p>
<p><strong>-u 记住推送地址及分支，&#x3D;&#x3D;下次推送&#x3D;&#x3D;只需要输入&#x3D;&#x3D;git push&#x3D;&#x3D;即可</strong></p>
</li>
</ol>
<h3 id="拉取操作"><a href="#拉取操作" class="headerlink" title="拉取操作"></a>拉取操作</h3><h3 id="克隆仓库"><a href="#克隆仓库" class="headerlink" title="克隆仓库"></a>克隆仓库</h3><p><strong>克隆远端数据仓库到本地：<code>git clone 仓库地址</code></strong></p>
<p><strong>拉取远程仓库中最新的版本：<code>git pull 远程仓库地址 分支名称</code></strong></p>
<h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h3><p><strong>在多人同时开发一个项目时，如果两个人修改了同一个文件的同一个地方，就会发生冲突。冲突需要人为解决。</strong></p>
<h3 id="跨团队协作"><a href="#跨团队协作" class="headerlink" title="跨团队协作"></a>跨团队协作</h3><ol>
<li>程序员 C fork仓库</li>
<li>程序员 C 将仓库克隆在本地进行修改</li>
<li>程序员 C 将仓库推送到远程</li>
<li>程序员 C 发起pull reqest</li>
<li>原仓库作者审核</li>
<li>原仓库作者合并代码</li>
</ol>
<h3 id="ssh免登陆"><a href="#ssh免登陆" class="headerlink" title="ssh免登陆"></a>ssh免登陆</h3><p>生成秘钥：<code>ssh-keygen</code></p>
<p>秘钥存储目录：C:\Users\用户\.ssh</p>
<p>公钥名称：id_rsa.pub</p>
<p>私钥名称：id_rsa</p>
<p>公钥放在github</p>
<p>私钥放在本地</p>
<h3 id="GIT忽略清单"><a href="#GIT忽略清单" class="headerlink" title="GIT忽略清单"></a>GIT忽略清单</h3><p>将不需要被git管理的文件名字添加到此文件中，在执行git命令的时候，git就会忽略这些文件。</p>
<p>git忽略清单文件名称：**.gitignore**</p>
<p>将工作目录中的文件全部添加到暂存区：<code>git add .</code></p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>unity的Axis设置</title>
    <url>/Blog/2022/02/27/unity%E7%9A%84Axis%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<p>unity的Axis设置，路径为Edit-&gt;Project setting-&gt;Input:</p>
<p>属性如下：</p>
<p><strong>Name</strong>：&#x3D;&#x3D;按键名&#x3D;&#x3D;该键的名称，可以在脚本编程中直接引用他。比如：Input.GetButtonDown(“Jump”);</p>
<p><strong>Descriptive Name</strong>:&#x3D;&#x3D;【描述名】&#x3D;&#x3D;在游戏的独立机构中的配置对话框中，当控制值为正时候所显示的名称。默认空白。</p>
<p><strong>Negative Descriptive Name</strong>：&#x3D;&#x3D;【负描述】&#x3D;&#x3D;在游戏的独立机构中的配置对话框中，当控制值为负的时候所显示的名称。</p>
<p><strong>Nagative Button</strong>：&#x3D;&#x3D;【负向按钮】&#x3D;&#x3D;玩家按下这个按钮来让被控制物体向负方向运动。</p>
<p><strong>Positive Button</strong>：&#x3D;&#x3D;【正向按钮】&#x3D;&#x3D;玩家按下这个按钮让被控制物体向正方向运动。</p>
<p><strong>Alt Negative Button</strong>: 玩家可以使用的备选负向按钮，比如方向键和WASD</p>
<p><strong>Alt Positive Button</strong>：玩家可以使用的备选争相按钮。</p>
<p><strong>Gravity</strong>：&#x3D;&#x3D;【重力】&#x3D;&#x3D;如果玩家停止输入，该轴将恢复到空挡或0速度，其单位为单位每秒。</p>
<p><strong>Dead</strong>：&#x3D;&#x3D;【盲区】&#x3D;&#x3D;可以用在模拟控制。在模拟控制器上，在这个范围内的任何值都会映射到空档不会提供任何输入。</p>
<p><strong>Sensitivity</strong>：&#x3D;&#x3D;【灵敏度】&#x3D;&#x3D;可以用于数字控制，他是该轴向给定得值移动的速度。正负都可，单位为单位每秒。</p>
<p><strong>Snap</strong>：&#x3D;&#x3D;【对齐】&#x3D;&#x3D;如果选中，可以确保在同时按下正向和负向按钮时候该轴的值为空挡。</p>
<p><strong>Invert</strong>：&#x3D;&#x3D;【反转】&#x3D;&#x3D;迅速交换正向和负向控制键。</p>
<p><strong>Type</strong>：&#x3D;&#x3D;【类型】&#x3D;&#x3D;该键对应的输入设备类型。可以为Key，MouseButton，MouseMove，JoystickAxis，或Window Movement。</p>
<p><strong>Axis</strong>：&#x3D;&#x3D;【轴】&#x3D;&#x3D;这个控制方式有该输入设备的哪条轴指挥。这可受不同游戏手柄影响。</p>
<p><strong>JoyNum</strong>：&#x3D;&#x3D;【操作杆编号】&#x3D;&#x3D;多个操作杆在机器上市后，决定哪个哪个操作杆控制给定的轴。可以选择从所有的操作杆接受输入，或是为其制定一个特定的。</p>
]]></content>
      <categories>
        <category>unity</category>
      </categories>
      <tags>
        <tag>unity</tag>
      </tags>
  </entry>
  <entry>
    <title>计算器</title>
    <url>/Blog/2022/02/23/Csharp%E8%AE%A1%E7%AE%97%E5%99%A8/</url>
    <content><![CDATA[<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Calculator</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">string</span> inputStr = Console.ReadLine(); CalcOnline(inputStr);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">static</span> CalcInfo[] configs = <span class="keyword">new</span> CalcInfo[]</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">new</span> CalcInfo(<span class="string">&quot;+&quot;</span>,(a,b)=&gt;a+b),</span><br><span class="line">            <span class="keyword">new</span> CalcInfo(<span class="string">&quot;-&quot;</span>,(a,b)=&gt;a-b),</span><br><span class="line">            <span class="keyword">new</span> CalcInfo(<span class="string">&quot;*&quot;</span>,(a,b)=&gt;a*b),</span><br><span class="line">            <span class="keyword">new</span> CalcInfo(<span class="string">&quot;/&quot;</span>,(a,b)=&gt;a/b),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">CalcOnline</span>(<span class="params"><span class="built_in">string</span> inputStr</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> index = <span class="number">-1</span>;</span><br><span class="line">            Func&lt;<span class="built_in">float</span>, <span class="built_in">float</span>, <span class="built_in">float</span>&gt; func = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; configs.Length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> item = configs[i];</span><br><span class="line">                index = inputStr.IndexOf(item.tag);<span class="comment">//找到符号，返回所在下标，未找到返回-1</span></span><br><span class="line">                <span class="keyword">if</span> (index != <span class="number">-1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    func = item.func;<span class="comment">//如果找到的是+，那么index为1，+的func函数内容是a+b</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (index == <span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;只支持+-*/&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            CalcResult(inputStr, func, index);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">CalcResult</span>(<span class="params"><span class="built_in">string</span> inputStr, Func&lt;<span class="built_in">float</span>, <span class="built_in">float</span>, <span class="built_in">float</span>&gt; func, <span class="built_in">int</span> index</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> num1Str = inputStr.Substring(<span class="number">0</span>, index);<span class="comment">//0~index之间的内容(不包括后面的)赋值给num1Str，若输入1+2则获得1</span></span><br><span class="line">            <span class="built_in">int</span> strLen = inputStr.Count();</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;strLen:<span class="subst">&#123;strLen&#125;</span>,index:<span class="subst">&#123;index&#125;</span>&quot;</span>);</span><br><span class="line">            <span class="built_in">string</span> num2Str = inputStr.Substring(index+<span class="number">1</span>,strLen-index<span class="number">-1</span>);<span class="comment">//若输入1+2则获得2</span></span><br><span class="line">            <span class="built_in">float</span> num1 = <span class="built_in">float</span>.Parse(num1Str);</span><br><span class="line">            <span class="built_in">float</span> num2 = <span class="built_in">float</span>.Parse(num2Str);</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;num1:<span class="subst">&#123;num1&#125;</span>, num2:<span class="subst">&#123;num2&#125;</span>&quot;</span>);</span><br><span class="line">            <span class="built_in">float</span> result = func(num1, num2);</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;inputStr&#125;</span>的计算结果：<span class="subst">&#123;result&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CalcInfo</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> tag;</span><br><span class="line">        <span class="keyword">public</span> Func&lt;<span class="built_in">float</span>, <span class="built_in">float</span>, <span class="built_in">float</span>&gt; func;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">CalcInfo</span>(<span class="params"><span class="built_in">string</span> tag, Func&lt;<span class="built_in">float</span>, <span class="built_in">float</span>, <span class="built_in">float</span>&gt; func</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.tag = tag;</span><br><span class="line">            <span class="keyword">this</span>.func = func;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//5+6</span></span><br><span class="line"><span class="comment">//strLen:3,index:1</span></span><br><span class="line"><span class="comment">//num1:5, num2:6</span></span><br><span class="line"><span class="comment">//5+6的计算结果：11</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>基础学习</category>
      </categories>
      <tags>
        <tag>Csharp</tag>
      </tags>
  </entry>
  <entry>
    <title>委托</title>
    <url>/Blog/2022/02/22/%E5%A7%94%E6%89%98/</url>
    <content><![CDATA[<h1 id="委托"><a href="#委托" class="headerlink" title="委托"></a>委托</h1><h5 id="delegate：可以保存多个函数指针，试用-x3D-，-进行操作。"><a href="#delegate：可以保存多个函数指针，试用-x3D-，-进行操作。" class="headerlink" title="delegate：可以保存多个函数指针，试用&#x3D;+，-+进行操作。"></a>delegate：可以保存多个函数指针，试用&#x3D;+，-+进行操作。</h5><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将函数赋值给delegate，delegate会储存下来。</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">//Action无返回值</span></span><br><span class="line">            Action&lt;<span class="built_in">string</span>&gt; print = Print;</span><br><span class="line">            print(<span class="string">&quot;使用print打印&quot;</span>);</span><br><span class="line"></span><br><span class="line">            Func&lt;<span class="built_in">float</span>,<span class="built_in">float</span>,<span class="built_in">float</span>&gt; fc = Mul;<span class="comment">//打印：Func，第三个参数是返回值类型</span></span><br><span class="line">            <span class="keyword">var</span> f = fc(<span class="number">3</span>, <span class="number">4</span>).ToString(); <span class="comment">//打印：乘法3 * 4 = 12</span></span><br><span class="line">            Console.WriteLine(f);<span class="comment">//打印：12</span></span><br><span class="line"></span><br><span class="line">            CalFunc func = Add;</span><br><span class="line">            func(<span class="number">1.1f</span>, <span class="number">2</span>);<span class="comment">//打印：加法1.1+2=3.1</span></span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;加入Sub()&quot;</span>);</span><br><span class="line">            func += Sub;</span><br><span class="line">            func(<span class="number">1.1f</span>, <span class="number">2</span>);<span class="comment">//打印：减法1.1+2=3.1</span></span><br><span class="line">                          <span class="comment">//1.1-2=-0.9</span></span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;移除Add()&quot;</span>);</span><br><span class="line">            func -= Add;</span><br><span class="line">            func(<span class="number">1.1f</span>, <span class="number">2</span>);<span class="comment">//打印：减法1.1-2=-0.9</span></span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;-------------闭包↓----------------&quot;</span>);</span><br><span class="line">            <span class="built_in">int</span> intVal = <span class="number">10</span>;</span><br><span class="line">            <span class="comment">//匿名函数 执行后改变的值可作用到函数外。</span></span><br><span class="line">            Action aa = () =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                intVal += <span class="number">10</span>;</span><br><span class="line">            &#125;;</span><br><span class="line">            aa();<span class="comment">//调用</span></span><br><span class="line">            Console.WriteLine(intVal);<span class="comment">//打印：20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//无返回值，封装了一个print代替writeline</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Print</span>(<span class="params"><span class="built_in">string</span> info</span>)</span>  =&gt;Console.WriteLine(info);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义了delegate，可以存储函数指针</span></span><br><span class="line">        <span class="function"><span class="built_in">delegate</span> <span class="built_in">float</span> <span class="title">CalFunc</span>(<span class="params"><span class="built_in">float</span> f1, <span class="built_in">float</span> f2</span>)</span>;</span><br><span class="line">        <span class="comment">//下面是好几个函数，实现加减乘。</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="built_in">float</span> <span class="title">Add</span>(<span class="params"><span class="built_in">float</span> arg1, <span class="built_in">float</span> arg2</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;加法<span class="subst">&#123;arg1&#125;</span>+<span class="subst">&#123;arg2&#125;</span>=<span class="subst">&#123;arg1 + arg2&#125;</span>&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> arg1 + arg2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="built_in">float</span> <span class="title">Sub</span>(<span class="params"><span class="built_in">float</span> arg1, <span class="built_in">float</span> arg2</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;减法<span class="subst">&#123;arg1&#125;</span>-<span class="subst">&#123;arg2&#125;</span>=<span class="subst">&#123;arg1 - arg2&#125;</span>&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> arg1 - arg2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="built_in">float</span> <span class="title">Mul</span>(<span class="params"><span class="built_in">float</span> arg1, <span class="built_in">float</span> arg2</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;乘法<span class="subst">&#123;arg1&#125;</span>*<span class="subst">&#123;arg2&#125;</span>=<span class="subst">&#123;arg1 * arg2&#125;</span>&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> arg1 * arg2;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>基础学习</category>
      </categories>
      <tags>
        <tag>Csharp</tag>
      </tags>
  </entry>
  <entry>
    <title>Csharpclass与struct的关系</title>
    <url>/Blog/2022/02/21/CsharpClass%E4%B8%8EStruct%E7%9A%84%E5%85%B3%E7%B3%BB/</url>
    <content><![CDATA[<h1 id="值与引用的关系"><a href="#值与引用的关系" class="headerlink" title="值与引用的关系"></a>值与引用的关系</h1><p><img src="https://gitee.com/Niaoyu233/pic/raw/master/imgs/image-20220221193324778.png" alt="image-20220221193324778"></p>
<p><strong>值类型</strong>在栈中存储</p>
<p><strong>引用类型</strong>在堆中存储</p>
<p><img src="https://gitee.com/Niaoyu233/pic/raw/master/imgs/image-20220221190214776.png" alt="image-20220221190214776"></p>
<p>&#x3D;&#x3D;Class&#x3D;&#x3D;的<strong>值在堆里</strong>，<strong>地址在栈</strong>。(栈开一个空间存储地址，通过地址在堆里找到创建的值。)</p>
<p>&#x3D;&#x3D;Struct&#x3D;&#x3D;直接在栈里开辟空间来存储值。</p>
<p><img src="https://gitee.com/Niaoyu233/pic/raw/master/imgs/image-20220221190510185.png" alt="image-20220221190510185"></p>
<p>此处为cVec的地址与sVec x,sVec Y，开辟了三个。</p>
<p>再来看函数内部：</p>
<p><img src="https://gitee.com/Niaoyu233/pic/raw/master/imgs/image-20220221191418690.png" alt="image-20220221191418690"></p>
<p><img src="https://gitee.com/Niaoyu233/pic/raw/master/imgs/image-20220221191649642.png" alt="image-20220221191649642"></p>
<p>更改了cvec与svec的x值，</p>
<p>此时**cVec.print()**打印的值为</p>
<p><code>1cVec(100,0)</code></p>
<p>**sVec.print()**打印的值也为</p>
<p><code>sVec(100,0)</code></p>
<p>函数调用结束，目光回到上面初始开辟的空间。</p>
<p><img src="https://gitee.com/Niaoyu233/pic/raw/master/imgs/image-20220221191451664.png" alt="image-20220221191451664"></p>
<p>下方的**cVec.print()，sVec.print()**；</p>
<p><img src="https://gitee.com/Niaoyu233/pic/raw/master/imgs/image-20220221191540799.png" alt="image-20220221191540799"></p>
<p>打印结果为：</p>
<p><code>cVec(100,0)</code></p>
<p><code>sVec(0,0)</code></p>
<p>因为sVec是函数内创建的值，在外面他没有更改。而cVec是通过地址找到堆里的值，在函数里已经将值更改。</p>
<p>如果想要Struct的值跟class一样，需要再前面加ref</p>
<p><img src="https://gitee.com/Niaoyu233/pic/raw/master/imgs/image-20220221192825331.png" alt="image-20220221192825331"></p>
<p><img src="https://gitee.com/Niaoyu233/pic/raw/master/imgs/image-20220221192734477.png" alt="image-20220221192734477"></p>
<p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20220221192920676.png" alt="image-20220221192920676"></p>
]]></content>
      <categories>
        <category>基础学习</category>
      </categories>
      <tags>
        <tag>Csharp</tag>
      </tags>
  </entry>
  <entry>
    <title>Ue4材质快捷键（转载）</title>
    <url>/Blog/2022/02/18/%E6%9D%90%E8%B4%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<h3 id="虚幻材质里面的快捷键"><a href="#虚幻材质里面的快捷键" class="headerlink" title="虚幻材质里面的快捷键"></a>虚幻材质里面的快捷键</h3><p>注：以下快捷键都需要结合鼠标左键来创建</p>
<p>首先是数字键1234分别对应的是1234维的常数节点，然后这里有个主意的地方就是1维常数的参数快捷键是S，三维常数的参数快捷键是V。</p>
<p><img src="https://i0.hdslb.com/bfs/article/dad1288f3aef5afc85013d7192ae060e62b43d4c.png@942w_347h_progressive.webp" alt="img"></p>
<p>然后是ABCD ，A是Add加法节点， B是bumpoffset凹凸偏移，C是注释，D是Divide除法节点，当然还有我们的M,multiply乘法节点</p>
<p><img src="https://i0.hdslb.com/bfs/article/99e91e47133515fe1ecb9d3a1d1a9ebabc13dc0e.png@942w_251h_progressive.webp" alt="img"><img src="https://i0.hdslb.com/bfs/article/57c903623de786ff35fdaa58729e7b9046ecac33.png@474w_405h_progressive.webp" alt="img"></p>
<p>E就是我们的power节点了，F这个节点目前还不是很熟悉是一个UNspecified function什么类型的函数，欢迎补充。</p>
<p><img src="https://i0.hdslb.com/bfs/article/ad3cdde7b3cf74e5b6f75f14f31cbb81de6b4099.png@914w_453h_progressive.webp" alt="img"></p>
<p>L就是线性插值这个节点了。非常重要的！</p>
<p><img src="https://i0.hdslb.com/bfs/article/6809a744e8356e32eae663901ada2268c8655f88.png@408w_414h_progressive.webp" alt="img"></p>
<p>I是一个IF函数节点</p>
<p><img src="https://i0.hdslb.com/bfs/article/ba708c622154f137d0b16aaf679f05833849e99d.png@467w_563h_progressive.webp" alt="img"></p>
<p>N是我们的normalize</p>
<p><img src="https://i0.hdslb.com/bfs/article/aeb94cde1b72f9cd04848950d7813d188ce578f5.png@435w_372h_progressive.webp" alt="img"></p>
<p>O就是我们的1-x函数了one minus 反转~~</p>
<p><img src="https://i0.hdslb.com/bfs/article/48881efedc143f5c8b367b89f9ad6346b347815f.png@509w_422h_progressive.webp" alt="img"></p>
<p>P是panner平移节点</p>
<p><img src="https://i0.hdslb.com/bfs/article/261bbb5ba6bb37e7a1db758f78e69541b2ef7e9f.png@411w_401h_progressive.webp" alt="img"></p>
<p>R是refelction vector 反射向量</p>
<p><img src="https://i0.hdslb.com/bfs/article/264a0c2ae884e7d88dfd137b49886e541d2091e9.png@536w_411h_progressive.webp" alt="img"></p>
<p>T是Texture sample贴图节点，经常会用到。</p>
<p><img src="https://i0.hdslb.com/bfs/article/be7df26b1dcfebc98ca5badb142c94e1351395fa.png@483w_510h_progressive.webp" alt="img"></p>
<p>最后是U，UV贴图平铺的一个节点，也很重要</p>
<p><img src="https://i0.hdslb.com/bfs/article/c46d779470bfe2e14bb9dbd4f279b279067b2fcc.png@495w_396h_progressive.webp" alt="img"></p>
<p>作者：墨一良丶 <a href="https://www.bilibili.com/read/cv7905584?spm_id_from=333.999.0.0">https://www.bilibili.com/read/cv7905584?spm_id_from=333.999.0.0</a> 出处：bilibili</p>
]]></content>
      <categories>
        <category>ue4</category>
      </categories>
      <tags>
        <tag>ue4材质</tag>
      </tags>
  </entry>
  <entry>
    <title>Ue4材质边界混合</title>
    <url>/Blog/2021/10/30/%E8%BE%B9%E7%95%8C%E6%B7%B7%E5%90%88/</url>
    <content><![CDATA[<h1 id="边界混合"><a href="#边界混合" class="headerlink" title="边界混合"></a>边界混合</h1><p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211027163016705.png" alt="image-20211027163016705"></p>
<p>世界坐标纹理对齐，实现效果大概是：在地面添加物体，任意改变形状位置，材质纹理会自动对齐。</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211027164714177.png" alt="image-20211027164714177"></p>
<h1 id="边界混合2"><a href="#边界混合2" class="headerlink" title="边界混合2"></a>边界混合2</h1><p>解决PDO抖动显示问题</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211028230755743.png" alt="image-20211028230755743"></p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211028232839086.png" alt="image-20211028232839086"></p>
]]></content>
      <categories>
        <category>ue4</category>
      </categories>
      <tags>
        <tag>ue4材质</tag>
      </tags>
  </entry>
  <entry>
    <title>ue4decal贴花</title>
    <url>/Blog/2021/10/27/decal/</url>
    <content><![CDATA[<h1 id="decal贴花"><a href="#decal贴花" class="headerlink" title="decal贴花"></a>decal贴花</h1><p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211026144819865.png" alt="image-20211026144819865"></p>
<h3 id="材质"><a href="#材质" class="headerlink" title="材质"></a>材质</h3><ul>
<li>Tiling：平铺</li>
<li>Crop X：横向移动</li>
<li>Crop Y：纵向移动</li>
</ul>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211026174136186.png" alt="image-20211026174136186"></p>
<h2 id="08-Parallax"><a href="#08-Parallax" class="headerlink" title="08 - Parallax"></a>08 - Parallax</h2><p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211026174352870.png" alt="image-20211026174352870"></p>
<p>POM：侧面看也能看出高低差</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211026174550156.png" alt="image-20211026174550156"></p>
<p>Height Ratio：凸起部分的高度</p>
<p>Reference Plane：使用UsePOM会导致正常视角看贴花有显示bug，通过这个参数调整。</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211026174838836.png" alt="image-20211026174838836"></p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211026175110165.png" alt="image-20211026175110165"></p>
<h3 id="抖动，使颜色混合"><a href="#抖动，使颜色混合" class="headerlink" title="抖动，使颜色混合"></a>抖动，使颜色混合</h3><p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211027160917882.png" alt="image-20211027160917882"></p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211027161015716.png" alt="image-20211027161015716"></p>
]]></content>
      <categories>
        <category>ue4</category>
      </categories>
      <tags>
        <tag>ue4材质</tag>
      </tags>
  </entry>
  <entry>
    <title>ue4顶点绘制</title>
    <url>/Blog/2021/10/25/%E9%A1%B6%E7%82%B9%E7%BB%98%E5%88%B6/</url>
    <content><![CDATA[<h2 id="网格体绘制（顶点绘制）"><a href="#网格体绘制（顶点绘制）" class="headerlink" title="网格体绘制（顶点绘制）"></a>网格体绘制（顶点绘制）</h2><p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211025090537562.png" alt="image-20211025090537562"></p>
<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><h4 id="混合材质"><a href="#混合材质" class="headerlink" title="混合材质"></a>混合材质</h4><ul>
<li>打开这个，依顺序从<code>底层-&gt;中间层-&gt;顶层</code>进行选择。<img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211025091700720.png" alt="image-20211025091700720"></li>
<li>截图里红色框命名，蓝色框确认，创建后就是混合后的材质。<img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211025091835096.png" alt="image-20211025091835096"></li>
<li>然后将混合后材质拖进平面，调整平铺比例（视频里材质UV是4x4，而box盒子是一米见方，因此需要调整混合后材质的uv，将材质<code>02-Base Layer</code>参数平铺x平铺y改成四分之一）<img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211025092434448.png" alt="image-20211025092434448"></li>
</ul>
<h4 id="绘制"><a href="#绘制" class="headerlink" title="绘制"></a>绘制</h4><ul>
<li><p>模式&#x3D;&gt;网格体绘制</p>
</li>
<li><p>选择平面</p>
</li>
<li><p>选绘制，切换成黑色</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211025091243499.png" alt="image-20211025091243499"></p>
</li>
</ul>
<h3 id="通道选择："><a href="#通道选择：" class="headerlink" title="通道选择："></a>通道选择：</h3><p><strong>红：中间层</strong></p>
<p><strong>绿：顶层</strong></p>
<p><strong>蓝：水坑层（默认需要激活）</strong><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211025092917515.png" alt="image-20211025092917515"></p>
<h4 id="擦除：按住shift再画"><a href="#擦除：按住shift再画" class="headerlink" title="擦除：按住shift再画"></a>擦除：按住shift再画</h4><h3 id="高度混合方法"><a href="#高度混合方法" class="headerlink" title="高度混合方法"></a>高度混合方法</h3><p>在混合材质界面，给底层BaseLayer添加，基础层<strong>置换贴图-</strong><code>displacement map</code><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211025093330500.png" alt="image-20211025093330500"></p>
<p>之后在这里微调效果<img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211025093552241.png" alt="image-20211025093552241"></p>
<p>大致效果：</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211025093643300.png" alt="image-20211025093643300"></p>
<p>顶层也可以这么操作。</p>
<h4 id="Global"><a href="#Global" class="headerlink" title="Global"></a>Global</h4><p>可调节饱和度，亮度、对比度<img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211025094422165.png" alt="image-20211025094422165"></p>
<h4 id="粗糙度调节"><a href="#粗糙度调节" class="headerlink" title="粗糙度调节"></a>粗糙度调节</h4><p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211025101110034.png" alt="image-20211025101110034"></p>
<h4 id="使用独立的置换调整值"><a href="#使用独立的置换调整值" class="headerlink" title="使用独立的置换调整值"></a>使用独立的置换调整值</h4><p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211025110451854.png" alt="image-20211025110451854"></p>
<p>右边的勾勾，勾选之后<code>06-displacement</code>会增加选项</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211025110635737.png" alt="image-20211025110635737"></p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211025110944929.png" alt="image-20211025110944929"></p>
<p>选中哪个层调数值，相当于把那个层移高，或者下降</p>
<h5 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h5><ul>
<li>细看有瑕疵</li>
<li>性能消耗（需要去材质蓝图关闭）。</li>
</ul>
<h3 id="调整水材质"><a href="#调整水材质" class="headerlink" title="调整水材质"></a>调整水材质</h3><p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211025122901794.png" alt="image-20211025122901794"></p>
<p>Liquid Color：水颜色</p>
<p>Liquid Opacity：透明度 （水的深&#x2F;浅）</p>
<p>Liquid Falloff Roughness：边缘过渡的粗糙度（数值越小边缘越湿润）</p>
<p>Albedo Darkening Color：液体调白色&#x3D;&gt;模拟物体防水表面。液体调暗&#x3D;&gt;模拟物体表面渗入性</p>
<p>Liquid Wave Controls：波浪调整</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211025123319520.png" alt="image-20211025123319520"></p>
<ul>
<li>浪花大小（数值越小浪花越大）</li>
<li>浪花速度</li>
<li>上方水面 法线贴图的强度</li>
<li>无</li>
</ul>
<p>2和3一般一起调整。</p>
]]></content>
      <categories>
        <category>ue4</category>
      </categories>
      <tags>
        <tag>ue4材质</tag>
      </tags>
  </entry>
  <entry>
    <title>ue4材质笔记</title>
    <url>/Blog/2021/10/15/ue4%E6%9D%90%E8%B4%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><strong>简明PBR2：介绍了菲尼尔，以及两个网站可以查折射率</strong></p>
<h3 id="材质基础"><a href="#材质基础" class="headerlink" title="材质基础"></a>材质基础</h3><p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211015150409107.png" alt="image-20211015150409107"></p>
<p><strong>常量Constant：不能在材质实例中调整</strong></p>
<p><strong>变量Variable：可以在材质中调整</strong></p>
<p><strong>右键可以转换常量或变量</strong></p>
<p><strong>矢量Vector：表示颜色、坐标信息</strong></p>
<p><strong>标量Scalar：常用参数调整手段</strong></p>
<h3 id="用作展示颜色节点"><a href="#用作展示颜色节点" class="headerlink" title="用作展示颜色节点"></a>用作展示颜色节点</h3><p><strong>Variable3Vector节点</strong> </p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211015144638843.png" alt="image-20211015144638843"></p>
<h3 id="可调整参数"><a href="#可调整参数" class="headerlink" title="可调整参数"></a>可调整参数</h3><p><strong>ScalarParameter节点</strong></p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211015181754278.png" alt="image-20211015181754278"></p>
<h3 id="调用贴图"><a href="#调用贴图" class="headerlink" title="调用贴图"></a>调用贴图</h3><p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211015182038850.png" alt="image-20211015182038850"></p>
<p><strong>TextureCoordinate</strong></p>
<p><strong>控制纹理平铺</strong></p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211015190750115.png" alt="image-20211015190750115"></p>
<p><strong>lerp线性插值</strong></p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211015224727978.png" alt="image-20211015224727978"></p>
<p><strong>lerp可以混合两种颜色，加上一个标量来控制</strong></p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211015232030467.png" alt="image-20211015232030467"></p>
<p><strong>也可以混合法线贴图，前台控制法线程度</strong></p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211015231343367.png" alt="image-20211015231343367"></p>
<h3 id="2022年5月10日编辑-ue4材质内容基本忘光了-留着文章就当记录了"><a href="#2022年5月10日编辑-ue4材质内容基本忘光了-留着文章就当记录了" class="headerlink" title="2022年5月10日编辑:ue4材质内容基本忘光了,留着文章就当记录了."></a>2022年5月10日编辑:ue4材质内容基本忘光了,留着文章就当记录了.</h3>]]></content>
      <categories>
        <category>ue4</category>
      </categories>
      <tags>
        <tag>ue4材质</tag>
      </tags>
  </entry>
</search>
