<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ue4decal贴花</title>
    <url>/Blog/2021/10/27/decal/</url>
    <content><![CDATA[<h1 id="decal贴花"><a href="#decal贴花" class="headerlink" title="decal贴花"></a>decal贴花</h1><p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211026144819865.png" alt="image-20211026144819865"></p>
<h3 id="材质"><a href="#材质" class="headerlink" title="材质"></a>材质</h3><ul>
<li>Tiling：平铺</li>
<li>Crop X：横向移动</li>
<li>Crop Y：纵向移动</li>
</ul>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211026174136186.png" alt="image-20211026174136186"></p>
<h2 id="08-Parallax"><a href="#08-Parallax" class="headerlink" title="08 - Parallax"></a>08 - Parallax</h2><p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211026174352870.png" alt="image-20211026174352870"></p>
<p>POM：侧面看也能看出高低差</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211026174550156.png" alt="image-20211026174550156"></p>
<p>Height Ratio：凸起部分的高度</p>
<p>Reference Plane：使用UsePOM会导致正常视角看贴花有显示bug，通过这个参数调整。</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211026174838836.png" alt="image-20211026174838836"></p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211026175110165.png" alt="image-20211026175110165"></p>
<h3 id="抖动，使颜色混合"><a href="#抖动，使颜色混合" class="headerlink" title="抖动，使颜色混合"></a>抖动，使颜色混合</h3><p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211027160917882.png" alt="image-20211027160917882"></p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211027161015716.png" alt="image-20211027161015716"></p>
]]></content>
      <tags>
        <tag>ue4材质</tag>
      </tags>
  </entry>
  <entry>
    <title>git指令</title>
    <url>/Blog/2022/03/01/git%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.配置提交人姓名: git config --global user.name提交人姓名</span><br><span class="line">2.配置提交人姓名: git config --global user.email提交人邮箱</span><br><span class="line">3.查看git配置信息: git config --list</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init          	  |初始化git仓库</span><br><span class="line">git status        	  |查看文件状态</span><br><span class="line">git add 文件列表    	|提交到暂存区</span><br><span class="line">git commit -m 提交信息  |向仓库提交代码</span><br></pre></td></tr></table></figure>

<p><strong>用&#x3D;&#x3D;暂存区&#x3D;&#x3D;中的文件覆盖&#x3D;&#x3D;电脑工作目录&#x3D;&#x3D;的文件：<code>git checkout 文件名</code></strong></p>
<p><strong>将文件从暂存区里删除: <code>git rm --cached 文件</code></strong></p>
<p><strong>将git仓库中置顶的更新&#x3D;&#x3D;记录恢复&#x3D;&#x3D;出来，并且覆盖&#x3D;&#x3D;暂存区和工作目录&#x3D;&#x3D;:</strong></p>
<p><strong><code>git reset --hard commitID</code></strong></p>
<h4 id="分支命令"><a href="#分支命令" class="headerlink" title="分支命令"></a>分支命令</h4><p><strong>功能分支 -&gt; 开发分支 -&gt; 主分支</strong></p>
<p><strong><code>git branch</code> 查看分支</strong></p>
<p><strong><code>git branch 分支名称</code> 创建分支</strong></p>
<p><strong><code>git checkout 分支名称</code> 切换分支</strong></p>
<p><strong><code>git merge 来源分支</code> &#x3D;&#x3D;合并分支&#x3D;&#x3D;</strong></p>
<p><strong><code>git branch -d 分支名称</code> 删除分支（分支被合并后才允许删除）（-D 强制删除）</strong></p>
<h3 id="暂时保存更改"><a href="#暂时保存更改" class="headerlink" title="暂时保存更改"></a>暂时保存更改</h3><p><strong>在git中，可以暂时提取分支上所有的改动并存储，让开发人员得到一个干净的工作副本，临时转向其他工作。</strong></p>
<p><strong>使用场景：分支临时切换</strong></p>
<ul>
<li><strong>存储临时改动：<code>git stash</code></strong><!--暂时保存--></li>
<li><strong>恢复改动：<code>git stash pop</code></strong></li>
</ul>
<h3 id="本地仓库推送到远程仓库"><a href="#本地仓库推送到远程仓库" class="headerlink" title="本地仓库推送到远程仓库"></a>本地仓库推送到远程仓库</h3><ol>
<li><p><strong>git push 远程仓库地址 分支名称</strong></p>
</li>
<li><p><strong>git remote add 远程仓库&#x3D;&#x3D;地址别名&#x3D;&#x3D; 远程仓库地址</strong></p>
</li>
<li><p><strong>git push 远程仓库&#x3D;&#x3D;地址别名&#x3D;&#x3D; 分支名称</strong></p>
</li>
<li><p><strong>git push &#x3D;&#x3D;-u&#x3D;&#x3D; 远程仓库地址别名 分支名称</strong></p>
<p><strong>-u 记住推送地址及分支，&#x3D;&#x3D;下次推送&#x3D;&#x3D;只需要输入&#x3D;&#x3D;git push&#x3D;&#x3D;即可</strong></p>
</li>
</ol>
<h3 id="拉取操作"><a href="#拉取操作" class="headerlink" title="拉取操作"></a>拉取操作</h3><h3 id="克隆仓库"><a href="#克隆仓库" class="headerlink" title="克隆仓库"></a>克隆仓库</h3><p><strong>克隆远端数据仓库到本地：<code>git clone 仓库地址</code></strong></p>
<p><strong>拉取远程仓库中最新的版本：<code>git pull 远程仓库地址 分支名称</code></strong></p>
<h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h3><p><strong>在多人同时开发一个项目时，如果两个人修改了同一个文件的同一个地方，就会发生冲突。冲突需要人为解决。</strong></p>
<h3 id="跨团队协作"><a href="#跨团队协作" class="headerlink" title="跨团队协作"></a>跨团队协作</h3><ol>
<li>程序员 C fork仓库</li>
<li>程序员 C 将仓库克隆在本地进行修改</li>
<li>程序员 C 将仓库推送到远程</li>
<li>程序员 C 发起pull reqest</li>
<li>原仓库作者审核</li>
<li>原仓库作者合并代码</li>
</ol>
<h3 id="ssh免登陆"><a href="#ssh免登陆" class="headerlink" title="ssh免登陆"></a>ssh免登陆</h3><p>生成秘钥：<code>ssh-keygen</code></p>
<p>秘钥存储目录：C:\Users\用户\.ssh</p>
<p>公钥名称：id_rsa.pub</p>
<p>私钥名称：id_rsa</p>
<p>公钥放在github</p>
<p>私钥放在本地</p>
<h3 id="GIT忽略清单"><a href="#GIT忽略清单" class="headerlink" title="GIT忽略清单"></a>GIT忽略清单</h3><p>将不需要被git管理的文件名字添加到此文件中，在执行git命令的时候，git就会忽略这些文件。</p>
<p>git忽略清单文件名称：**.gitignore**</p>
<p>将工作目录中的文件全部添加到暂存区：<code>git add .</code></p>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>unity的Axis设置</title>
    <url>/Blog/2022/02/27/unity%E7%9A%84Axis%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="unity的Axis设置"><a href="#unity的Axis设置" class="headerlink" title="unity的Axis设置"></a>unity的Axis设置</h1><p>unity的Axis设置，路径为Edit-&gt;Project setting-&gt;Input:</p>
<p>属性如下：</p>
<p><strong>Name</strong>：&#x3D;&#x3D;按键名&#x3D;&#x3D;该键的名称，可以在脚本编程中直接引用他。比如：Input.GetButtonDown(“Jump”);</p>
<p><strong>Descriptive Name</strong>:&#x3D;&#x3D;【描述名】&#x3D;&#x3D;在游戏的独立机构中的配置对话框中，当控制值为正时候所显示的名称。默认空白。</p>
<p><strong>Negative Descriptive Name</strong>：&#x3D;&#x3D;【负描述】&#x3D;&#x3D;在游戏的独立机构中的配置对话框中，当控制值为负的时候所显示的名称。</p>
<p><strong>Nagative Button</strong>：&#x3D;&#x3D;【负向按钮】&#x3D;&#x3D;玩家按下这个按钮来让被控制物体向负方向运动。</p>
<p><strong>Positive Button</strong>：&#x3D;&#x3D;【正向按钮】&#x3D;&#x3D;玩家按下这个按钮让被控制物体向正方向运动。</p>
<p><strong>Alt Negative Button</strong>: 玩家可以使用的备选负向按钮，比如方向键和WASD</p>
<p><strong>Alt Positive Button</strong>：玩家可以使用的备选争相按钮。</p>
<p><strong>Gravity</strong>：&#x3D;&#x3D;【重力】&#x3D;&#x3D;如果玩家停止输入，该轴将恢复到空挡或0速度，其单位为单位每秒。</p>
<p><strong>Dead</strong>：&#x3D;&#x3D;【盲区】&#x3D;&#x3D;可以用在模拟控制。在模拟控制器上，在这个范围内的任何值都会映射到空档不会提供任何输入。</p>
<p><strong>Sensitivity</strong>：&#x3D;&#x3D;【灵敏度】&#x3D;&#x3D;可以用于数字控制，他是该轴向给定得值移动的速度。正负都可，单位为单位每秒。</p>
<p><strong>Snap</strong>：&#x3D;&#x3D;【对齐】&#x3D;&#x3D;如果选中，可以确保在同时按下正向和负向按钮时候该轴的值为空挡。</p>
<p><strong>Invert</strong>：&#x3D;&#x3D;【反转】&#x3D;&#x3D;迅速交换正向和负向控制键。</p>
<p><strong>Type</strong>：&#x3D;&#x3D;【类型】&#x3D;&#x3D;该键对应的输入设备类型。可以为Key，MouseButton，MouseMove，JoystickAxis，或Window Movement。</p>
<p><strong>Axis</strong>：&#x3D;&#x3D;【轴】&#x3D;&#x3D;这个控制方式有该输入设备的哪条轴指挥。这可受不同游戏手柄影响。</p>
<p><strong>JoyNum</strong>：&#x3D;&#x3D;【操作杆编号】&#x3D;&#x3D;多个操作杆在机器上市后，决定哪个哪个操作杆控制给定的轴。可以选择从所有的操作杆接受输入，或是为其制定一个特定的。</p>
]]></content>
      <tags>
        <tag>unity</tag>
      </tags>
  </entry>
  <entry>
    <title>ue4材质笔记</title>
    <url>/Blog/2021/10/15/ue4%E6%9D%90%E8%B4%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><strong>简明PBR2：介绍了菲尼尔，以及两个网站可以查折射率</strong></p>
<h3 id="材质基础"><a href="#材质基础" class="headerlink" title="材质基础"></a>材质基础</h3><p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211015150409107.png" alt="image-20211015150409107"></p>
<p><strong>常量Constant：不能在材质实例中调整</strong></p>
<p><strong>变量Variable：可以在材质中调整</strong></p>
<p><strong>右键可以转换常量或变量</strong></p>
<p><strong>矢量Vector：表示颜色、坐标信息</strong></p>
<p><strong>标量Scalar：常用参数调整手段</strong></p>
<h3 id="用作展示颜色节点"><a href="#用作展示颜色节点" class="headerlink" title="用作展示颜色节点"></a>用作展示颜色节点</h3><p><strong>Variable3Vector节点</strong> </p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211015144638843.png" alt="image-20211015144638843"></p>
<h3 id="可调整参数"><a href="#可调整参数" class="headerlink" title="可调整参数"></a>可调整参数</h3><p><strong>ScalarParameter节点</strong></p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211015181754278.png" alt="image-20211015181754278"></p>
<h3 id="调用贴图"><a href="#调用贴图" class="headerlink" title="调用贴图"></a>调用贴图</h3><p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211015182038850.png" alt="image-20211015182038850"></p>
<p><strong>TextureCoordinate</strong></p>
<p><strong>控制纹理平铺</strong></p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211015190750115.png" alt="image-20211015190750115"></p>
<p><strong>lerp线性插值</strong></p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211015224727978.png" alt="image-20211015224727978"></p>
<p><strong>lerp可以混合两种颜色，加上一个标量来控制</strong></p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211015232030467.png" alt="image-20211015232030467"></p>
<p><strong>也可以混合法线贴图，前台控制法线程度</strong></p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211015231343367.png" alt="image-20211015231343367"></p>
<h3 id="2022年5月10日编辑-ue4材质内容基本忘光了-留着文章就当记录了"><a href="#2022年5月10日编辑-ue4材质内容基本忘光了-留着文章就当记录了" class="headerlink" title="2022年5月10日编辑:ue4材质内容基本忘光了,留着文章就当记录了."></a>2022年5月10日编辑:ue4材质内容基本忘光了,留着文章就当记录了.</h3>]]></content>
      <tags>
        <tag>ue4材质</tag>
      </tags>
  </entry>
  <entry>
    <title>协调程序</title>
    <url>/Blog/2022/03/03/%E5%8D%8F%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="协程：协同程序"><a href="#协程：协同程序" class="headerlink" title="协程：协同程序"></a>协程：协同程序</h1><p><strong>协程的使用前提</strong>：直接或间接的继承MonoBehavior才可以使用。</p>
<p><strong>不足</strong>：会产生外的开销。</p>
<h3 id="协程方法与普通方法的区别："><a href="#协程方法与普通方法的区别：" class="headerlink" title="协程方法与普通方法的区别："></a>协程方法与普通方法的区别：</h3><p><strong>被调用时</strong>：普通方法被调用时，原来执行的部分保留现场，停止执行，然后去执行要调用的方法，并且，被调用的方法执行完之后才能返回到调用前的状态接着往下执行。。。协同方法的执行是不用等协同方法执行完再执行调用之前原来方法的代码。而是两者&#x3D;&#x3D;异步执行&#x3D;&#x3D;。</p>
<p>类似js的异步</p>
]]></content>
      <tags>
        <tag>unity</tag>
      </tags>
  </entry>
  <entry>
    <title>Ue4材质快捷键（转载）</title>
    <url>/Blog/2022/02/18/%E6%9D%90%E8%B4%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<h1 id="UE4材质的快捷键（转载）"><a href="#UE4材质的快捷键（转载）" class="headerlink" title="UE4材质的快捷键（转载）"></a>UE4材质的快捷键（转载）</h1><h3 id="虚幻材质里面的快捷键"><a href="#虚幻材质里面的快捷键" class="headerlink" title="虚幻材质里面的快捷键"></a>虚幻材质里面的快捷键</h3><p>注：以下快捷键都需要结合鼠标左键来创建</p>
<p>首先是数字键1234分别对应的是1234维的常数节点，然后这里有个主意的地方就是1维常数的参数快捷键是S，三维常数的参数快捷键是V。</p>
<p><img src="https://i0.hdslb.com/bfs/article/dad1288f3aef5afc85013d7192ae060e62b43d4c.png@942w_347h_progressive.webp" alt="img"></p>
<p>然后是ABCD ，A是Add加法节点， B是bumpoffset凹凸偏移，C是注释，D是Divide除法节点，当然还有我们的M,multiply乘法节点</p>
<p><img src="https://i0.hdslb.com/bfs/article/99e91e47133515fe1ecb9d3a1d1a9ebabc13dc0e.png@942w_251h_progressive.webp" alt="img"><img src="https://i0.hdslb.com/bfs/article/57c903623de786ff35fdaa58729e7b9046ecac33.png@474w_405h_progressive.webp" alt="img"></p>
<p>E就是我们的power节点了，F这个节点目前还不是很熟悉是一个UNspecified function什么类型的函数，欢迎补充。</p>
<p><img src="https://i0.hdslb.com/bfs/article/ad3cdde7b3cf74e5b6f75f14f31cbb81de6b4099.png@914w_453h_progressive.webp" alt="img"></p>
<p>L就是线性插值这个节点了。非常重要的！</p>
<p><img src="https://i0.hdslb.com/bfs/article/6809a744e8356e32eae663901ada2268c8655f88.png@408w_414h_progressive.webp" alt="img"></p>
<p>I是一个IF函数节点</p>
<p><img src="https://i0.hdslb.com/bfs/article/ba708c622154f137d0b16aaf679f05833849e99d.png@467w_563h_progressive.webp" alt="img"></p>
<p>N是我们的normalize</p>
<p><img src="https://i0.hdslb.com/bfs/article/aeb94cde1b72f9cd04848950d7813d188ce578f5.png@435w_372h_progressive.webp" alt="img"></p>
<p>O就是我们的1-x函数了one minus 反转~~</p>
<p><img src="https://i0.hdslb.com/bfs/article/48881efedc143f5c8b367b89f9ad6346b347815f.png@509w_422h_progressive.webp" alt="img"></p>
<p>P是panner平移节点</p>
<p><img src="https://i0.hdslb.com/bfs/article/261bbb5ba6bb37e7a1db758f78e69541b2ef7e9f.png@411w_401h_progressive.webp" alt="img"></p>
<p>R是refelction vector 反射向量</p>
<p><img src="https://i0.hdslb.com/bfs/article/264a0c2ae884e7d88dfd137b49886e541d2091e9.png@536w_411h_progressive.webp" alt="img"></p>
<p>T是Texture sample贴图节点，经常会用到。</p>
<p><img src="https://i0.hdslb.com/bfs/article/be7df26b1dcfebc98ca5badb142c94e1351395fa.png@483w_510h_progressive.webp" alt="img"></p>
<p>最后是U，UV贴图平铺的一个节点，也很重要</p>
<p><img src="https://i0.hdslb.com/bfs/article/c46d779470bfe2e14bb9dbd4f279b279067b2fcc.png@495w_396h_progressive.webp" alt="img"></p>
<p>作者：墨一良丶 <a class="link"   href="https://www.bilibili.com/read/cv7905584?spm_id_from=333.999.0.0" >https://www.bilibili.com/read/cv7905584?spm_id_from=333.999.0.0<i class="fas fa-external-link-alt"></i></a> 出处：bilibili</p>
]]></content>
      <tags>
        <tag>ue4材质</tag>
      </tags>
  </entry>
  <entry>
    <title>Ue4材质边界混合</title>
    <url>/Blog/2021/10/30/%E8%BE%B9%E7%95%8C%E6%B7%B7%E5%90%88/</url>
    <content><![CDATA[<h1 id="边界混合"><a href="#边界混合" class="headerlink" title="边界混合"></a>边界混合</h1><p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211027163016705.png" alt="image-20211027163016705"></p>
<p>世界坐标纹理对齐，实现效果大概是：在地面添加物体，任意改变形状位置，材质纹理会自动对齐。</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211027164714177.png" alt="image-20211027164714177"></p>
<h1 id="边界混合2"><a href="#边界混合2" class="headerlink" title="边界混合2"></a>边界混合2</h1><p>解决PDO抖动显示问题</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211028230755743.png" alt="image-20211028230755743"></p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211028232839086.png" alt="image-20211028232839086"></p>
]]></content>
      <tags>
        <tag>ue4材质</tag>
      </tags>
  </entry>
  <entry>
    <title>ue4顶点绘制</title>
    <url>/Blog/2021/10/25/%E9%A1%B6%E7%82%B9%E7%BB%98%E5%88%B6/</url>
    <content><![CDATA[<h2 id="网格体绘制（顶点绘制）"><a href="#网格体绘制（顶点绘制）" class="headerlink" title="网格体绘制（顶点绘制）"></a>网格体绘制（顶点绘制）</h2><p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211025090537562.png" alt="image-20211025090537562"></p>
<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><h4 id="混合材质"><a href="#混合材质" class="headerlink" title="混合材质"></a>混合材质</h4><ul>
<li>打开这个，依顺序从<code>底层-&gt;中间层-&gt;顶层</code>进行选择。<img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211025091700720.png" alt="image-20211025091700720"></li>
<li>截图里红色框命名，蓝色框确认，创建后就是混合后的材质。<img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211025091835096.png" alt="image-20211025091835096"></li>
<li>然后将混合后材质拖进平面，调整平铺比例（视频里材质UV是4x4，而box盒子是一米见方，因此需要调整混合后材质的uv，将材质<code>02-Base Layer</code>参数平铺x平铺y改成四分之一）<img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211025092434448.png" alt="image-20211025092434448"></li>
</ul>
<h4 id="绘制"><a href="#绘制" class="headerlink" title="绘制"></a>绘制</h4><ul>
<li><p>模式&#x3D;&gt;网格体绘制</p>
</li>
<li><p>选择平面</p>
</li>
<li><p>选绘制，切换成黑色</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211025091243499.png" alt="image-20211025091243499"></p>
</li>
</ul>
<h3 id="通道选择："><a href="#通道选择：" class="headerlink" title="通道选择："></a>通道选择：</h3><p><strong>红：中间层</strong></p>
<p><strong>绿：顶层</strong></p>
<p><strong>蓝：水坑层（默认需要激活）</strong><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211025092917515.png" alt="image-20211025092917515"></p>
<h4 id="擦除：按住shift再画"><a href="#擦除：按住shift再画" class="headerlink" title="擦除：按住shift再画"></a>擦除：按住shift再画</h4><h3 id="高度混合方法"><a href="#高度混合方法" class="headerlink" title="高度混合方法"></a>高度混合方法</h3><p>在混合材质界面，给底层BaseLayer添加，基础层<strong>置换贴图-</strong><code>displacement map</code><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211025093330500.png" alt="image-20211025093330500"></p>
<p>之后在这里微调效果<img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211025093552241.png" alt="image-20211025093552241"></p>
<p>大致效果：</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211025093643300.png" alt="image-20211025093643300"></p>
<p>顶层也可以这么操作。</p>
<h4 id="Global"><a href="#Global" class="headerlink" title="Global"></a>Global</h4><p>可调节饱和度，亮度、对比度<img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211025094422165.png" alt="image-20211025094422165"></p>
<h4 id="粗糙度调节"><a href="#粗糙度调节" class="headerlink" title="粗糙度调节"></a>粗糙度调节</h4><p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211025101110034.png" alt="image-20211025101110034"></p>
<h4 id="使用独立的置换调整值"><a href="#使用独立的置换调整值" class="headerlink" title="使用独立的置换调整值"></a>使用独立的置换调整值</h4><p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211025110451854.png" alt="image-20211025110451854"></p>
<p>右边的勾勾，勾选之后<code>06-displacement</code>会增加选项</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211025110635737.png" alt="image-20211025110635737"></p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211025110944929.png" alt="image-20211025110944929"></p>
<p>选中哪个层调数值，相当于把那个层移高，或者下降</p>
<h5 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h5><ul>
<li>细看有瑕疵</li>
<li>性能消耗（需要去材质蓝图关闭）。</li>
</ul>
<h3 id="调整水材质"><a href="#调整水材质" class="headerlink" title="调整水材质"></a>调整水材质</h3><p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211025122901794.png" alt="image-20211025122901794"></p>
<p>Liquid Color：水颜色</p>
<p>Liquid Opacity：透明度 （水的深&#x2F;浅）</p>
<p>Liquid Falloff Roughness：边缘过渡的粗糙度（数值越小边缘越湿润）</p>
<p>Albedo Darkening Color：液体调白色&#x3D;&gt;模拟物体防水表面。液体调暗&#x3D;&gt;模拟物体表面渗入性</p>
<p>Liquid Wave Controls：波浪调整</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20211025123319520.png" alt="image-20211025123319520"></p>
<ul>
<li>浪花大小（数值越小浪花越大）</li>
<li>浪花速度</li>
<li>上方水面 法线贴图的强度</li>
<li>无</li>
</ul>
<p>2和3一般一起调整。</p>
]]></content>
      <tags>
        <tag>ue4材质</tag>
      </tags>
  </entry>
  <entry>
    <title>unity塔防demo记录</title>
    <url>/Blog/2022/03/09/unity%E5%A1%94%E9%98%B2demo%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="塔防demo"><a href="#塔防demo" class="headerlink" title="塔防demo"></a>塔防demo</h1><h3 id="参考项目-https-www-bilibili-com-video-BV15W411976h"><a href="#参考项目-https-www-bilibili-com-video-BV15W411976h" class="headerlink" title="参考项目:https://www.bilibili.com/video/BV15W411976h"></a>参考项目:<a class="link"   href="https://www.bilibili.com/video/BV15W411976h" >https://www.bilibili.com/video/BV15W411976h<i class="fas fa-external-link-alt"></i></a></h3><h3 id="新加的功能"><a href="#新加的功能" class="headerlink" title="新加的功能"></a>新加的功能</h3><p>1.怪物球自转</p>
<p>2.不同炮台只可在特定颜色，区域内建造。</p>
<p>3.未选中炮台不可建造</p>
<h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><p>炮弹打中敌人之后发现后方的一个怪会持续扣血直到死亡。初步猜测是碰撞触发了多次，后来暂停看的时候发现，子弹爆炸特效(在子弹销毁时触发) 在敌人死亡的时候会一下子刷出特别多。因此我判断是子弹打入敌人之后没有实时销毁。运行一测，果然是。最后在子弹脚本中，释放子弹爆炸特效的前方增加了销毁自身的代码。修复了bug。</p>
<h3 id="待续"><a href="#待续" class="headerlink" title="待续.."></a>待续..</h3>]]></content>
      <tags>
        <tag>unity</tag>
        <tag>塔防demo</tag>
      </tags>
  </entry>
  <entry>
    <title>计算器</title>
    <url>/Blog/2022/02/23/Csharp%E8%AE%A1%E7%AE%97%E5%99%A8/</url>
    <content><![CDATA[<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Calculator</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">string</span> inputStr = Console.ReadLine(); CalcOnline(inputStr);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">static</span> CalcInfo[] configs = <span class="keyword">new</span> CalcInfo[]</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">new</span> CalcInfo(<span class="string">&quot;+&quot;</span>,(a,b)=&gt;a+b),</span><br><span class="line">            <span class="keyword">new</span> CalcInfo(<span class="string">&quot;-&quot;</span>,(a,b)=&gt;a-b),</span><br><span class="line">            <span class="keyword">new</span> CalcInfo(<span class="string">&quot;*&quot;</span>,(a,b)=&gt;a*b),</span><br><span class="line">            <span class="keyword">new</span> CalcInfo(<span class="string">&quot;/&quot;</span>,(a,b)=&gt;a/b),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">CalcOnline</span>(<span class="params"><span class="built_in">string</span> inputStr</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> index = <span class="number">-1</span>;</span><br><span class="line">            Func&lt;<span class="built_in">float</span>, <span class="built_in">float</span>, <span class="built_in">float</span>&gt; func = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; configs.Length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> item = configs[i];</span><br><span class="line">                index = inputStr.IndexOf(item.tag);<span class="comment">//找到符号，返回所在下标，未找到返回-1</span></span><br><span class="line">                <span class="keyword">if</span> (index != <span class="number">-1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    func = item.func;<span class="comment">//如果找到的是+，那么index为1，+的func函数内容是a+b</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (index == <span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;只支持+-*/&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            CalcResult(inputStr, func, index);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">CalcResult</span>(<span class="params"><span class="built_in">string</span> inputStr, Func&lt;<span class="built_in">float</span>, <span class="built_in">float</span>, <span class="built_in">float</span>&gt; func, <span class="built_in">int</span> index</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> num1Str = inputStr.Substring(<span class="number">0</span>, index);<span class="comment">//0~index之间的内容(不包括后面的)赋值给num1Str，若输入1+2则获得1</span></span><br><span class="line">            <span class="built_in">int</span> strLen = inputStr.Count();</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;strLen:<span class="subst">&#123;strLen&#125;</span>,index:<span class="subst">&#123;index&#125;</span>&quot;</span>);</span><br><span class="line">            <span class="built_in">string</span> num2Str = inputStr.Substring(index+<span class="number">1</span>,strLen-index<span class="number">-1</span>);<span class="comment">//若输入1+2则获得2</span></span><br><span class="line">            <span class="built_in">float</span> num1 = <span class="built_in">float</span>.Parse(num1Str);</span><br><span class="line">            <span class="built_in">float</span> num2 = <span class="built_in">float</span>.Parse(num2Str);</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;num1:<span class="subst">&#123;num1&#125;</span>, num2:<span class="subst">&#123;num2&#125;</span>&quot;</span>);</span><br><span class="line">            <span class="built_in">float</span> result = func(num1, num2);</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;inputStr&#125;</span>的计算结果：<span class="subst">&#123;result&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CalcInfo</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> tag;</span><br><span class="line">        <span class="keyword">public</span> Func&lt;<span class="built_in">float</span>, <span class="built_in">float</span>, <span class="built_in">float</span>&gt; func;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">CalcInfo</span>(<span class="params"><span class="built_in">string</span> tag, Func&lt;<span class="built_in">float</span>, <span class="built_in">float</span>, <span class="built_in">float</span>&gt; func</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.tag = tag;</span><br><span class="line">            <span class="keyword">this</span>.func = func;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//5+6</span></span><br><span class="line"><span class="comment">//strLen:3,index:1</span></span><br><span class="line"><span class="comment">//num1:5, num2:6</span></span><br><span class="line"><span class="comment">//5+6的计算结果：11</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Csharp</tag>
      </tags>
  </entry>
  <entry>
    <title>Csharpclass与struct的关系</title>
    <url>/Blog/2022/02/21/CsharpClass%E4%B8%8EStruct%E7%9A%84%E5%85%B3%E7%B3%BB/</url>
    <content><![CDATA[<h1 id="值与引用的关系"><a href="#值与引用的关系" class="headerlink" title="值与引用的关系"></a>值与引用的关系</h1><p><img src="https://gitee.com/Niaoyu233/pic/raw/master/imgs/image-20220221193324778.png" alt="image-20220221193324778"></p>
<p><strong>值类型</strong>在栈中存储</p>
<p><strong>引用类型</strong>在堆中存储</p>
<p><img src="https://gitee.com/Niaoyu233/pic/raw/master/imgs/image-20220221190214776.png" alt="image-20220221190214776"></p>
<p>&#x3D;&#x3D;Class&#x3D;&#x3D;的<strong>值在堆里</strong>，<strong>地址在栈</strong>。(栈开一个空间存储地址，通过地址在堆里找到创建的值。)</p>
<p>&#x3D;&#x3D;Struct&#x3D;&#x3D;直接在栈里开辟空间来存储值。</p>
<p><img src="https://gitee.com/Niaoyu233/pic/raw/master/imgs/image-20220221190510185.png" alt="image-20220221190510185"></p>
<p>此处为cVec的地址与sVec x,sVec Y，开辟了三个。</p>
<p>再来看函数内部：</p>
<p><img src="https://gitee.com/Niaoyu233/pic/raw/master/imgs/image-20220221191418690.png" alt="image-20220221191418690"></p>
<p><img src="https://gitee.com/Niaoyu233/pic/raw/master/imgs/image-20220221191649642.png" alt="image-20220221191649642"></p>
<p>更改了cvec与svec的x值，</p>
<p>此时**cVec.print()**打印的值为</p>
<p><code>1cVec(100,0)</code></p>
<p>**sVec.print()**打印的值也为</p>
<p><code>sVec(100,0)</code></p>
<p>函数调用结束，目光回到上面初始开辟的空间。</p>
<p><img src="https://gitee.com/Niaoyu233/pic/raw/master/imgs/image-20220221191451664.png" alt="image-20220221191451664"></p>
<p>下方的**cVec.print()，sVec.print()**；</p>
<p><img src="https://gitee.com/Niaoyu233/pic/raw/master/imgs/image-20220221191540799.png" alt="image-20220221191540799"></p>
<p>打印结果为：</p>
<p><code>cVec(100,0)</code></p>
<p><code>sVec(0,0)</code></p>
<p>因为sVec是函数内创建的值，在外面他没有更改。而cVec是通过地址找到堆里的值，在函数里已经将值更改。</p>
<p>如果想要Struct的值跟class一样，需要再前面加ref</p>
<p><img src="https://gitee.com/Niaoyu233/pic/raw/master/imgs/image-20220221192825331.png" alt="image-20220221192825331"></p>
<p><img src="https://gitee.com/Niaoyu233/pic/raw/master/imgs/image-20220221192734477.png" alt="image-20220221192734477"></p>
<p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20220221192920676.png" alt="image-20220221192920676"></p>
]]></content>
      <tags>
        <tag>Csharp</tag>
      </tags>
  </entry>
  <entry>
    <title>委托</title>
    <url>/Blog/2022/02/22/%E5%A7%94%E6%89%98/</url>
    <content><![CDATA[<h1 id="委托"><a href="#委托" class="headerlink" title="委托"></a>委托</h1><h5 id="delegate：可以保存多个函数指针，试用-x3D-，-进行操作。"><a href="#delegate：可以保存多个函数指针，试用-x3D-，-进行操作。" class="headerlink" title="delegate：可以保存多个函数指针，试用&#x3D;+，-+进行操作。"></a>delegate：可以保存多个函数指针，试用&#x3D;+，-+进行操作。</h5><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将函数赋值给delegate，delegate会储存下来。</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">//Action无返回值</span></span><br><span class="line">            Action&lt;<span class="built_in">string</span>&gt; print = Print;</span><br><span class="line">            print(<span class="string">&quot;使用print打印&quot;</span>);</span><br><span class="line"></span><br><span class="line">            Func&lt;<span class="built_in">float</span>,<span class="built_in">float</span>,<span class="built_in">float</span>&gt; fc = Mul;<span class="comment">//打印：Func，第三个参数是返回值类型</span></span><br><span class="line">            <span class="keyword">var</span> f = fc(<span class="number">3</span>, <span class="number">4</span>).ToString(); <span class="comment">//打印：乘法3 * 4 = 12</span></span><br><span class="line">            Console.WriteLine(f);<span class="comment">//打印：12</span></span><br><span class="line"></span><br><span class="line">            CalFunc func = Add;</span><br><span class="line">            func(<span class="number">1.1f</span>, <span class="number">2</span>);<span class="comment">//打印：加法1.1+2=3.1</span></span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;加入Sub()&quot;</span>);</span><br><span class="line">            func += Sub;</span><br><span class="line">            func(<span class="number">1.1f</span>, <span class="number">2</span>);<span class="comment">//打印：减法1.1+2=3.1</span></span><br><span class="line">                          <span class="comment">//1.1-2=-0.9</span></span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;移除Add()&quot;</span>);</span><br><span class="line">            func -= Add;</span><br><span class="line">            func(<span class="number">1.1f</span>, <span class="number">2</span>);<span class="comment">//打印：减法1.1-2=-0.9</span></span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;-------------闭包↓----------------&quot;</span>);</span><br><span class="line">            <span class="built_in">int</span> intVal = <span class="number">10</span>;</span><br><span class="line">            <span class="comment">//匿名函数 执行后改变的值可作用到函数外。</span></span><br><span class="line">            Action aa = () =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                intVal += <span class="number">10</span>;</span><br><span class="line">            &#125;;</span><br><span class="line">            aa();<span class="comment">//调用</span></span><br><span class="line">            Console.WriteLine(intVal);<span class="comment">//打印：20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//无返回值，封装了一个print代替writeline</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Print</span>(<span class="params"><span class="built_in">string</span> info</span>)</span>  =&gt;Console.WriteLine(info);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义了delegate，可以存储函数指针</span></span><br><span class="line">        <span class="function"><span class="built_in">delegate</span> <span class="built_in">float</span> <span class="title">CalFunc</span>(<span class="params"><span class="built_in">float</span> f1, <span class="built_in">float</span> f2</span>)</span>;</span><br><span class="line">        <span class="comment">//下面是好几个函数，实现加减乘。</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="built_in">float</span> <span class="title">Add</span>(<span class="params"><span class="built_in">float</span> arg1, <span class="built_in">float</span> arg2</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;加法<span class="subst">&#123;arg1&#125;</span>+<span class="subst">&#123;arg2&#125;</span>=<span class="subst">&#123;arg1 + arg2&#125;</span>&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> arg1 + arg2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="built_in">float</span> <span class="title">Sub</span>(<span class="params"><span class="built_in">float</span> arg1, <span class="built_in">float</span> arg2</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;减法<span class="subst">&#123;arg1&#125;</span>-<span class="subst">&#123;arg2&#125;</span>=<span class="subst">&#123;arg1 - arg2&#125;</span>&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> arg1 - arg2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="built_in">float</span> <span class="title">Mul</span>(<span class="params"><span class="built_in">float</span> arg1, <span class="built_in">float</span> arg2</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;乘法<span class="subst">&#123;arg1&#125;</span>*<span class="subst">&#123;arg2&#125;</span>=<span class="subst">&#123;arg1 * arg2&#125;</span>&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> arg1 * arg2;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Csharp</tag>
      </tags>
  </entry>
  <entry>
    <title>github图床搭建</title>
    <url>/Blog/2022/05/23/git%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<h1 id="github图床搭建"><a href="#github图床搭建" class="headerlink" title="github图床搭建"></a>github图床搭建</h1><p>​	gitee的图床居然炸了？！难怪我之前看网站里图片都没了，一直没意识到是gitee的问题。因为本人前段时间重装电脑系统，导致今天整理笔记的时候要重新配置picgo的图床，刚配置完一看图片显示都是空的…我一直怀疑是因为我typora没升级付费版，所以他不给显示。网上查了半天，最后才发现是gitee加了防盗链，虽然说拿他白嫖做图床有点不厚道，但是你既然开放了这个功能，要停的话至少提前说一下嘛。算了，回到重点，下面是<strong>github图床搭建流程</strong>，在此记录下来以后忘了可以看看：</p>
<h2 id="1、新建一个github仓库，clone到本地，然后将gitee旧图片文件夹拷进来再上传。"><a href="#1、新建一个github仓库，clone到本地，然后将gitee旧图片文件夹拷进来再上传。" class="headerlink" title="1、新建一个github仓库，clone到本地，然后将gitee旧图片文件夹拷进来再上传。"></a>1、新建一个github仓库，clone到本地，然后将gitee旧图片文件夹拷进来再上传。</h2><p>完成后大概是这样：</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/pics/image-2022052319275.png" alt="image-2022052319275"></p>
<h2 id="2、仓库搞完去获取个人令牌"><a href="#2、仓库搞完去获取个人令牌" class="headerlink" title="2、仓库搞完去获取个人令牌"></a>2、仓库搞完去获取个人令牌</h2><p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220523192914167.png" alt="image-20220523192914167"></p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220523193134548.png" alt="image-20220523193134548"></p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220523193205679.png" alt="image-20220523193205679"></p>
<h3 id="名字随便取，自己记得就好。日期选无限期。下方选repo"><a href="#名字随便取，自己记得就好。日期选无限期。下方选repo" class="headerlink" title="名字随便取，自己记得就好。日期选无限期。下方选repo"></a>名字随便取，自己记得就好。日期选无限期。下方选repo</h3><p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220523193349159.png" alt="image-20220523193349159"></p>
<h3 id="然后获取token，记得复制"><a href="#然后获取token，记得复制" class="headerlink" title="然后获取token，记得复制"></a>然后获取token，记得复制</h3><p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220523193420375.png" alt="image-20220523193420375"></p>
<h2 id="3、打开picgo输入相应数据"><a href="#3、打开picgo输入相应数据" class="headerlink" title="3、打开picgo输入相应数据"></a>3、打开picgo输入相应数据</h2><p>仓库名直接复制github的http链接，删一下前半部分<a class="link"   href="https://github.com/%E8%BF%98%E6%9C%89%E6%9C%80%E5%90%8E%E7%9A%84.git%E5%B0%B1%E8%A1%8C%E3%80%82%E6%8C%87%E5%AE%9A%E5%AD%98%E5%82%A8%E8%B7%AF%E5%BE%84%E6%9C%80%E5%A5%BD%E5%88%AB%E5%A1%AB%EF%BC%8C%E6%88%91%E8%AF%95%E4%BA%86%E5%BE%88%E5%AE%B9%E6%98%93%E4%B8%8A%E4%BC%A0%E5%A4%B1%E8%B4%A5%E3%80%82" >https://github.com/还有最后的.git就行。指定存储路径最好别填，我试了很容易上传失败。<i class="fas fa-external-link-alt"></i></a></p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220523193616475.png" alt="image-20220523193616475"></p>
<h2 id="4、打开typora中文件-gt-偏好设置-gt-图像"><a href="#4、打开typora中文件-gt-偏好设置-gt-图像" class="headerlink" title="4、打开typora中文件-&gt;偏好设置-&gt;图像"></a>4、打开typora中文件-&gt;偏好设置-&gt;图像</h2><p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/imgs/image-20220523193818256.png" alt="image-20220523193818256"></p>
<h3 id="按图片中操作完测试下"><a href="#按图片中操作完测试下" class="headerlink" title="按图片中操作完测试下"></a>按图片中操作完测试下</h3><p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/images/image-20220523193939032.png" alt="image-20220523193939032"></p>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>unity中查找对象的五种方法</title>
    <url>/Blog/2022/05/12/unity%E4%B8%AD%E6%9F%A5%E6%89%BE%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%BA%94%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="unity中查找对象的五种方法"><a href="#unity中查找对象的五种方法" class="headerlink" title="unity中查找对象的五种方法"></a>unity中查找对象的五种方法</h1><ul>
<li>通过对象名称（Find方法）<ul>
<li><code>GameObject.Find(&quot;name&quot;)</code></li>
</ul>
</li>
<li>通过标签获取单个游戏对象（FindWithTag方法）<ul>
<li><code>GameObject.FindWithTag(&quot;Tag&quot;); </code></li>
</ul>
</li>
<li>通过标签获取多个游戏对象（FindGameObjectsWithTags方法）</li>
<li>通过类型获取单个游戏对象（FindObjectOfType方法）</li>
<li>通过类型获取多个游戏对象（FindObjectsOfType方法）</li>
</ul>
]]></content>
      <tags>
        <tag>unity</tag>
      </tags>
  </entry>
  <entry>
    <title>ScriptableObject简单使用</title>
    <url>/Blog/2022/06/06/ScriptableObject/</url>
    <content><![CDATA[<h1 id="ScriptableObject"><a href="#ScriptableObject" class="headerlink" title="ScriptableObject"></a>ScriptableObject</h1><h2 id="平时开发存在的一些问题："><a href="#平时开发存在的一些问题：" class="headerlink" title="平时开发存在的一些问题："></a>平时开发存在的一些问题：</h2><ul>
<li><p>一个场景内有多个相同组件使用相同数值的时候，这个组件也在内存中多了一份实例，浪费内存空间。</p>
</li>
<li><p>static或者[Serializable]修饰的变量，在程序退出后会还原。编辑器模式运行时，只能通过Copy Component Values来临时保存调整好的数值。</p>
</li>
<li><p>项目之间、场景之间数据很难共享。</p>
</li>
<li><p>在runtime下要改变某个GameObject上组件的数值，就一定要获取到这个GameObject实例，使项目耦合度成倍提高，最后变成蜘蛛网。</p>
</li>
<li><p>场景中总会有一些空的GameObject用来保存和共享数据，这个GameObject基本不会参与太多的游戏逻辑，但为了保存和共享场景内的数据就不得不碍眼的在场景中出现，逼死强迫症，也不利于模块抽象。</p>
</li>
<li><p>同样，要通过UGUI Button中的On Click事件调用一个GameObject上的方法，也只能获取到GameObject实例来调用，数量太多的话也变成了蜘蛛网。</p>
</li>
</ul>
<h2 id="使用ScriptableObject如何解决"><a href="#使用ScriptableObject如何解决" class="headerlink" title="使用ScriptableObject如何解决"></a>使用ScriptableObject如何解决</h2><ul>
<li>ScriptableObject是将数据存储在.asset文件中的，可以理解为类似material这样的文件，ScriptableObject中存储的数值在runtime中作出修改，在退出后也会被保存下来。</li>
<li>同样，类似material文件，在多个地方需要用到同一个数据，只要把ScriptableObject生成的.asset文件拖入相应位置就可以，不必再指向某个单例或者实例。</li>
<li>可以被任何场景引用，在项目之间、场景之间很容易的共享数据。</li>
<li>不必为了保存数据在场景中放置一个空GameObject。让项目的复杂度和耦合度最大限度的降低，强迫症福音。</li>
<li>ScriptableObject是自定义的数据类型，应用非常灵活。</li>
<li>通过UGUI Button中的On Click事件只需要指向某一个ScriptableObject文件，而响应事件的GameObject也只需要获取到这个ScriptableObject文件即可触发，不必让按钮指向GameObject实例。大幅度减少了项目逻辑和结构的复杂程度。</li>
</ul>
<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><ol>
<li>通过ScriptableObject获取一个GameObject的实例。</li>
<li>不获取物体实例，通过ScriptableObject实现UnityEvent的执行。</li>
</ol>
<p>角色：player,enemy;</p>
<p>场景内会在随机位置生成任意数量的敌人，敌人会追着player一直跑，player通过移动来躲避敌人，每次碰到敌人就会减少生命值。</p>
<h2 id="开始实现"><a href="#开始实现" class="headerlink" title="开始实现"></a>开始实现</h2><h4 id="搭建场景和角色敌人"><a href="#搭建场景和角色敌人" class="headerlink" title="搭建场景和角色敌人:"></a>搭建场景和角色敌人:</h4><p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220606180524764.png" alt="image-20220606180524764"></p>
<h4 id="新建脚本FollowTransformSmooth，实现追踪功能，拖到enemy上面。"><a href="#新建脚本FollowTransformSmooth，实现追踪功能，拖到enemy上面。" class="headerlink" title="新建脚本FollowTransformSmooth，实现追踪功能，拖到enemy上面。"></a>新建脚本FollowTransformSmooth，实现追踪功能，拖到enemy上面。</h4><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FollowTransformSmooth</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//[SerializeField] Transform target;</span></span><br><span class="line">    [<span class="meta">SerializeField</span>] TargetTransform target;</span><br><span class="line">    [<span class="meta">SerializeField</span>] Rigidbody selfRigidbody;</span><br><span class="line">    [<span class="meta">SerializeField, Range(0f, 100f)</span>] <span class="built_in">float</span> moveSpeed = <span class="number">10f</span>;</span><br><span class="line">    Vector3 _destination;<span class="comment">//目的地</span></span><br><span class="line">    Vector3 _direction;<span class="comment">//方向</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">LateUpdate</span>()</span></span><br><span class="line">    &#123;<span class="comment">//LateUpdate 在调用所有 Update 函数后调用。</span></span><br><span class="line">        <span class="comment">//_destination = target.position;//怪物追踪目的地</span></span><br><span class="line">        _destination = target.targetTrans.position;<span class="comment">//怪物追踪目的地</span></span><br><span class="line">        _direction = (_destination - transform.position).normalized;<span class="comment">//怪物前进方向</span></span><br><span class="line">        <span class="comment">//AddForce,向刚体添加力,(vector3方向,ForceMode力类型)</span></span><br><span class="line">        selfRigidbody.AddForce(_direction * moveSpeed, ForceMode.Acceleration);</span><br><span class="line">        <span class="comment">// ForceMode.Force	向此刚体添加连续力，使用其质量。</span></span><br><span class="line">        <span class="comment">// ForceMode.Acceleration 向此刚体添加连续加速度，忽略其质量。</span></span><br><span class="line">        <span class="comment">// ForceMode.Impulse	向此刚体添加瞬时力冲击，考虑其质量。</span></span><br><span class="line">        <span class="comment">// ForceMode.VelocityChange	向此刚体添加瞬时速度变化，忽略其质量。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="新建TargetTransform脚本，继承ScriptableObject，用来存储主角的位置信息"><a href="#新建TargetTransform脚本，继承ScriptableObject，用来存储主角的位置信息" class="headerlink" title="新建TargetTransform脚本，继承ScriptableObject，用来存储主角的位置信息"></a>新建TargetTransform脚本，继承ScriptableObject，用来存储主角的位置信息</h4><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">[<span class="meta">CreateAssetMenu(menuName = <span class="string">&quot;mySubMenu/TargetTransform &quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TargetTransform</span> : <span class="title">ScriptableObject</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Transform targetTrans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>编译完在文件夹新建TargetTransform，命名为Player</strong></p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220606181512646.png" alt="image-20220606181512646"></p>
<h4 id="新建SetTarget脚本，主角位置数据赋值给TargetTransform。拖到player上"><a href="#新建SetTarget脚本，主角位置数据赋值给TargetTransform。拖到player上" class="headerlink" title="新建SetTarget脚本，主角位置数据赋值给TargetTransform。拖到player上"></a>新建SetTarget脚本，主角位置数据赋值给TargetTransform。拖到player上</h4><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SetTarget</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">SerializeField</span>] TargetTransform target;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        target.targetTrans = gameObject.transform;<span class="comment">//当前位置数据传递给TargetTransform</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="预制体上的配置："><a href="#预制体上的配置：" class="headerlink" title="预制体上的配置："></a>预制体上的配置：</h4><p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220606181229495.png" alt="image-20220606181229495"></p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220606181237509.png" alt="image-20220606181237509"></p>
]]></content>
      <tags>
        <tag>unity</tag>
        <tag>ScriptableObject</tag>
      </tags>
  </entry>
  <entry>
    <title>unity滑条控制音量事件</title>
    <url>/Blog/2022/05/12/unity%E6%BB%91%E6%9D%A1%E6%8E%A7%E5%88%B6%E9%9F%B3%E9%87%8F%E4%BA%8B%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="unity滑条控制音量事件"><a href="#unity滑条控制音量事件" class="headerlink" title="unity滑条控制音量事件"></a>unity滑条控制音量事件</h1><h3 id="slider-onValueChanged-AddListener"><a href="#slider-onValueChanged-AddListener" class="headerlink" title="slider.onValueChanged.AddListener"></a>slider.onValueChanged.AddListener</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">slider.onValueChanged.AddListener((<span class="built_in">float</span> v) =&gt;</span><br><span class="line">        &#123;<span class="comment">//v等价于slider.value</span></span><br><span class="line">            AudioTuning.Instance.SetMasterVolume(v);</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>

<h4 id="AudioTuning"><a href="#AudioTuning" class="headerlink" title="AudioTuning:"></a>AudioTuning:</h4><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AudioTuning</span> : <span class="title">SingLeton</span>&lt;<span class="title">AudioTuning</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">SerializeField</span>] AudioMixer audioMixer;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetMasterVolume</span>(<span class="params"><span class="built_in">float</span> volume</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        audioMixer.SetFloat(<span class="string">&quot;MasterVolume&quot;</span>, volume);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>unity</tag>
      </tags>
  </entry>
  <entry>
    <title>横板卷轴射击游戏笔记</title>
    <url>/Blog/2022/05/27/%E6%A8%AA%E6%9D%BF%E5%8D%B7%E8%BD%B4%E5%B0%84%E5%87%BB%E6%B8%B8%E6%88%8F%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="横板卷轴射击游戏笔记"><a href="#横板卷轴射击游戏笔记" class="headerlink" title="横板卷轴射击游戏笔记"></a>横板卷轴射击游戏笔记</h1><h2 id="一、背景滚动实现方法"><a href="#一、背景滚动实现方法" class="headerlink" title="一、背景滚动实现方法"></a>一、背景滚动实现方法</h2><ul>
<li><p>创建一个3d对象Quad,重命名为SimpleBackground,调整好大小(跟图片差不多大)</p>
</li>
<li><p>新建一个材质,设置shader为Unlit&#x2F;Textu</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220525113508926.png" alt="image-20220525113508926"></p>
</li>
<li><p>将图片texture type设置为default，拖入材质。</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220525114905000.png" alt="image-20220525114905000"></p>
</li>
<li><p>将材质拖进SimpleBackground，这样就做好了背景。</p>
</li>
<li><p>通过实时更改材质中offset偏移值，来实现滚动效果</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220525115257651.png" alt="image-20220525115257651"></p>
</li>
<li><p>滚动代码如下：将Start()改为每帧刷新的协程(模拟Update())</p>
</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Material material;</span><br><span class="line">   [<span class="meta">SerializeField</span>] Vector2 scrollVelocity;<span class="comment">//速度</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">   &#123;</span><br><span class="line">       material = GetComponent&lt;Renderer&gt;().material;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">private</span> IEnumerator <span class="title">Start</span>()</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">while</span> (GameManager.GameState != GameState.GameOver)</span><br><span class="line">           <span class="comment">//游戏状态不为gameover可运行场景滚动</span></span><br><span class="line">       &#123;</span><br><span class="line">           material.mainTextureOffset += scrollVelocity * Time.deltaTime;</span><br><span class="line">           <span class="keyword">yield</span> <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h2 id="二、Input-System动作输入系统"><a href="#二、Input-System动作输入系统" class="headerlink" title="二、Input System动作输入系统"></a>二、Input System动作输入系统</h2><p>Input System（安装包）实现了一个，可使用任何类型输入设备来控制unity内容的系统。它旨在替代unity旧的输入管理器（UnityEngine.Input类），并且更为强大，灵活易用。</p>
<h3 id="安装输入系统"><a href="#安装输入系统" class="headerlink" title="安装输入系统"></a>安装输入系统</h3><p>Window-&gt;Pacjage Manager-&gt;UnityRegistry(搜索input)-&gt;安装</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220525193119457.png" alt="image-20220525193119457"></p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220525193205846.png" alt="image-20220525193205846"></p>
<h3 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a>实现功能</h3><p>新建InputActions文件</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220525193424028.png" alt="image-20220525193424028"></p>
<p>打开InputActions，绑定输入信号。</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220526133600652.png" alt="image-20220526133600652"></p>
<p>创建c#文件,注意名字可自定，我取名为PlayerInputActions。</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220527165032291.png" alt="image-20220527165032291"></p>
<p>新建一个PlayInput类,继承于ScriptableObject,<code>//ScriptableObject:一个类，如果需要创建【无需附加到游戏对象】的对象时，可从该类派生。【】表示强调。</code>继承PlayerInputActions类中的几个接口，实现接口。</p>
<p><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/image-20220527173825594.png" alt="image-20220527173825594"></p>
]]></content>
      <tags>
        <tag>unity</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式(搬运)</title>
    <url>/Blog/2022/06/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<p align="center">
    <br/>
    <a href="https://github.com/ziishaned/learn-regex">
        <img src="https://i.imgur.com/bYwl7Vf.png" alt="Learn Regex">
    </a>
    <br /><br />
    <p>
        <a href="https://twitter.com/home?status=Learn%20regex%20the%20easy%20way%20by%20%40ziishaned%20http%3A//github.com/ziishaned/learn-regex">
            <img src="https://img.shields.io/badge/twitter-tweet-blue.svg?style=flat-square"/>
        </a>
        <a href="https://twitter.com/ziishaned">
            <img src="https://img.shields.io/badge/feedback-@ziishaned-blue.svg?style=flat-square" />
        </a>
    </p>
</p>


<h2 id="什么是正则表达式？"><a href="#什么是正则表达式？" class="headerlink" title="什么是正则表达式？"></a>什么是正则表达式？</h2><blockquote>
<p>正则表达式是一组由字母和符号组成的特殊文本，它可以用来从文本中找出满足你想要的格式的句子。</p>
</blockquote>
<p>一个正则表达式是一种从左到右匹配主体字符串的模式。<br>“Regular expression”这个词比较拗口，我们常使用缩写的术语“regex”或“regexp”。<br>正则表达式可以从一个基础字符串中根据一定的匹配模式替换文本中的字符串、验证表单、提取字符串等等。</p>
<p>想象你正在写一个应用，然后你想设定一个用户命名的规则，让用户名包含字符、数字、下划线和连字符，以及限制字符的个数，好让名字看起来没那么丑。<br>我们使用以下正则表达式来验证一个用户名：</p>
<p><img src="https://raw.githubusercontent.com/ziishaned/learn-regex/master/img/regexp-cn.png"></p>
<p>以上的正则表达式可以接受 <code>john_doe</code>、<code>jo-hn_doe</code>、<code>john12_as</code>。<br>但不匹配<code>Jo</code>，因为它包含了大写的字母而且太短了。</p>
<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul>
<li><a href="#1-%E5%9F%BA%E6%9C%AC%E5%8C%B9%E9%85%8D">1. 基本匹配</a></li>
<li><a href="#2-%E5%85%83%E5%AD%97%E7%AC%A6">2. 元字符</a><ul>
<li><a href="#21-%E7%82%B9%E8%BF%90%E7%AE%97%E7%AC%A6-">2.1 点运算符 .</a></li>
<li><a href="#22-%E5%AD%97%E7%AC%A6%E9%9B%86">2.2 字符集</a><ul>
<li><a href="#221-%E5%90%A6%E5%AE%9A%E5%AD%97%E7%AC%A6%E9%9B%86">2.2.1 否定字符集</a></li>
</ul>
</li>
<li><a href="#23-%E9%87%8D%E5%A4%8D%E6%AC%A1%E6%95%B0">2.3 重复次数</a><ul>
<li><a href="#231--%E5%8F%B7">2.3.1 * 号</a></li>
<li><a href="#232--%E5%8F%B7">2.3.2 + 号</a></li>
<li><a href="#233--%E5%8F%B7">2.3.3 ? 号</a></li>
</ul>
</li>
<li><a href="#24--%E5%8F%B7">2.4 {} 号</a></li>
<li><a href="#25--%E7%89%B9%E5%BE%81%E6%A0%87%E7%BE%A4">2.5 (…) 特征标群</a></li>
<li><a href="#26--%E6%88%96%E8%BF%90%E7%AE%97%E7%AC%A6">2.6 | 或运算符</a></li>
<li><a href="#27-%E8%BD%AC%E7%A0%81%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6">2.7 转码特殊字符</a></li>
<li><a href="#28-%E9%94%9A%E7%82%B9">2.8 锚点</a><ul>
<li><a href="#281--%E5%8F%B7">2.8.1 ^ 号</a></li>
<li><a href="#282--%E5%8F%B7">2.8.2 $ 号</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#3-%E7%AE%80%E5%86%99%E5%AD%97%E7%AC%A6%E9%9B%86">3. 简写字符集</a></li>
<li><a href="#4-%E9%9B%B6%E5%AE%BD%E5%BA%A6%E6%96%AD%E8%A8%80%E5%89%8D%E5%90%8E%E9%A2%84%E6%9F%A5">4. 零宽度断言(前后预查)</a><ul>
<li><a href="#41--%E6%AD%A3%E5%85%88%E8%A1%8C%E6%96%AD%E8%A8%80">4.1 ?&#x3D;… 正先行断言</a></li>
<li><a href="#42--%E8%B4%9F%E5%85%88%E8%A1%8C%E6%96%AD%E8%A8%80">4.2 ?!… 负先行断言</a></li>
<li><a href="#43---%E6%AD%A3%E5%90%8E%E5%8F%91%E6%96%AD%E8%A8%80">4.3 ?&lt;&#x3D; … 正后发断言</a></li>
<li><a href="#44--%E8%B4%9F%E5%90%8E%E5%8F%91%E6%96%AD%E8%A8%80">4.4 ?&lt;!… 负后发断言</a></li>
</ul>
</li>
<li><a href="#5-%E6%A0%87%E5%BF%97">5. 标志</a><ul>
<li><a href="#51-%E5%BF%BD%E7%95%A5%E5%A4%A7%E5%B0%8F%E5%86%99-case-insensitive">5.1 忽略大小写（Case Insensitive）</a></li>
<li><a href="#52-%E5%85%A8%E5%B1%80%E6%90%9C%E7%B4%A2-global-search">5.2 全局搜索（Global search）</a></li>
<li><a href="#53-%E5%A4%9A%E8%A1%8C%E4%BF%AE%E9%A5%B0%E7%AC%A6-multiline">5.3 多行修饰符（Multiline）</a></li>
</ul>
</li>
<li><a href="#%E9%A2%9D%E5%A4%96%E8%A1%A5%E5%85%85">额外补充</a></li>
<li><a href="#%E8%B4%A1%E7%8C%AE">贡献</a></li>
<li><a href="#%E8%AE%B8%E5%8F%AF%E8%AF%81">许可证</a></li>
</ul>
<h2 id="1-基本匹配"><a href="#1-基本匹配" class="headerlink" title="1. 基本匹配"></a>1. 基本匹配</h2><p>正则表达式其实就是在执行搜索时的格式，它由一些字母和数字组合而成。<br>例如：一个正则表达式 <code>the</code>，它表示一个规则：由字母<code>t</code>开始，接着是<code>h</code>，再接着是<code>e</code>。</p>
<pre>
"the" => The fat cat sat on <a href="#learn-regex"><strong>the</strong></a> mat.
</pre>
<p><a class="link"   href="https://regex101.com/r/dmRygT/1" >在线练习<i class="fas fa-external-link-alt"></i></a></p>
<p>正则表达式<code>123</code>匹配字符串<code>123</code>。它逐个字符的与输入的正则表达式做比较。</p>
<p>正则表达式是大小写敏感的，所以<code>The</code>不会匹配<code>the</code>。</p>
<pre>
"The" => <a href="#learn-regex"><strong>The</strong></a> fat cat sat on the mat.
</pre>

<p><a class="link"   href="https://regex101.com/r/1paXsy/1" >在线练习<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="2-元字符"><a href="#2-元字符" class="headerlink" title="2. 元字符"></a>2. 元字符</h2><p>正则表达式主要依赖于元字符。<br>元字符不代表他们本身的字面意思，他们都有特殊的含义。一些元字符写在方括号中的时候有一些特殊的意思。以下是一些元字符的介绍：</p>
<table>
<thead>
<tr>
<th align="center">元字符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">.</td>
<td>句号匹配任意单个字符除了换行符。</td>
</tr>
<tr>
<td align="center">[ ]</td>
<td>字符种类。匹配方括号内的任意字符。</td>
</tr>
<tr>
<td align="center">[^ ]</td>
<td>否定的字符种类。匹配除了方括号里的任意字符</td>
</tr>
<tr>
<td align="center">*</td>
<td>匹配&gt;&#x3D;0个重复的在*号之前的字符。</td>
</tr>
<tr>
<td align="center">+</td>
<td>匹配&gt;&#x3D;1个重复的+号前的字符。</td>
</tr>
<tr>
<td align="center">?</td>
<td>标记?之前的字符为可选.</td>
</tr>
<tr>
<td align="center">{n,m}</td>
<td>匹配num个大括号之前的字符或字符集 (n &lt;&#x3D; num &lt;&#x3D; m).</td>
</tr>
<tr>
<td align="center">(xyz)</td>
<td>字符集，匹配与 xyz 完全相等的字符串.</td>
</tr>
<tr>
<td align="center">&amp;#124;</td>
<td>或运算符，匹配符号前或后的字符.</td>
</tr>
<tr>
<td align="center">&amp;#92;</td>
<td>转义字符,用于匹配一些保留的字符 <code>[ ] ( ) &#123; &#125; . * + ? ^ $ \ &#124;</code></td>
</tr>
<tr>
<td align="center">^</td>
<td>从开始行开始匹配.</td>
</tr>
<tr>
<td align="center">$</td>
<td>从末端开始匹配.</td>
</tr>
</tbody></table>
<h2 id="2-1-点运算符"><a href="#2-1-点运算符" class="headerlink" title="2.1 点运算符 ."></a>2.1 点运算符 <code>.</code></h2><p><code>.</code>是元字符中最简单的例子。<br><code>.</code>匹配任意单个字符，但不匹配换行符。<br>例如，表达式<code>.ar</code>匹配一个任意字符后面跟着是<code>a</code>和<code>r</code>的字符串。</p>
<pre>
".ar" => The <a href="#learn-regex"><strong>car</strong></a> <a href="#learn-regex"><strong>par</strong></a>ked in the <a href="#learn-regex"><strong>gar</strong></a>age.
</pre>

<p><a class="link"   href="https://regex101.com/r/xc9GkU/1" >在线练习<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="2-2-字符集"><a href="#2-2-字符集" class="headerlink" title="2.2 字符集"></a>2.2 字符集</h2><p>字符集也叫做字符类。<br>方括号用来指定一个字符集。<br>在方括号中使用连字符来指定字符集的范围。<br>在方括号中的字符集不关心顺序。<br>例如，表达式<code>[Tt]he</code> 匹配 <code>the</code> 和 <code>The</code>。</p>
<pre>
"[Tt]he" => <a href="#learn-regex"><strong>The</strong></a> car parked in <a href="#learn-regex"><strong>the</strong></a> garage.
</pre>

<p><a class="link"   href="https://regex101.com/r/2ITLQ4/1" >在线练习<i class="fas fa-external-link-alt"></i></a></p>
<p>方括号的句号就表示句号。<br>表达式 <code>ar[.]</code> 匹配 <code>ar.</code>字符串</p>
<pre>
"ar[.]" => A garage is a good place to park a c<a href="#learn-regex"><strong>ar.</strong></a>
</pre>

<p><a class="link"   href="https://regex101.com/r/wL3xtE/1" >在线练习<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="2-2-1-否定字符集"><a href="#2-2-1-否定字符集" class="headerlink" title="2.2.1 否定字符集"></a>2.2.1 否定字符集</h3><p>一般来说 <code>^</code> 表示一个字符串的开头，但它用在一个方括号的开头的时候，它表示这个字符集是否定的。<br>例如，表达式<code>[^c]ar</code> 匹配一个后面跟着<code>ar</code>的除了<code>c</code>的任意字符。</p>
<pre>
"[^c]ar" => The car <a href="#learn-regex"><strong>par</strong></a>ked in the <a href="#learn-regex"><strong>gar</strong></a>age.
</pre>

<p><a class="link"   href="https://regex101.com/r/nNNlq3/1" >在线练习<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="2-3-重复次数"><a href="#2-3-重复次数" class="headerlink" title="2.3 重复次数"></a>2.3 重复次数</h2><p>后面跟着元字符 <code>+</code>，<code>*</code> or <code>?</code> 的，用来指定匹配子模式的次数。<br>这些元字符在不同的情况下有着不同的意思。</p>
<h3 id="2-3-1-号"><a href="#2-3-1-号" class="headerlink" title="2.3.1 * 号"></a>2.3.1 <code>*</code> 号</h3><p><code>*</code>号匹配 在<code>*</code>之前的字符出现<code>大于等于0</code>次。<br>例如，表达式 <code>a*</code> 匹配0或更多个以a开头的字符。表达式<code>[a-z]*</code> 匹配一个行中所有以小写字母开头的字符串。</p>
<pre>
"[a-z]*" => T<a href="#learn-regex"><strong>he</strong></a> <a href="#learn-regex"><strong>car</strong></a> <a href="#learn-regex"><strong>parked</strong></a> <a href="#learn-regex"><strong>in</strong></a> <a href="#learn-regex"><strong>the</strong></a> <a href="#learn-regex"><strong>garage</strong></a> #21.
</pre>

<p><a class="link"   href="https://regex101.com/r/7m8me5/1" >在线练习<i class="fas fa-external-link-alt"></i></a></p>
<p><code>*</code>字符和<code>.</code>字符搭配可以匹配所有的字符<code>.*</code>。<br><code>*</code>和表示匹配空格的符号<code>\s</code>连起来用，如表达式<code>\s*cat\s*</code>匹配0或更多个空格开头和0或更多个空格结尾的cat字符串。</p>
<pre>
"\s*cat\s*" => The fat<a href="#learn-regex"><strong> cat </strong></a>sat on the con<a href="#learn-regex"><strong>cat</strong></a>enation.
</pre>

<p><a class="link"   href="https://regex101.com/r/gGrwuz/1" >在线练习<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="2-3-2-号"><a href="#2-3-2-号" class="headerlink" title="2.3.2 + 号"></a>2.3.2 <code>+</code> 号</h3><p><code>+</code>号匹配<code>+</code>号之前的字符出现 &gt;&#x3D;1 次。<br>例如表达式<code>c.+t</code> 匹配以首字母<code>c</code>开头以<code>t</code>结尾，中间跟着至少一个字符的字符串。</p>
<pre>
"c.+t" => The fat <a href="#learn-regex"><strong>cat sat on the mat</strong></a>.
</pre>

<p><a class="link"   href="https://regex101.com/r/Dzf9Aa/1" >在线练习<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="2-3-3-号"><a href="#2-3-3-号" class="headerlink" title="2.3.3 ? 号"></a>2.3.3 <code>?</code> 号</h3><p>在正则表达式中元字符 <code>?</code> 标记在符号前面的字符为可选，即出现 0 或 1 次。<br>例如，表达式 <code>[T]?he</code> 匹配字符串 <code>he</code> 和 <code>The</code>。</p>
<pre>
"[T]he" => <a href="#learn-regex"><strong>The</strong></a> car is parked in the garage.
</pre>

<p><a class="link"   href="https://regex101.com/r/cIg9zm/1" >在线练习<i class="fas fa-external-link-alt"></i></a></p>
<pre>
"[T]?he" => <a href="#learn-regex"><strong>The</strong></a> car is parked in t<a href="#learn-regex"><strong>he</strong></a> garage.
</pre>

<p><a class="link"   href="https://regex101.com/r/kPpO2x/1" >在线练习<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="2-4-号"><a href="#2-4-号" class="headerlink" title="2.4 {} 号"></a>2.4 <code>&#123;&#125;</code> 号</h2><p>在正则表达式中 <code>&#123;&#125;</code> 是一个量词，常用来限定一个或一组字符可以重复出现的次数。<br>例如， 表达式 <code>[0-9]&#123;2,3&#125;</code> 匹配最少 2 位最多 3 位 0~9 的数字。</p>
<pre>
"[0-9]{2,3}" => The number was 9.<a href="#learn-regex"><strong>999</strong></a>7 but we rounded it off to <a href="#learn-regex"><strong>10</strong></a>.0.
</pre>

<p><a class="link"   href="https://regex101.com/r/juM86s/1" >在线练习<i class="fas fa-external-link-alt"></i></a></p>
<p>我们可以省略第二个参数。<br>例如，<code>[0-9]&#123;2,&#125;</code> 匹配至少两位 0~9 的数字。</p>
<pre>
"[0-9]{2,}" => The number was 9.<a href="#learn-regex"><strong>9997</strong></a> but we rounded it off to <a href="#learn-regex"><strong>10</strong></a>.0.
</pre>

<p><a class="link"   href="https://regex101.com/r/Gdy4w5/1" >在线练习<i class="fas fa-external-link-alt"></i></a></p>
<p>如果逗号也省略掉则表示重复固定的次数。<br>例如，<code>[0-9]&#123;3&#125;</code> 匹配3位数字</p>
<pre>
"[0-9]{3}" => The number was 9.<a href="#learn-regex"><strong>999</strong></a>7 but we rounded it off to 10.0.
</pre>

<p><a class="link"   href="https://regex101.com/r/Sivu30/1" >在线练习<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="2-5-特征标群"><a href="#2-5-特征标群" class="headerlink" title="2.5 (...) 特征标群"></a>2.5 <code>(...)</code> 特征标群</h2><p>特征标群是一组写在 <code>(...)</code> 中的子模式。<code>(...)</code> 中包含的内容将会被看成一个整体，和数学中小括号（ ）的作用相同。例如, 表达式 <code>(ab)*</code> 匹配连续出现 0 或更多个 <code>ab</code>。如果没有使用 <code>(...)</code> ，那么表达式 <code>ab*</code> 将匹配连续出现 0 或更多个 <code>b</code> 。再比如之前说的 <code>&#123;&#125;</code> 是用来表示前面一个字符出现指定次数。但如果在 <code>&#123;&#125;</code> 前加上特征标群 <code>(...)</code> 则表示整个标群内的字符重复 N 次。</p>
<p>我们还可以在 <code>()</code> 中用或字符 <code>|</code> 表示或。例如，<code>(c|g|p)ar</code> 匹配 <code>car</code> 或 <code>gar</code> 或 <code>par</code>.</p>
<pre>
"(c|g|p)ar" => The <a href="#learn-regex"><strong>car</strong></a> is <a href="#learn-regex"><strong>par</strong></a>ked in the <a href="#learn-regex"><strong>gar</strong></a>age.
</pre>

<p><a class="link"   href="https://regex101.com/r/tUxrBG/1" >在线练习<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="2-6-或运算符"><a href="#2-6-或运算符" class="headerlink" title="2.6 | 或运算符"></a>2.6 <code>|</code> 或运算符</h2><p>或运算符就表示或，用作判断条件。</p>
<p>例如 <code>(T|t)he|car</code> 匹配 <code>(T|t)he</code> 或 <code>car</code>。</p>
<pre>
"(T|t)he|car" => <a href="#learn-regex"><strong>The</strong></a> <a href="#learn-regex"><strong>car</strong></a> is parked in <a href="#learn-regex"><strong>the</strong></a> garage.
</pre>

<p><a class="link"   href="https://regex101.com/r/fBXyX0/1" >在线练习<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="2-7-转码特殊字符"><a href="#2-7-转码特殊字符" class="headerlink" title="2.7 转码特殊字符"></a>2.7 转码特殊字符</h2><p>反斜线 <code>\</code> 在表达式中用于转码紧跟其后的字符。用于指定 <code>&#123; &#125; [ ] / \ + * . $ ^ | ?</code> 这些特殊字符。如果想要匹配这些特殊字符则要在其前面加上反斜线 <code>\</code>。</p>
<p>例如 <code>.</code> 是用来匹配除换行符外的所有字符的。如果想要匹配句子中的 <code>.</code> 则要写成 <code>\.</code> 以下这个例子 <code>\.?</code>是选择性匹配<code>.</code></p>
<pre>
"(f|c|m)at\.?" => The <a href="#learn-regex"><strong>fat</strong></a> <a href="#learn-regex"><strong>cat</strong></a> sat on the <a href="#learn-regex"><strong>mat.</strong></a>
</pre>

<p><a class="link"   href="https://regex101.com/r/DOc5Nu/1" >在线练习<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="2-8-锚点"><a href="#2-8-锚点" class="headerlink" title="2.8 锚点"></a>2.8 锚点</h2><p>在正则表达式中，想要匹配指定开头或结尾的字符串就要使用到锚点。<code>^</code> 指定开头，<code>$</code> 指定结尾。</p>
<h3 id="2-8-1-号"><a href="#2-8-1-号" class="headerlink" title="2.8.1 ^ 号"></a>2.8.1 <code>^</code> 号</h3><p><code>^</code> 用来检查匹配的字符串是否在所匹配字符串的开头。</p>
<p>例如，在 <code>abc</code> 中使用表达式 <code>^a</code> 会得到结果 <code>a</code>。但如果使用 <code>^b</code> 将匹配不到任何结果。因为在字符串 <code>abc</code> 中并不是以 <code>b</code> 开头。</p>
<p>例如，<code>^(T|t)he</code> 匹配以 <code>The</code> 或 <code>the</code> 开头的字符串。</p>
<pre>
"(T|t)he" => <a href="#learn-regex"><strong>The</strong></a> car is parked in <a href="#learn-regex"><strong>the</strong></a> garage.
</pre>

<p><a class="link"   href="https://regex101.com/r/5ljjgB/1" >在线练习<i class="fas fa-external-link-alt"></i></a></p>
<pre>
"^(T|t)he" => <a href="#learn-regex"><strong>The</strong></a> car is parked in the garage.
</pre>

<p><a class="link"   href="https://regex101.com/r/jXrKne/1" >在线练习<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="2-8-2-号"><a href="#2-8-2-号" class="headerlink" title="2.8.2 $ 号"></a>2.8.2 <code>$</code> 号</h3><p>同理于 <code>^</code> 号，<code>$</code> 号用来匹配字符是否是最后一个。</p>
<p>例如，<code>(at\.)$</code> 匹配以 <code>at.</code> 结尾的字符串。</p>
<pre>
"(at\.)" => The fat c<a href="#learn-regex"><strong>at.</strong></a> s<a href="#learn-regex"><strong>at.</strong></a> on the m<a href="#learn-regex"><strong>at.</strong></a>
</pre>

<p><a class="link"   href="https://regex101.com/r/y4Au4D/1" >在线练习<i class="fas fa-external-link-alt"></i></a></p>
<pre>
"(at\.)$" => The fat cat. sat. on the m<a href="#learn-regex"><strong>at.</strong></a>
</pre>

<p><a class="link"   href="https://regex101.com/r/t0AkOd/1" >在线练习<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="3-简写字符集"><a href="#3-简写字符集" class="headerlink" title="3. 简写字符集"></a>3. 简写字符集</h2><p>正则表达式提供一些常用的字符集简写。如下:</p>
<table>
<thead>
<tr>
<th align="center">简写</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">.</td>
<td>除换行符外的所有字符</td>
</tr>
<tr>
<td align="center">\w</td>
<td>匹配所有字母数字，等同于 <code>[a-zA-Z0-9_]</code></td>
</tr>
<tr>
<td align="center">\W</td>
<td>匹配所有非字母数字，即符号，等同于： <code>[^\w]</code></td>
</tr>
<tr>
<td align="center">\d</td>
<td>匹配数字： <code>[0-9]</code></td>
</tr>
<tr>
<td align="center">\D</td>
<td>匹配非数字： <code>[^\d]</code></td>
</tr>
<tr>
<td align="center">\s</td>
<td>匹配所有空格字符，等同于： <code>[\t\n\f\r\p&#123;Z&#125;]</code></td>
</tr>
<tr>
<td align="center">\S</td>
<td>匹配所有非空格字符： <code>[^\s]</code></td>
</tr>
<tr>
<td align="center">\f</td>
<td>匹配一个换页符</td>
</tr>
<tr>
<td align="center">\n</td>
<td>匹配一个换行符</td>
</tr>
<tr>
<td align="center">\r</td>
<td>匹配一个回车符</td>
</tr>
<tr>
<td align="center">\t</td>
<td>匹配一个制表符</td>
</tr>
<tr>
<td align="center">\v</td>
<td>匹配一个垂直制表符</td>
</tr>
<tr>
<td align="center">\p</td>
<td>匹配 CR&#x2F;LF（等同于 <code>\r\n</code>），用来匹配 DOS 行终止符</td>
</tr>
</tbody></table>
<h2 id="4-零宽度断言（前后预查）"><a href="#4-零宽度断言（前后预查）" class="headerlink" title="4. 零宽度断言（前后预查）"></a>4. 零宽度断言（前后预查）</h2><p>先行断言和后发断言（合称 lookaround）都属于<strong>非捕获组</strong>（用于匹配模式，但不包括在匹配列表中）。当我们需要一个模式的前面或后面有另一个特定的模式时，就可以使用它们。</p>
<p>例如，我们希望从下面的输入字符串 <code>$4.44</code> 和 <code>$10.88</code> 中获得所有以 <code>$</code> 字符开头的数字，我们将使用以下的正则表达式 <code>(?&lt;=\$)[0-9\.]*</code>。意思是：获取所有包含 <code>.</code> 并且前面是 <code>$</code> 的数字。</p>
<p>零宽度断言如下：</p>
<table>
<thead>
<tr>
<th align="center">符号</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">?&#x3D;</td>
<td>正先行断言-存在</td>
</tr>
<tr>
<td align="center">?!</td>
<td>负先行断言-排除</td>
</tr>
<tr>
<td align="center">?&lt;&#x3D;</td>
<td>正后发断言-存在</td>
</tr>
<tr>
<td align="center">?&lt;!</td>
<td>负后发断言-排除</td>
</tr>
</tbody></table>
<h3 id="4-1-正先行断言"><a href="#4-1-正先行断言" class="headerlink" title="4.1 ?=... 正先行断言"></a>4.1 <code>?=...</code> 正先行断言</h3><p><code>?=...</code> 正先行断言，表示第一部分表达式之后必须跟着 <code>?=...</code>定义的表达式。</p>
<p>返回结果只包含满足匹配条件的第一部分表达式。<br>定义一个正先行断言要使用 <code>()</code>。在括号内部使用一个问号和等号： <code>(?=...)</code>。</p>
<p>正先行断言的内容写在括号中的等号后面。<br>例如，表达式 <code>(T|t)he(?=\sfat)</code> 匹配 <code>The</code> 和 <code>the</code>，在括号中我们又定义了正先行断言 <code>(?=\sfat)</code> ，即 <code>The</code> 和 <code>the</code> 后面紧跟着 <code>(空格)fat</code>。</p>
<pre>
"(T|t)he(?=\sfat)" => <a href="#learn-regex"><strong>The</strong></a> fat cat sat on the mat.
</pre>

<p><a class="link"   href="https://regex101.com/r/IDDARt/1" >在线练习<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="4-2-负先行断言"><a href="#4-2-负先行断言" class="headerlink" title="4.2 ?!... 负先行断言"></a>4.2 <code>?!...</code> 负先行断言</h3><p>负先行断言 <code>?!</code> 用于筛选所有匹配结果，筛选条件为 其后不跟随着断言中定义的格式。<br><code>正先行断言</code>  定义和 <code>负先行断言</code> 一样，区别就是 <code>=</code> 替换成 <code>!</code> 也就是 <code>(?!...)</code>。</p>
<p>表达式 <code>(T|t)he(?!\sfat)</code> 匹配 <code>The</code> 和 <code>the</code>，且其后不跟着 <code>(空格)fat</code>。</p>
<pre>
"(T|t)he(?!\sfat)" => The fat cat sat on <a href="#learn-regex"><strong>the</strong></a> mat.
</pre>

<p><a class="link"   href="https://regex101.com/r/V32Npg/1" >在线练习<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="4-3-lt-正后发断言"><a href="#4-3-lt-正后发断言" class="headerlink" title="4.3 ?&lt;= ... 正后发断言"></a>4.3 <code>?&lt;= ...</code> 正后发断言</h3><p>正后发断言 记作<code>(?&lt;=...)</code> 用于筛选所有匹配结果，筛选条件为 其前跟随着断言中定义的格式。<br>例如，表达式 <code>(?&lt;=(T|t)he\s)(fat|mat)</code> 匹配 <code>fat</code> 和 <code>mat</code>，且其前跟着 <code>The</code> 或 <code>the</code>。</p>
<pre>
"(?<=(T|t)he\s)(fat|mat)" => The <a href="#learn-regex"><strong>fat</strong></a> cat sat on the <a href="#learn-regex"><strong>mat</strong></a>.
</pre>

<p><a class="link"   href="https://regex101.com/r/avH165/1" >在线练习<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="4-4-lt-负后发断言"><a href="#4-4-lt-负后发断言" class="headerlink" title="4.4 ?&lt;!... 负后发断言"></a>4.4 <code>?&lt;!...</code> 负后发断言</h3><p>负后发断言 记作 <code>(?&lt;!...)</code> 用于筛选所有匹配结果，筛选条件为 其前不跟随着断言中定义的格式。<br>例如，表达式 <code>(?&lt;!(T|t)he\s)(cat)</code> 匹配 <code>cat</code>，且其前不跟着 <code>The</code> 或 <code>the</code>。</p>
<pre>
"(?&lt;!(T|t)he\s)(cat)" => The cat sat on <a href="#learn-regex"><strong>cat</strong></a>.
</pre>

<p><a class="link"   href="https://regex101.com/r/8Efx5G/1" >在线练习<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="5-标志"><a href="#5-标志" class="headerlink" title="5. 标志"></a>5. 标志</h2><p>标志也叫模式修正符，因为它可以用来修改表达式的搜索结果。<br>这些标志可以任意的组合使用，它也是整个正则表达式的一部分。</p>
<table>
<thead>
<tr>
<th align="center">标志</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">i</td>
<td>忽略大小写。</td>
</tr>
<tr>
<td align="center">g</td>
<td>全局搜索。</td>
</tr>
<tr>
<td align="center">m</td>
<td>多行修饰符：锚点元字符 <code>^</code> <code>$</code> 工作范围在每行的起始。</td>
</tr>
</tbody></table>
<h3 id="5-1-忽略大小写-Case-Insensitive"><a href="#5-1-忽略大小写-Case-Insensitive" class="headerlink" title="5.1 忽略大小写 (Case Insensitive)"></a>5.1 忽略大小写 (Case Insensitive)</h3><p>修饰语 <code>i</code> 用于忽略大小写。<br>例如，表达式 <code>/The/gi</code> 表示在全局搜索 <code>The</code>，在后面的 <code>i</code> 将其条件修改为忽略大小写，则变成搜索 <code>the</code> 和 <code>The</code>，<code>g</code> 表示全局搜索。</p>
<pre>
"The" => <a href="#learn-regex"><strong>The</strong></a> fat cat sat on the mat.
</pre>

<p><a class="link"   href="https://regex101.com/r/dpQyf9/1" >在线练习<i class="fas fa-external-link-alt"></i></a></p>
<pre>
"/The/gi" => <a href="#learn-regex"><strong>The</strong></a> fat cat sat on <a href="#learn-regex"><strong>the</strong></a> mat.
</pre>

<p><a class="link"   href="https://regex101.com/r/ahfiuh/1" >在线练习<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="5-2-全局搜索-Global-search"><a href="#5-2-全局搜索-Global-search" class="headerlink" title="5.2 全局搜索 (Global search)"></a>5.2 全局搜索 (Global search)</h3><p>修饰符 <code>g</code> 常用于执行一个全局搜索匹配，即（不仅仅返回第一个匹配的，而是返回全部）。<br>例如，表达式 <code>/.(at)/g</code> 表示搜索 任意字符（除了换行）+ <code>at</code>，并返回全部结果。</p>
<pre>
"/.(at)/" => The <a href="#learn-regex"><strong>fat</strong></a> cat sat on the mat.
</pre>

<p><a class="link"   href="https://regex101.com/r/jnk6gM/1" >在线练习<i class="fas fa-external-link-alt"></i></a></p>
<pre>
"/.(at)/g" => The <a href="#learn-regex"><strong>fat</strong></a> <a href="#learn-regex"><strong>cat</strong></a> <a href="#learn-regex"><strong>sat</strong></a> on the <a href="#learn-regex"><strong>mat</strong></a>.
</pre>

<p><a class="link"   href="https://regex101.com/r/dO1nef/1" >在线练习<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="5-3-多行修饰符-Multiline"><a href="#5-3-多行修饰符-Multiline" class="headerlink" title="5.3 多行修饰符 (Multiline)"></a>5.3 多行修饰符 (Multiline)</h3><p>多行修饰符 <code>m</code> 常用于执行一个多行匹配。</p>
<p>像之前介绍的 <code>(^,$)</code> 用于检查格式是否是在待检测字符串的开头或结尾。但我们如果想要它在每行的开头和结尾生效，我们需要用到多行修饰符 <code>m</code>。</p>
<p>例如，表达式 <code>/at(.)?$/gm</code> 表示小写字符 <code>a</code> 后跟小写字符 <code>t</code> ，末尾可选除换行符外任意字符。根据 <code>m</code> 修饰符，现在表达式匹配每行的结尾。</p>
<pre>
"/.at(.)?$/" => The fat
                cat sat
                on the <a href="#learn-regex"><strong>mat.</strong></a>
</pre>

<p><a class="link"   href="https://regex101.com/r/hoGMkP/1" >在线练习<i class="fas fa-external-link-alt"></i></a></p>
<pre>
"/.at(.)?$/gm" => The <a href="#learn-regex"><strong>fat</strong></a>
                  cat <a href="#learn-regex"><strong>sat</strong></a>
                  on the <a href="#learn-regex"><strong>mat.</strong></a>
</pre>

<p><a class="link"   href="https://regex101.com/r/E88WE2/1" >在线练习<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="6-贪婪匹配与惰性匹配-Greedy-vs-lazy-matching"><a href="#6-贪婪匹配与惰性匹配-Greedy-vs-lazy-matching" class="headerlink" title="6. 贪婪匹配与惰性匹配 (Greedy vs lazy matching)"></a>6. 贪婪匹配与惰性匹配 (Greedy vs lazy matching)</h3><p>正则表达式默认采用贪婪匹配模式，在该模式下意味着会匹配尽可能长的子串。我们可以使用 <code>?</code> 将贪婪匹配模式转化为惰性匹配模式。</p>
<pre>
"/(.*at)/" => <a href="#learn-regex"><strong>The fat cat sat on the mat</strong></a>. </pre>

<p><a class="link"   href="https://regex101.com/r/AyAdgJ/1" >在线练习<i class="fas fa-external-link-alt"></i></a></p>
<pre>
"/(.*?at)/" => <a href="#learn-regex"><strong>The fat</strong></a> cat sat on the mat. </pre>

<p><a class="link"   href="https://regex101.com/r/AyAdgJ/2" >在线练习<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="贡献"><a href="#贡献" class="headerlink" title="贡献"></a>贡献</h2><ul>
<li>报告问题</li>
<li>开放合并请求</li>
<li>传播此文档</li>
<li>直接和我联系 <a class="link"   href="mailto:&#x7a;&#x69;&#x69;&#x73;&#104;&#x61;&#x6e;&#101;&#x64;&#64;&#103;&#x6d;&#97;&#105;&#108;&#x2e;&#99;&#111;&#109;" >&#x7a;&#x69;&#x69;&#x73;&#104;&#x61;&#x6e;&#101;&#x64;&#64;&#103;&#x6d;&#97;&#105;&#108;&#x2e;&#99;&#111;&#109;<i class="fas fa-external-link-alt"></i></a> 或 <a href="https://twitter.com/ziishaned"><img src="https://raw.githubusercontent.com/Niaoyu00/pics/main/ziishaned.svg" alt="Twitter URL"></a></li>
</ul>
<h2 id="许可证"><a href="#许可证" class="headerlink" title="许可证"></a>许可证</h2><p>MIT &amp;copy; <a class="link"   href="https://twitter.com/ziishaned" >Zeeshan Ahmad<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <tags>
        <tag>正则表达式</tag>
      </tags>
  </entry>
</search>
